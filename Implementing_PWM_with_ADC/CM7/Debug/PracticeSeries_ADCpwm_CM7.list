
PracticeSeries_ADCpwm_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007584  08007584  00008584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007594  08007594  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007594  08007594  00009010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007594  08007594  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800759c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  24000010  080075ac  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000e8  080075ac  000090e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d7f  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002388  00000000  00000000  0001bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da3  00000000  00000000  0001f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b949  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aed  00000000  00000000  0005b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194d3e  00000000  00000000  000704d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020520f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c08  00000000  00000000  00205254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00209e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800756c 	.word	0x0800756c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800756c 	.word	0x0800756c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800046a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000470:	bf00      	nop
 8000472:	4b3e      	ldr	r3, [pc, #248]	@ (800056c <main+0x108>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d004      	beq.n	8000488 <main+0x24>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dcf4      	bgt.n	8000472 <main+0xe>
  if ( timeout < 0 )
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	da01      	bge.n	8000492 <main+0x2e>
  {
  Error_Handler();
 800048e:	f000 faa7 	bl	80009e0 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 fbeb 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f875 	bl	8000584 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800049a:	4b34      	ldr	r3, [pc, #208]	@ (800056c <main+0x108>)
 800049c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a0:	4a32      	ldr	r2, [pc, #200]	@ (800056c <main+0x108>)
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004aa:	4b30      	ldr	r3, [pc, #192]	@ (800056c <main+0x108>)
 80004ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f002 fa3b 	bl	8002934 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004be:	2100      	movs	r1, #0
 80004c0:	2000      	movs	r0, #0
 80004c2:	f002 fa51 	bl	8002968 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004ca:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004cc:	bf00      	nop
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <main+0x108>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d104      	bne.n	80004e4 <main+0x80>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	1e5a      	subs	r2, r3, #1
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	dcf4      	bgt.n	80004ce <main+0x6a>
if ( timeout < 0 )
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	da01      	bge.n	80004ee <main+0x8a>
{
Error_Handler();
 80004ea:	f000 fa79 	bl	80009e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f9ad 	bl	800084c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f2:	f000 f8b9 	bl	8000668 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004f6:	f000 f933 	bl	8000760 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  	  HAL_ADC_Start(&hadc1);
 80004fa:	481d      	ldr	r0, [pc, #116]	@ (8000570 <main+0x10c>)
 80004fc:	f001 f830 	bl	8001560 <HAL_ADC_Start>
	  	  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000500:	210c      	movs	r1, #12
 8000502:	481c      	ldr	r0, [pc, #112]	@ (8000574 <main+0x110>)
 8000504:	f006 f824 	bl	8006550 <HAL_TIM_PWM_Start>


	  	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8000508:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <main+0x110>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	641a      	str	r2, [r3, #64]	@ 0x40


	  	  	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000510:	2164      	movs	r1, #100	@ 0x64
 8000512:	4817      	ldr	r0, [pc, #92]	@ (8000570 <main+0x10c>)
 8000514:	f001 f8ee 	bl	80016f4 <HAL_ADC_PollForConversion>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d11c      	bne.n	8000558 <main+0xf4>
	  	  	  {
	  	  		  analog_val = HAL_ADC_GetValue(&hadc1);
 800051e:	4814      	ldr	r0, [pc, #80]	@ (8000570 <main+0x10c>)
 8000520:	f001 f9dc 	bl	80018dc <HAL_ADC_GetValue>
 8000524:	4603      	mov	r3, r0
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <main+0x114>)
 800052a:	801a      	strh	r2, [r3, #0]
	  	  		  analog_val = analog_val % 999;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <main+0x114>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	4a12      	ldr	r2, [pc, #72]	@ (800057c <main+0x118>)
 8000532:	fba2 1203 	umull	r1, r2, r2, r3
 8000536:	1a99      	subs	r1, r3, r2
 8000538:	0849      	lsrs	r1, r1, #1
 800053a:	440a      	add	r2, r1
 800053c:	0a52      	lsrs	r2, r2, #9
 800053e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8000542:	fb01 f202 	mul.w	r2, r1, r2
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <main+0x114>)
 800054c:	801a      	strh	r2, [r3, #0]
	  	  		  TIM2->CCR4 = analog_val;
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <main+0x114>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000556:	641a      	str	r2, [r3, #64]	@ 0x40



	  	  	  }
	  	  	  HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f000 fc19 	bl	8000d90 <HAL_Delay>
	  	  	  run++;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <main+0x11c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <main+0x11c>)
 8000566:	6013      	str	r3, [r2, #0]
	  	  	  HAL_ADC_Start(&hadc1);
 8000568:	e7c7      	b.n	80004fa <main+0x96>
 800056a:	bf00      	nop
 800056c:	58024400 	.word	0x58024400
 8000570:	2400002c 	.word	0x2400002c
 8000574:	24000090 	.word	0x24000090
 8000578:	240000e0 	.word	0x240000e0
 800057c:	06680a41 	.word	0x06680a41
 8000580:	240000dc 	.word	0x240000dc

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09c      	sub	sp, #112	@ 0x70
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800058e:	224c      	movs	r2, #76	@ 0x4c
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 ffbe 	bl	8007514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2220      	movs	r2, #32
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 ffb8 	bl	8007514 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005a4:	2004      	movs	r0, #4
 80005a6:	f002 f9f3 	bl	8002990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	@ (800065c <SystemClock_Config+0xd8>)
 80005b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005b2:	4a2a      	ldr	r2, [pc, #168]	@ (800065c <SystemClock_Config+0xd8>)
 80005b4:	f023 0301 	bic.w	r3, r3, #1
 80005b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005ba:	4b28      	ldr	r3, [pc, #160]	@ (800065c <SystemClock_Config+0xd8>)
 80005bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <SystemClock_Config+0xdc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005cc:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <SystemClock_Config+0xdc>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <SystemClock_Config+0xdc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005e0:	bf00      	nop
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xdc>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ee:	d1f8      	bne.n	80005e2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <SystemClock_Config+0xe0>)
 80005f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <SystemClock_Config+0xe0>)
 80005f6:	f023 0303 	bic.w	r3, r3, #3
 80005fa:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000600:	2301      	movs	r3, #1
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2340      	movs	r3, #64	@ 0x40
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fa17 	bl	8002a44 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800061c:	f000 f9e0 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	233f      	movs	r3, #63	@ 0x3f
 8000622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2101      	movs	r1, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fe57 	bl	80032f8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000650:	f000 f9c6 	bl	80009e0 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3770      	adds	r7, #112	@ 0x70
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000400 	.word	0x58000400
 8000660:	58024800 	.word	0x58024800
 8000664:	58024400 	.word	0x58024400

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068c:	4b31      	ldr	r3, [pc, #196]	@ (8000754 <MX_ADC1_Init+0xec>)
 800068e:	4a32      	ldr	r2, [pc, #200]	@ (8000758 <MX_ADC1_Init+0xf0>)
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000692:	4b30      	ldr	r3, [pc, #192]	@ (8000754 <MX_ADC1_Init+0xec>)
 8000694:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_ADC1_Init+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	4818      	ldr	r0, [pc, #96]	@ (8000754 <MX_ADC1_Init+0xec>)
 80006f2:	f000 fd93 	bl	800121c <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006fc:	f000 f970 	bl	80009e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <MX_ADC1_Init+0xec>)
 800070c:	f001 fda0 	bl	8002250 <HAL_ADCEx_MultiModeConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000716:	f000 f963 	bl	80009e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_ADC1_Init+0xf4>)
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071e:	2306      	movs	r3, #6
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000726:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800072a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072c:	2304      	movs	r3, #4
 800072e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_ADC1_Init+0xec>)
 800073e:	f001 f8db 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000748:	f000 f94a 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2400002c 	.word	0x2400002c
 8000758:	40022000 	.word	0x40022000
 800075c:	43210000 	.word	0x43210000

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	@ 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <MX_TIM2_Init+0xe8>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_TIM2_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4823      	ldr	r0, [pc, #140]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007bc:	f005 fe10 	bl	80063e0 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f90b 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007d8:	f006 f8dc 	bl	8006994 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007e2:	f000 f8fd 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e6:	4818      	ldr	r0, [pc, #96]	@ (8000848 <MX_TIM2_Init+0xe8>)
 80007e8:	f005 fe51 	bl	800648e <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007f2:	f000 f8f5 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	@ (8000848 <MX_TIM2_Init+0xe8>)
 8000806:	f006 fdf7 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000810:	f000 f8e6 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	220c      	movs	r2, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <MX_TIM2_Init+0xe8>)
 800082c:	f005 ff9e 	bl	800676c <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 f8d3 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_TIM2_Init+0xe8>)
 800083c:	f000 f982 	bl	8000b44 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	@ 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24000090 	.word	0x24000090

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b59      	ldr	r3, [pc, #356]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	4a57      	ldr	r2, [pc, #348]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000872:	4b55      	ldr	r3, [pc, #340]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b51      	ldr	r3, [pc, #324]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	4a50      	ldr	r2, [pc, #320]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000890:	4b4d      	ldr	r3, [pc, #308]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b4a      	ldr	r3, [pc, #296]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	4a48      	ldr	r2, [pc, #288]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ae:	4b46      	ldr	r3, [pc, #280]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008bc:	4b42      	ldr	r3, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	4a41      	ldr	r2, [pc, #260]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008cc:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b3b      	ldr	r3, [pc, #236]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	4a39      	ldr	r2, [pc, #228]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ea:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0x17c>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008f8:	2332      	movs	r3, #50	@ 0x32
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000908:	230b      	movs	r3, #11
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	482e      	ldr	r0, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x180>)
 8000914:	f001 fe5e 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000918:	2386      	movs	r3, #134	@ 0x86
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000928:	230b      	movs	r3, #11
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x184>)
 8000934:	f001 fe4e 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094a:	230b      	movs	r3, #11
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	481f      	ldr	r0, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0x188>)
 8000956:	f001 fe3d 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800096c:	2307      	movs	r3, #7
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <MX_GPIO_Init+0x18c>)
 8000978:	f001 fe2c 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800097c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800098e:	230a      	movs	r3, #10
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_GPIO_Init+0x184>)
 800099a:	f001 fe1b 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800099e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b0:	230b      	movs	r3, #11
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x190>)
 80009bc:	f001 fe0a 	bl	80025d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020800 	.word	0x58020800
 80009d0:	58020000 	.word	0x58020000
 80009d4:	58020400 	.word	0x58020400
 80009d8:	58020c00 	.word	0x58020c00
 80009dc:	58021800 	.word	0x58021800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_MspInit+0x30>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f8:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_MspInit+0x30>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_MspInit+0x30>)
 8000a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	58024400 	.word	0x58024400

08000a20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0ba      	sub	sp, #232	@ 0xe8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	22c0      	movs	r2, #192	@ 0xc0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 fd67 	bl	8007514 <memset>
  if(hadc->Instance==ADC1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d14f      	bne.n	8000af0 <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000a60:	230a      	movs	r3, #10
 8000a62:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a70:	23c0      	movs	r3, #192	@ 0xc0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a74:	2320      	movs	r3, #32
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 ffac 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000a92:	f7ff ffa5 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a9c:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000a9e:	f043 0320 	orr.w	r3, r3, #32
 8000aa2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_MspInit+0xe0>)
 8000aec:	f001 fd72 	bl	80025d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	37e8      	adds	r7, #232	@ 0xe8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40022000 	.word	0x40022000
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58020000 	.word	0x58020000

08000b04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1c:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b64:	d11e      	bne.n	8000ba4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_TIM_MspPostInit+0x68>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <HAL_TIM_MspPostInit+0x68>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_TIM_MspPostInit+0x68>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b84:	2308      	movs	r3, #8
 8000b86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <HAL_TIM_MspPostInit+0x6c>)
 8000ba0:	f001 fd18 	bl	80025d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58020000 	.word	0x58020000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f8a1 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c18:	f7ff fc0c 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fb5c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f006 fc6d 	bl	8007524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc0b 	bl	8000464 <main>
  bx  lr
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c58:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c5c:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 8000c60:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c64:	240000e8 	.word	0x240000e8

08000c68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC3_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f001 fc7c 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c78:	f002 fcf4 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_Init+0x68>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	4913      	ldr	r1, [pc, #76]	@ (8000cd8 <HAL_Init+0x6c>)
 8000c8a:	5ccb      	ldrb	r3, [r1, r3]
 8000c8c:	f003 031f 	and.w	r3, r3, #31
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_Init+0x68>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_Init+0x6c>)
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cac:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_Init+0x70>)
 8000cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <HAL_Init+0x74>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f814 	bl	8000ce4 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e002      	b.n	8000ccc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff fe91 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	08007584 	.word	0x08007584
 8000cdc:	24000004 	.word	0x24000004
 8000ce0:	24000000 	.word	0x24000000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_InitTick+0x60>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e021      	b.n	8000d3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_InitTick+0x64>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fc53 	bl	80025ba <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f001 fc2b 	bl	8002586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x68>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2400000c 	.word	0x2400000c
 8000d48:	24000000 	.word	0x24000000
 8000d4c:	24000008 	.word	0x24000008

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2400000c 	.word	0x2400000c
 8000d74:	240000e4 	.word	0x240000e4

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	240000e4 	.word	0x240000e4

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2400000c 	.word	0x2400000c

08000dd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetREVID+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0c1b      	lsrs	r3, r3, #16
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	5c001000 	.word	0x5c001000

08000df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d107      	bne.n	8000e7c <LL_ADC_SetChannelPreselection+0x24>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	0e9b      	lsrs	r3, r3, #26
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2201      	movs	r2, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	e015      	b.n	8000ea8 <LL_ADC_SetChannelPreselection+0x50>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8000e92:	2320      	movs	r3, #32
 8000e94:	e003      	b.n	8000e9e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	69d2      	ldr	r2, [r2, #28]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b087      	sub	sp, #28
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3360      	adds	r3, #96	@ 0x60
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	430b      	orrs	r3, r1
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	611a      	str	r2, [r3, #16]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3360      	adds	r3, #96	@ 0x60
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3330      	adds	r3, #48	@ 0x30
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	4413      	add	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	211f      	movs	r1, #31
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	0e9b      	lsrs	r3, r3, #26
 8000fc4:	f003 011f 	and.w	r1, r3, #31
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fd8:	bf00      	nop
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3314      	adds	r3, #20
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	0e5b      	lsrs	r3, r3, #25
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	0d1b      	lsrs	r3, r3, #20
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2107      	movs	r1, #7
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	401a      	ands	r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	0d1b      	lsrs	r3, r3, #20
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0318 	and.w	r3, r3, #24
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001060:	40d9      	lsrs	r1, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	400b      	ands	r3, r1
 8001066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800106a:	431a      	orrs	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	000fffff 	.word	0x000fffff

08001084 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 031f 	and.w	r3, r3, #31
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6093      	str	r3, [r2, #8]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	5fffffc0 	.word	0x5fffffc0

080010e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010f4:	d101      	bne.n	80010fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <LL_ADC_EnableInternalRegulator+0x24>)
 8001116:	4013      	ands	r3, r2
 8001118:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	6fffffc0 	.word	0x6fffffc0

08001130 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001144:	d101      	bne.n	800114a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <LL_ADC_Enable+0x24>)
 8001166:	4013      	ands	r3, r2
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	7fffffc0 	.word	0x7fffffc0

08001180 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <LL_ADC_IsEnabled+0x18>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <LL_ADC_IsEnabled+0x1a>
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <LL_ADC_REG_StartConversion+0x24>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	f043 0204 	orr.w	r2, r3, #4
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	7fffffc0 	.word	0x7fffffc0

080011d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d101      	bne.n	80011e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b08      	cmp	r3, #8
 8001208:	d101      	bne.n	800120e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e18f      	b.n	8001556 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fbeb 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff3f 	bl	80010e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff25 	bl	80010bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff5a 	bl	8001130 <LL_ADC_IsInternalRegulatorEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d114      	bne.n	80012ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff3e 	bl	8001108 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800128c:	4b87      	ldr	r3, [pc, #540]	@ (80014ac <HAL_ADC_Init+0x290>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	4a87      	ldr	r2, [pc, #540]	@ (80014b0 <HAL_ADC_Init+0x294>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800129e:	e002      	b.n	80012a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f9      	bne.n	80012a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff3d 	bl	8001130 <LL_ADC_IsInternalRegulatorEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c0:	f043 0210 	orr.w	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff77 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 80012e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8129 	bne.w	8001544 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 8125 	bne.w	8001544 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff36 	bl	8001180 <LL_ADC_IsEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d136      	bne.n	8001388 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <HAL_ADC_Init+0x298>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d004      	beq.n	800132e <HAL_ADC_Init+0x112>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a63      	ldr	r2, [pc, #396]	@ (80014b8 <HAL_ADC_Init+0x29c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10e      	bne.n	800134c <HAL_ADC_Init+0x130>
 800132e:	4861      	ldr	r0, [pc, #388]	@ (80014b4 <HAL_ADC_Init+0x298>)
 8001330:	f7ff ff26 	bl	8001180 <LL_ADC_IsEnabled>
 8001334:	4604      	mov	r4, r0
 8001336:	4860      	ldr	r0, [pc, #384]	@ (80014b8 <HAL_ADC_Init+0x29c>)
 8001338:	f7ff ff22 	bl	8001180 <LL_ADC_IsEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	4323      	orrs	r3, r4
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	e008      	b.n	800135e <HAL_ADC_Init+0x142>
 800134c:	485b      	ldr	r0, [pc, #364]	@ (80014bc <HAL_ADC_Init+0x2a0>)
 800134e:	f7ff ff17 	bl	8001180 <LL_ADC_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d012      	beq.n	8001388 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a53      	ldr	r2, [pc, #332]	@ (80014b4 <HAL_ADC_Init+0x298>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Init+0x15a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a51      	ldr	r2, [pc, #324]	@ (80014b8 <HAL_ADC_Init+0x29c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_ADC_Init+0x15e>
 8001376:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <HAL_ADC_Init+0x2a4>)
 8001378:	e000      	b.n	800137c <HAL_ADC_Init+0x160>
 800137a:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <HAL_ADC_Init+0x2a8>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f7ff fd34 	bl	8000df0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001388:	f7ff fd26 	bl	8000dd8 <HAL_GetREVID>
 800138c:	4603      	mov	r3, r0
 800138e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001392:	4293      	cmp	r3, r2
 8001394:	d914      	bls.n	80013c0 <HAL_ADC_Init+0x1a4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d110      	bne.n	80013c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7d5b      	ldrb	r3, [r3, #21]
 80013a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80013ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7f1b      	ldrb	r3, [r3, #28]
 80013b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80013b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013b8:	f043 030c 	orr.w	r3, r3, #12
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e00d      	b.n	80013dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d5b      	ldrb	r3, [r3, #21]
 80013c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80013d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7f1b      	ldrb	r3, [r3, #28]
 80013d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7f1b      	ldrb	r3, [r3, #28]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <HAL_ADC_Init+0x2ac>)
 8001416:	4013      	ands	r3, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	430b      	orrs	r3, r1
 8001420:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fed2 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 800142c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fedf 	bl	80011f6 <LL_ADC_INJ_IsConversionOngoing>
 8001438:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d15f      	bne.n	8001500 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d15c      	bne.n	8001500 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7d1b      	ldrb	r3, [r3, #20]
 800144a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <HAL_ADC_Init+0x2b0>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	430b      	orrs	r3, r1
 8001466:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800146e:	2b01      	cmp	r3, #1
 8001470:	d130      	bne.n	80014d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_ADC_Init+0x2b4>)
 8001480:	4013      	ands	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001486:	3a01      	subs	r2, #1
 8001488:	0411      	lsls	r1, r2, #16
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001494:	4311      	orrs	r1, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800149a:	430a      	orrs	r2, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	e01c      	b.n	80014e4 <HAL_ADC_Init+0x2c8>
 80014aa:	bf00      	nop
 80014ac:	24000000 	.word	0x24000000
 80014b0:	053e2d63 	.word	0x053e2d63
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022100 	.word	0x40022100
 80014bc:	58026000 	.word	0x58026000
 80014c0:	40022300 	.word	0x40022300
 80014c4:	58026300 	.word	0x58026300
 80014c8:	fff0c003 	.word	0xfff0c003
 80014cc:	ffffbffc 	.word	0xffffbffc
 80014d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fd76 	bl	8001fec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10c      	bne.n	8001522 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f023 010f 	bic.w	r1, r3, #15
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001520:	e007      	b.n	8001532 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 020f 	bic.w	r2, r2, #15
 8001530:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	655a      	str	r2, [r3, #84]	@ 0x54
 8001542:	e007      	b.n	8001554 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	f043 0210 	orr.w	r2, r3, #16
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001554:	7ffb      	ldrb	r3, [r7, #31]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop

08001560 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a5c      	ldr	r2, [pc, #368]	@ (80016e0 <HAL_ADC_Start+0x180>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d004      	beq.n	800157c <HAL_ADC_Start+0x1c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a5b      	ldr	r2, [pc, #364]	@ (80016e4 <HAL_ADC_Start+0x184>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_ADC_Start+0x20>
 800157c:	4b5a      	ldr	r3, [pc, #360]	@ (80016e8 <HAL_ADC_Start+0x188>)
 800157e:	e000      	b.n	8001582 <HAL_ADC_Start+0x22>
 8001580:	4b5a      	ldr	r3, [pc, #360]	@ (80016ec <HAL_ADC_Start+0x18c>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fd7e 	bl	8001084 <LL_ADC_GetMultimode>
 8001588:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe1e 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 809a 	bne.w	80016d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Start+0x4a>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e095      	b.n	80016d6 <HAL_ADC_Start+0x176>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fc90 	bl	8001ed8 <ADC_Enable>
 80015b8:	4603      	mov	r3, r0
 80015ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8081 	bne.w	80016c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80015c8:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <HAL_ADC_Start+0x190>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a42      	ldr	r2, [pc, #264]	@ (80016e4 <HAL_ADC_Start+0x184>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d002      	beq.n	80015e4 <HAL_ADC_Start+0x84>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Start+0x86>
 80015e4:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_ADC_Start+0x180>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d002      	beq.n	80015f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800160c:	d106      	bne.n	800161c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f023 0206 	bic.w	r2, r3, #6
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	659a      	str	r2, [r3, #88]	@ 0x58
 800161a:	e002      	b.n	8001622 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	221c      	movs	r2, #28
 8001628:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <HAL_ADC_Start+0x184>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d002      	beq.n	8001642 <HAL_ADC_Start+0xe2>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e000      	b.n	8001644 <HAL_ADC_Start+0xe4>
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_ADC_Start+0x180>)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	4293      	cmp	r3, r2
 800164a:	d008      	beq.n	800165e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d002      	beq.n	800165e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b09      	cmp	r3, #9
 800165c:	d114      	bne.n	8001688 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001674:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd91 	bl	80011a8 <LL_ADC_REG_StartConversion>
 8001686:	e025      	b.n	80016d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <HAL_ADC_Start+0x184>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d002      	beq.n	80016a4 <HAL_ADC_Start+0x144>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e000      	b.n	80016a6 <HAL_ADC_Start+0x146>
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_ADC_Start+0x180>)
 80016a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00f      	beq.n	80016d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80016c4:	e006      	b.n	80016d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016ce:	e001      	b.n	80016d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
 80016d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000
 80016e4:	40022100 	.word	0x40022100
 80016e8:	40022300 	.word	0x40022300
 80016ec:	58026300 	.word	0x58026300
 80016f0:	fffff0fe 	.word	0xfffff0fe

080016f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a72      	ldr	r2, [pc, #456]	@ (80018cc <HAL_ADC_PollForConversion+0x1d8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_ADC_PollForConversion+0x1e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a70      	ldr	r2, [pc, #448]	@ (80018d0 <HAL_ADC_PollForConversion+0x1dc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_ADC_PollForConversion+0x22>
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_ADC_PollForConversion+0x1e0>)
 8001714:	e000      	b.n	8001718 <HAL_ADC_PollForConversion+0x24>
 8001716:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <HAL_ADC_PollForConversion+0x1e4>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fcb3 	bl	8001084 <LL_ADC_GetMultimode>
 800171e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d102      	bne.n	800172e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001728:	2308      	movs	r3, #8
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	e037      	b.n	800179e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b05      	cmp	r3, #5
 8001738:	d002      	beq.n	8001740 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d111      	bne.n	8001764 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001752:	f043 0220 	orr.w	r2, r3, #32
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0b1      	b.n	80018c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800175e:	2304      	movs	r3, #4
 8001760:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001762:	e01c      	b.n	800179e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a58      	ldr	r2, [pc, #352]	@ (80018cc <HAL_ADC_PollForConversion+0x1d8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_ADC_PollForConversion+0x84>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a57      	ldr	r2, [pc, #348]	@ (80018d0 <HAL_ADC_PollForConversion+0x1dc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_ADC_PollForConversion+0x88>
 8001778:	4b56      	ldr	r3, [pc, #344]	@ (80018d4 <HAL_ADC_PollForConversion+0x1e0>)
 800177a:	e000      	b.n	800177e <HAL_ADC_PollForConversion+0x8a>
 800177c:	4b56      	ldr	r3, [pc, #344]	@ (80018d8 <HAL_ADC_PollForConversion+0x1e4>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc8e 	bl	80010a0 <LL_ADC_GetMultiDMATransfer>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178e:	f043 0220 	orr.w	r2, r3, #32
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e093      	b.n	80018c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800179a:	2304      	movs	r3, #4
 800179c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800179e:	f7ff faeb 	bl	8000d78 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017a4:	e021      	b.n	80017ea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d01d      	beq.n	80017ea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017ae:	f7ff fae3 	bl	8000d78 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d302      	bcc.n	80017c4 <HAL_ADC_PollForConversion+0xd0>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d112      	bne.n	80017ea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f043 0204 	orr.w	r2, r3, #4
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e06b      	b.n	80018c2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0d6      	beq.n	80017a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbac 	bl	8000f66 <LL_ADC_REG_IsTriggerSourceSWStart>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01c      	beq.n	800184e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7d5b      	ldrb	r3, [r3, #21]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d118      	bne.n	800184e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b08      	cmp	r3, #8
 8001828:	d111      	bne.n	800184e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1f      	ldr	r2, [pc, #124]	@ (80018d0 <HAL_ADC_PollForConversion+0x1dc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d002      	beq.n	800185e <HAL_ADC_PollForConversion+0x16a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e000      	b.n	8001860 <HAL_ADC_PollForConversion+0x16c>
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_ADC_PollForConversion+0x1d8>)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4293      	cmp	r3, r2
 8001866:	d008      	beq.n	800187a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d002      	beq.n	800187a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b09      	cmp	r3, #9
 8001878:	d104      	bne.n	8001884 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e00c      	b.n	800189e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a11      	ldr	r2, [pc, #68]	@ (80018d0 <HAL_ADC_PollForConversion+0x1dc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d002      	beq.n	8001894 <HAL_ADC_PollForConversion+0x1a0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	e000      	b.n	8001896 <HAL_ADC_PollForConversion+0x1a2>
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_ADC_PollForConversion+0x1d8>)
 8001896:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d104      	bne.n	80018ae <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e008      	b.n	80018c0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d103      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	220c      	movs	r2, #12
 80018be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40022100 	.word	0x40022100
 80018d4:	40022300 	.word	0x40022300
 80018d8:	58026300 	.word	0x58026300

080018dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b08d      	sub	sp, #52	@ 0x34
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001912:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x2a>
 800191e:	2302      	movs	r3, #2
 8001920:	e2c7      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x5ba>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc4e 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 82ac 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db2c      	blt.n	800199e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800194c:	2b00      	cmp	r3, #0
 800194e:	d108      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x6a>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2201      	movs	r2, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	e016      	b.n	8001990 <HAL_ADC_ConfigChannel+0x98>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	613b      	str	r3, [r7, #16]
  return result;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e003      	b.n	8001986 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2201      	movs	r2, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	69d1      	ldr	r1, [r2, #28]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	430b      	orrs	r3, r1
 800199c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f7ff faee 	bl	8000f8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc0b 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 80019ba:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fc18 	bl	80011f6 <LL_ADC_INJ_IsConversionOngoing>
 80019c6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 80b8 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 80b4 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f7ff fafd 	bl	8000fe4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019ea:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <HAL_ADC_ConfigChannel+0x1b4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80019f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019f6:	d10b      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x118>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	e01d      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x154>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10b      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x13e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	e00a      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x154>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d02c      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f7ff fa2b 	bl	8000ebe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6919      	ldr	r1, [r3, #16]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	7e5b      	ldrb	r3, [r3, #25]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x186>
 8001a78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x188>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	461a      	mov	r2, r3
 8001a82:	f7ff fa55 	bl	8000f30 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7e1b      	ldrb	r3, [r3, #24]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1a4>
 8001a96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1a6>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f7ff fa2d 	bl	8000efe <LL_ADC_SetDataRightShift>
 8001aa4:	e04c      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x248>
 8001aa6:	bf00      	nop
 8001aa8:	47ff0000 	.word	0x47ff0000
 8001aac:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ad2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	069b      	lsls	r3, r3, #26
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001af6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	069b      	lsls	r3, r3, #26
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b1a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fb1b 	bl	8001180 <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 81aa 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f7ff fa6c 	bl	800103c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a87      	ldr	r2, [pc, #540]	@ (8001d88 <HAL_ADC_ConfigChannel+0x490>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 809a 	bne.w	8001ca4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4984      	ldr	r1, [pc, #528]	@ (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001b7a:	428b      	cmp	r3, r1
 8001b7c:	d147      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x316>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4983      	ldr	r1, [pc, #524]	@ (8001d90 <HAL_ADC_ConfigChannel+0x498>)
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d040      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x312>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4981      	ldr	r1, [pc, #516]	@ (8001d94 <HAL_ADC_ConfigChannel+0x49c>)
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	d039      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x30e>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4980      	ldr	r1, [pc, #512]	@ (8001d98 <HAL_ADC_ConfigChannel+0x4a0>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d032      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x30a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	497e      	ldr	r1, [pc, #504]	@ (8001d9c <HAL_ADC_ConfigChannel+0x4a4>)
 8001ba2:	428b      	cmp	r3, r1
 8001ba4:	d02b      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x306>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	497d      	ldr	r1, [pc, #500]	@ (8001da0 <HAL_ADC_ConfigChannel+0x4a8>)
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d024      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x302>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	497b      	ldr	r1, [pc, #492]	@ (8001da4 <HAL_ADC_ConfigChannel+0x4ac>)
 8001bb6:	428b      	cmp	r3, r1
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0x2fe>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	497a      	ldr	r1, [pc, #488]	@ (8001da8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d016      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x2fa>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4978      	ldr	r1, [pc, #480]	@ (8001dac <HAL_ADC_ConfigChannel+0x4b4>)
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d00f      	beq.n	8001bee <HAL_ADC_ConfigChannel+0x2f6>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4977      	ldr	r1, [pc, #476]	@ (8001db0 <HAL_ADC_ConfigChannel+0x4b8>)
 8001bd4:	428b      	cmp	r3, r1
 8001bd6:	d008      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x2f2>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4975      	ldr	r1, [pc, #468]	@ (8001db4 <HAL_ADC_ConfigChannel+0x4bc>)
 8001bde:	428b      	cmp	r3, r1
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x2ee>
 8001be2:	4b75      	ldr	r3, [pc, #468]	@ (8001db8 <HAL_ADC_ConfigChannel+0x4c0>)
 8001be4:	e05a      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001be6:	2300      	movs	r3, #0
 8001be8:	e058      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bea:	4b74      	ldr	r3, [pc, #464]	@ (8001dbc <HAL_ADC_ConfigChannel+0x4c4>)
 8001bec:	e056      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bee:	4b74      	ldr	r3, [pc, #464]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x4c8>)
 8001bf0:	e054      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001dac <HAL_ADC_ConfigChannel+0x4b4>)
 8001bf4:	e052      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001bf8:	e050      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x4cc>)
 8001bfc:	e04e      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x4d0>)
 8001c00:	e04c      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c02:	4b72      	ldr	r3, [pc, #456]	@ (8001dcc <HAL_ADC_ConfigChannel+0x4d4>)
 8001c04:	e04a      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c06:	4b72      	ldr	r3, [pc, #456]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x4d8>)
 8001c08:	e048      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e046      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4970      	ldr	r1, [pc, #448]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x4dc>)
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d140      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x3a2>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	495c      	ldr	r1, [pc, #368]	@ (8001d90 <HAL_ADC_ConfigChannel+0x498>)
 8001c1e:	428b      	cmp	r3, r1
 8001c20:	d039      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x39e>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	495b      	ldr	r1, [pc, #364]	@ (8001d94 <HAL_ADC_ConfigChannel+0x49c>)
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	d032      	beq.n	8001c92 <HAL_ADC_ConfigChannel+0x39a>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4959      	ldr	r1, [pc, #356]	@ (8001d98 <HAL_ADC_ConfigChannel+0x4a0>)
 8001c32:	428b      	cmp	r3, r1
 8001c34:	d02b      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x396>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4958      	ldr	r1, [pc, #352]	@ (8001d9c <HAL_ADC_ConfigChannel+0x4a4>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d024      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x392>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4956      	ldr	r1, [pc, #344]	@ (8001da0 <HAL_ADC_ConfigChannel+0x4a8>)
 8001c46:	428b      	cmp	r3, r1
 8001c48:	d01d      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x38e>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4955      	ldr	r1, [pc, #340]	@ (8001da4 <HAL_ADC_ConfigChannel+0x4ac>)
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d016      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x38a>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4953      	ldr	r1, [pc, #332]	@ (8001da8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001c5a:	428b      	cmp	r3, r1
 8001c5c:	d00f      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x386>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4952      	ldr	r1, [pc, #328]	@ (8001dac <HAL_ADC_ConfigChannel+0x4b4>)
 8001c64:	428b      	cmp	r3, r1
 8001c66:	d008      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x382>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4951      	ldr	r1, [pc, #324]	@ (8001db4 <HAL_ADC_ConfigChannel+0x4bc>)
 8001c6e:	428b      	cmp	r3, r1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x37e>
 8001c72:	4b51      	ldr	r3, [pc, #324]	@ (8001db8 <HAL_ADC_ConfigChannel+0x4c0>)
 8001c74:	e012      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c76:	2300      	movs	r3, #0
 8001c78:	e010      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c7a:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x4c8>)
 8001c7c:	e00e      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dac <HAL_ADC_ConfigChannel+0x4b4>)
 8001c80:	e00c      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c82:	4b49      	ldr	r3, [pc, #292]	@ (8001da8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001c84:	e00a      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c86:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x4cc>)
 8001c88:	e008      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x4d0>)
 8001c8c:	e006      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8001dcc <HAL_ADC_ConfigChannel+0x4d4>)
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c92:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x4d8>)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x3a4>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f7ff f8da 	bl	8000e58 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f280 80fc 	bge.w	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a36      	ldr	r2, [pc, #216]	@ (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x3ca>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a45      	ldr	r2, [pc, #276]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x4dc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x3ce>
 8001cc2:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x4e0>)
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x3d0>
 8001cc6:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_ADC_ConfigChannel+0x4e4>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f8b7 	bl	8000e3c <LL_ADC_GetCommonPathInternalCh>
 8001cce:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x3ec>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x4dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10e      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x40a>
 8001ce4:	4829      	ldr	r0, [pc, #164]	@ (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001ce6:	f7ff fa4b 	bl	8001180 <LL_ADC_IsEnabled>
 8001cea:	4604      	mov	r4, r0
 8001cec:	4839      	ldr	r0, [pc, #228]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x4dc>)
 8001cee:	f7ff fa47 	bl	8001180 <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4323      	orrs	r3, r4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	e008      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x41c>
 8001d02:	4837      	ldr	r0, [pc, #220]	@ (8001de0 <HAL_ADC_ConfigChannel+0x4e8>)
 8001d04:	f7ff fa3c 	bl	8001180 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80b3 	beq.w	8001e80 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a31      	ldr	r2, [pc, #196]	@ (8001de4 <HAL_ADC_ConfigChannel+0x4ec>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d165      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x4f8>
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d160      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <HAL_ADC_ConfigChannel+0x4e8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f040 80b6 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	@ (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x456>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x4dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x45a>
 8001d4e:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x4e0>)
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x45c>
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <HAL_ADC_ConfigChannel+0x4e4>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7ff f85a 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_ADC_ConfigChannel+0x4f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <HAL_ADC_ConfigChannel+0x4f4>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	3301      	adds	r3, #1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d84:	e08f      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
 8001d86:	bf00      	nop
 8001d88:	47ff0000 	.word	0x47ff0000
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	04300002 	.word	0x04300002
 8001d94:	08600004 	.word	0x08600004
 8001d98:	0c900008 	.word	0x0c900008
 8001d9c:	10c00010 	.word	0x10c00010
 8001da0:	14f00020 	.word	0x14f00020
 8001da4:	2a000400 	.word	0x2a000400
 8001da8:	2e300800 	.word	0x2e300800
 8001dac:	32601000 	.word	0x32601000
 8001db0:	43210000 	.word	0x43210000
 8001db4:	4b840000 	.word	0x4b840000
 8001db8:	4fb80000 	.word	0x4fb80000
 8001dbc:	47520000 	.word	0x47520000
 8001dc0:	36902000 	.word	0x36902000
 8001dc4:	25b00200 	.word	0x25b00200
 8001dc8:	21800100 	.word	0x21800100
 8001dcc:	1d500080 	.word	0x1d500080
 8001dd0:	19200040 	.word	0x19200040
 8001dd4:	40022100 	.word	0x40022100
 8001dd8:	40022300 	.word	0x40022300
 8001ddc:	58026300 	.word	0x58026300
 8001de0:	58026000 	.word	0x58026000
 8001de4:	cb840000 	.word	0xcb840000
 8001de8:	24000000 	.word	0x24000000
 8001dec:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a31      	ldr	r2, [pc, #196]	@ (8001ebc <HAL_ADC_ConfigChannel+0x5c4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d11e      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x540>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d119      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d14b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_ConfigChannel+0x52a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x52e>
 8001e22:	4a2a      	ldr	r2, [pc, #168]	@ (8001ecc <HAL_ADC_ConfigChannel+0x5d4>)
 8001e24:	e000      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x530>
 8001e26:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x5d8>)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7fe fff0 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e36:	e036      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x5dc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d131      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12c      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d127      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x572>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x576>
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <HAL_ADC_ConfigChannel+0x5d4>)
 8001e6c:	e000      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x578>
 8001e6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x5d8>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7fe ffcc 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
 8001e7e:	e012      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001e92:	e008      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3734      	adds	r7, #52	@ 0x34
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	c7520000 	.word	0xc7520000
 8001ec0:	58026000 	.word	0x58026000
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40022100 	.word	0x40022100
 8001ecc:	40022300 	.word	0x40022300
 8001ed0:	58026300 	.word	0x58026300
 8001ed4:	cfb80000 	.word	0xcfb80000

08001ed8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f94b 	bl	8001180 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d16e      	bne.n	8001fce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <ADC_Enable+0x100>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f02:	f043 0210 	orr.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e05a      	b.n	8001fd0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f91a 	bl	8001158 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff28 	bl	8000d78 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fdc <ADC_Enable+0x104>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <ADC_Enable+0x66>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a29      	ldr	r2, [pc, #164]	@ (8001fe0 <ADC_Enable+0x108>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <ADC_Enable+0x6a>
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <ADC_Enable+0x10c>)
 8001f40:	e000      	b.n	8001f44 <ADC_Enable+0x6c>
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <ADC_Enable+0x110>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f89d 	bl	8001084 <LL_ADC_GetMultimode>
 8001f4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <ADC_Enable+0x108>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d002      	beq.n	8001f5c <ADC_Enable+0x84>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e000      	b.n	8001f5e <ADC_Enable+0x86>
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <ADC_Enable+0x104>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02c      	beq.n	8001fc0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d130      	bne.n	8001fce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f6c:	e028      	b.n	8001fc0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f904 	bl	8001180 <LL_ADC_IsEnabled>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f8e8 	bl	8001158 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f88:	f7fe fef6 	bl	8000d78 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d914      	bls.n	8001fc0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d00d      	beq.n	8001fc0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e007      	b.n	8001fd0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d1cf      	bne.n	8001f6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	8000003f 	.word	0x8000003f
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40022100 	.word	0x40022100
 8001fe4:	40022300 	.word	0x40022300
 8001fe8:	58026300 	.word	0x58026300

08001fec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80021e4 <ADC_ConfigureBoostMode+0x1f8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <ADC_ConfigureBoostMode+0x1c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a79      	ldr	r2, [pc, #484]	@ (80021e8 <ADC_ConfigureBoostMode+0x1fc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d109      	bne.n	800201c <ADC_ConfigureBoostMode+0x30>
 8002008:	4b78      	ldr	r3, [pc, #480]	@ (80021ec <ADC_ConfigureBoostMode+0x200>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e008      	b.n	800202e <ADC_ConfigureBoostMode+0x42>
 800201c:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <ADC_ConfigureBoostMode+0x204>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01c      	beq.n	800206c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002032:	f001 fc91 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8002036:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002040:	d010      	beq.n	8002064 <ADC_ConfigureBoostMode+0x78>
 8002042:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002046:	d873      	bhi.n	8002130 <ADC_ConfigureBoostMode+0x144>
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d002      	beq.n	8002054 <ADC_ConfigureBoostMode+0x68>
 800204e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002052:	d16d      	bne.n	8002130 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	60fb      	str	r3, [r7, #12]
        break;
 8002062:	e068      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	60fb      	str	r3, [r7, #12]
        break;
 800206a:	e064      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800206c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f002 fec0 	bl	8004df8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002078:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002082:	d051      	beq.n	8002128 <ADC_ConfigureBoostMode+0x13c>
 8002084:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002088:	d854      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 800208a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800208e:	d047      	beq.n	8002120 <ADC_ConfigureBoostMode+0x134>
 8002090:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002094:	d84e      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 8002096:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800209a:	d03d      	beq.n	8002118 <ADC_ConfigureBoostMode+0x12c>
 800209c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80020a0:	d848      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020a6:	d033      	beq.n	8002110 <ADC_ConfigureBoostMode+0x124>
 80020a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020ac:	d842      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80020b2:	d029      	beq.n	8002108 <ADC_ConfigureBoostMode+0x11c>
 80020b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80020b8:	d83c      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80020be:	d01a      	beq.n	80020f6 <ADC_ConfigureBoostMode+0x10a>
 80020c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80020c4:	d836      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80020ca:	d014      	beq.n	80020f6 <ADC_ConfigureBoostMode+0x10a>
 80020cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80020d0:	d830      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020d6:	d00e      	beq.n	80020f6 <ADC_ConfigureBoostMode+0x10a>
 80020d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020dc:	d82a      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80020e2:	d008      	beq.n	80020f6 <ADC_ConfigureBoostMode+0x10a>
 80020e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80020e8:	d824      	bhi.n	8002134 <ADC_ConfigureBoostMode+0x148>
 80020ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80020ee:	d002      	beq.n	80020f6 <ADC_ConfigureBoostMode+0x10a>
 80020f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80020f4:	d11e      	bne.n	8002134 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	60fb      	str	r3, [r7, #12]
        break;
 8002106:	e016      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
        break;
 800210e:	e012      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	60fb      	str	r3, [r7, #12]
        break;
 8002116:	e00e      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	60fb      	str	r3, [r7, #12]
        break;
 800211e:	e00a      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	09db      	lsrs	r3, r3, #7
 8002124:	60fb      	str	r3, [r7, #12]
        break;
 8002126:	e006      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	60fb      	str	r3, [r7, #12]
        break;
 800212e:	e002      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002134:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002136:	f7fe fe4f 	bl	8000dd8 <HAL_GetREVID>
 800213a:	4603      	mov	r3, r0
 800213c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002140:	4293      	cmp	r3, r2
 8002142:	d815      	bhi.n	8002170 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <ADC_ConfigureBoostMode+0x208>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d908      	bls.n	800215e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800215a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800215c:	e03e      	b.n	80021dc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800216c:	609a      	str	r2, [r3, #8]
}
 800216e:	e035      	b.n	80021dc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <ADC_ConfigureBoostMode+0x20c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d808      	bhi.n	8002190 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800218c:	609a      	str	r2, [r3, #8]
}
 800218e:	e025      	b.n	80021dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <ADC_ConfigureBoostMode+0x210>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d80a      	bhi.n	80021ae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	e016      	b.n	80021dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <ADC_ConfigureBoostMode+0x214>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d80a      	bhi.n	80021cc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c8:	609a      	str	r2, [r3, #8]
}
 80021ca:	e007      	b.n	80021dc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40022100 	.word	0x40022100
 80021ec:	40022300 	.word	0x40022300
 80021f0:	58026300 	.word	0x58026300
 80021f4:	01312d00 	.word	0x01312d00
 80021f8:	005f5e10 	.word	0x005f5e10
 80021fc:	00bebc20 	.word	0x00bebc20
 8002200:	017d7840 	.word	0x017d7840

08002204 <LL_ADC_IsEnabled>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <LL_ADC_IsEnabled+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_IsEnabled+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_REG_IsConversionOngoing>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d101      	bne.n	8002242 <LL_ADC_REG_IsConversionOngoing+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b09f      	sub	sp, #124	@ 0x7c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e0be      	b.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800227a:	2300      	movs	r3, #0
 800227c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002288:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	e001      	b.n	8002292 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e09d      	b.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ffb9 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 80022b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ffb3 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d17f      	bne.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d17c      	bne.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a47      	ldr	r2, [pc, #284]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a46      	ldr	r2, [pc, #280]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80022e4:	4b45      	ldr	r3, [pc, #276]	@ (80023fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80022e6:	e000      	b.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80022e8:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80022ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d039      	beq.n	8002368 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80022f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002304:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a3a      	ldr	r2, [pc, #232]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a38      	ldr	r2, [pc, #224]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10e      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800231a:	4836      	ldr	r0, [pc, #216]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800231c:	f7ff ff72 	bl	8002204 <LL_ADC_IsEnabled>
 8002320:	4604      	mov	r4, r0
 8002322:	4835      	ldr	r0, [pc, #212]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002324:	f7ff ff6e 	bl	8002204 <LL_ADC_IsEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	4323      	orrs	r3, r4
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e008      	b.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002338:	4832      	ldr	r0, [pc, #200]	@ (8002404 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800233a:	f7ff ff63 	bl	8002204 <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d047      	beq.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800234e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002354:	4013      	ands	r3, r2
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6811      	ldr	r1, [r2, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	430a      	orrs	r2, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002364:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002366:	e03a      	b.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002372:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d10e      	bne.n	80023a6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002388:	481a      	ldr	r0, [pc, #104]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800238a:	f7ff ff3b 	bl	8002204 <LL_ADC_IsEnabled>
 800238e:	4604      	mov	r4, r0
 8002390:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002392:	f7ff ff37 	bl	8002204 <LL_ADC_IsEnabled>
 8002396:	4603      	mov	r3, r0
 8002398:	4323      	orrs	r3, r4
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e008      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80023a6:	4817      	ldr	r0, [pc, #92]	@ (8002404 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80023a8:	f7ff ff2c 	bl	8002204 <LL_ADC_IsEnabled>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023c6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c8:	e009      	b.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80023dc:	e000      	b.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	377c      	adds	r7, #124	@ 0x7c
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40022100 	.word	0x40022100
 80023fc:	40022300 	.word	0x40022300
 8002400:	58026300 	.word	0x58026300
 8002404:	58026000 	.word	0x58026000
 8002408:	fffff0e0 	.word	0xfffff0e0

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	4313      	orrs	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00
 8002450:	05fa0000 	.word	0x05fa0000

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800247c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002480:	2b00      	cmp	r3, #0
 8002482:	db0a      	blt.n	800249a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	490c      	ldr	r1, [pc, #48]	@ (80024bc <__NVIC_SetPriority+0x4c>)
 800248a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	440b      	add	r3, r1
 8002494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002498:	e00a      	b.n	80024b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4908      	ldr	r1, [pc, #32]	@ (80024c0 <__NVIC_SetPriority+0x50>)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3b04      	subs	r3, #4
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	761a      	strb	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f1c3 0307 	rsb	r3, r3, #7
 80024de:	2b04      	cmp	r3, #4
 80024e0:	bf28      	it	cs
 80024e2:	2304      	movcs	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d902      	bls.n	80024f4 <NVIC_EncodePriority+0x30>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3b03      	subs	r3, #3
 80024f2:	e000      	b.n	80024f6 <NVIC_EncodePriority+0x32>
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800250c:	f04f 31ff 	mov.w	r1, #4294967295
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43d9      	mvns	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	4313      	orrs	r3, r2
         );
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253c:	d301      	bcc.n	8002542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253e:	2301      	movs	r3, #1
 8002540:	e00f      	b.n	8002562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <SysTick_Config+0x40>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254a:	210f      	movs	r1, #15
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f7ff ff8e 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <SysTick_Config+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255a:	4b04      	ldr	r3, [pc, #16]	@ (800256c <SysTick_Config+0x40>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff47 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff5e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff90 	bl	80024c4 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5f 	bl	8002470 <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffb2 	bl	800252c <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025e2:	4b89      	ldr	r3, [pc, #548]	@ (8002808 <HAL_GPIO_Init+0x234>)
 80025e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e6:	e194      	b.n	8002912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8186 	beq.w	800290c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d005      	beq.n	8002618 <HAL_GPIO_Init+0x44>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d130      	bne.n	800267a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800264e:	2201      	movs	r2, #1
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0201 	and.w	r2, r3, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b03      	cmp	r3, #3
 8002684:	d017      	beq.n	80026b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d123      	bne.n	800270a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	69b9      	ldr	r1, [r7, #24]
 8002706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0203 	and.w	r2, r3, #3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80e0 	beq.w	800290c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274c:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <HAL_GPIO_Init+0x238>)
 800274e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002752:	4a2e      	ldr	r2, [pc, #184]	@ (800280c <HAL_GPIO_Init+0x238>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_GPIO_Init+0x238>)
 800275e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_GPIO_Init+0x23c>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <HAL_GPIO_Init+0x240>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d052      	beq.n	800283c <HAL_GPIO_Init+0x268>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_GPIO_Init+0x244>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_GPIO_Init+0x22e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_GPIO_Init+0x248>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <HAL_GPIO_Init+0x22a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_GPIO_Init+0x24c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x226>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <HAL_GPIO_Init+0x250>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x222>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <HAL_GPIO_Init+0x254>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x21e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_GPIO_Init+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_GPIO_Init+0x25c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <HAL_GPIO_Init+0x260>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_GPIO_Init+0x264>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027de:	2309      	movs	r3, #9
 80027e0:	e02d      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027e2:	230a      	movs	r3, #10
 80027e4:	e02b      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e029      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e027      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e025      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e023      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e021      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e01f      	b.n	800283e <HAL_GPIO_Init+0x26a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e01d      	b.n	800283e <HAL_GPIO_Init+0x26a>
 8002802:	2301      	movs	r3, #1
 8002804:	e01b      	b.n	800283e <HAL_GPIO_Init+0x26a>
 8002806:	bf00      	nop
 8002808:	58000080 	.word	0x58000080
 800280c:	58024400 	.word	0x58024400
 8002810:	58000400 	.word	0x58000400
 8002814:	58020000 	.word	0x58020000
 8002818:	58020400 	.word	0x58020400
 800281c:	58020800 	.word	0x58020800
 8002820:	58020c00 	.word	0x58020c00
 8002824:	58021000 	.word	0x58021000
 8002828:	58021400 	.word	0x58021400
 800282c:	58021800 	.word	0x58021800
 8002830:	58021c00 	.word	0x58021c00
 8002834:	58022000 	.word	0x58022000
 8002838:	58022400 	.word	0x58022400
 800283c:	2300      	movs	r3, #0
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f002 0203 	and.w	r2, r2, #3
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4093      	lsls	r3, r2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800284e:	4938      	ldr	r1, [pc, #224]	@ (8002930 <HAL_GPIO_Init+0x35c>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f ae63 	bne.w	80025e8 <HAL_GPIO_Init+0x14>
  }
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	3724      	adds	r7, #36	@ 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	58000400 	.word	0x58000400

08002934 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800293c:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_HSEM_FastTake+0x2c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3320      	adds	r3, #32
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_HSEM_FastTake+0x30>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	58026400 	.word	0x58026400
 8002964:	80000300 	.word	0x80000300

08002968 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002972:	4906      	ldr	r1, [pc, #24]	@ (800298c <HAL_HSEM_Release+0x24>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	58026400 	.word	0x58026400

08002990 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002998:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d00a      	beq.n	80029ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029a4:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e040      	b.n	8002a38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e03e      	b.n	8002a38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029ba:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80029c2:	491f      	ldr	r1, [pc, #124]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029ca:	f7fe f9d5 	bl	8000d78 <HAL_GetTick>
 80029ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029d0:	e009      	b.n	80029e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029d2:	f7fe f9d1 	bl	8000d78 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029e0:	d901      	bls.n	80029e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e028      	b.n	8002a38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029e6:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f2:	d1ee      	bne.n	80029d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b1e      	cmp	r3, #30
 80029f8:	d008      	beq.n	8002a0c <HAL_PWREx_ConfigSupply+0x7c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80029fe:	d005      	beq.n	8002a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b1d      	cmp	r3, #29
 8002a04:	d002      	beq.n	8002a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b2d      	cmp	r3, #45	@ 0x2d
 8002a0a:	d114      	bne.n	8002a36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a0c:	f7fe f9b4 	bl	8000d78 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a12:	e009      	b.n	8002a28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a14:	f7fe f9b0 	bl	8000d78 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a22:	d901      	bls.n	8002a28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a34:	d1ee      	bne.n	8002a14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58024800 	.word	0x58024800

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08c      	sub	sp, #48	@ 0x30
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 bc48 	b.w	80032e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8088 	beq.w	8002b76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	4b99      	ldr	r3, [pc, #612]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a70:	4b96      	ldr	r3, [pc, #600]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d007      	beq.n	8002a8c <HAL_RCC_OscConfig+0x48>
 8002a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7e:	2b18      	cmp	r3, #24
 8002a80:	d111      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62>
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d06d      	beq.n	8002b74 <HAL_RCC_OscConfig+0x130>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d169      	bne.n	8002b74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f000 bc21 	b.w	80032e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x7a>
 8002ab0:	4b86      	ldr	r3, [pc, #536]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a85      	ldr	r2, [pc, #532]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e02e      	b.n	8002b1c <HAL_RCC_OscConfig+0xd8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x9c>
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a80      	ldr	r2, [pc, #512]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xd8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0xc0>
 8002aea:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b75      	ldr	r3, [pc, #468]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a74      	ldr	r2, [pc, #464]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xd8>
 8002b04:	4b71      	ldr	r3, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a70      	ldr	r2, [pc, #448]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b6e      	ldr	r3, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6d      	ldr	r2, [pc, #436]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f928 	bl	8000d78 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe f924 	bl	8000d78 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e3d4      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe8>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe f914 	bl	8000d78 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe f910 	bl	8000d78 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e3c0      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b66:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x110>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ca 	beq.w	8002d18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b84:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_RCC_OscConfig+0x166>
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b18      	cmp	r3, #24
 8002b9e:	d156      	bne.n	8002c4e <HAL_RCC_OscConfig+0x20a>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d151      	bne.n	8002c4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e392      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0219 	bic.w	r2, r3, #25
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	493f      	ldr	r1, [pc, #252]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f8d0 	bl	8000d78 <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f8cc 	bl	8000d78 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e37c      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	f7fe f8ed 	bl	8000dd8 <HAL_GetREVID>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d817      	bhi.n	8002c38 <HAL_RCC_OscConfig+0x1f4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d108      	bne.n	8002c22 <HAL_RCC_OscConfig+0x1de>
 8002c10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c18:	4a2c      	ldr	r2, [pc, #176]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c20:	e07a      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	031b      	lsls	r3, r3, #12
 8002c30:	4926      	ldr	r1, [pc, #152]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c36:	e06f      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	4921      	ldr	r1, [pc, #132]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c4c:	e064      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d047      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0219 	bic.w	r2, r3, #25
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	491a      	ldr	r1, [pc, #104]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f886 	bl	8000d78 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe f882 	bl	8000d78 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e332      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	f7fe f8a3 	bl	8000dd8 <HAL_GetREVID>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d819      	bhi.n	8002cd0 <HAL_RCC_OscConfig+0x28c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b40      	cmp	r3, #64	@ 0x40
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x272>
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb2:	6053      	str	r3, [r2, #4]
 8002cb4:	e030      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	031b      	lsls	r3, r3, #12
 8002cc4:	4901      	ldr	r1, [pc, #4]	@ (8002ccc <HAL_RCC_OscConfig+0x288>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
 8002cca:	e025      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4997      	ldr	r1, [pc, #604]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
 8002ce4:	e018      	b.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b95      	ldr	r3, [pc, #596]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a94      	ldr	r2, [pc, #592]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f841 	bl	8000d78 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe f83d 	bl	8000d78 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e2ed      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d0c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a9 	beq.w	8002e78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d30:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d007      	beq.n	8002d4c <HAL_RCC_OscConfig+0x308>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	d13a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x374>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d135      	bne.n	8002db8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x320>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b80      	cmp	r3, #128	@ 0x80
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e2c1      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d64:	f7fe f838 	bl	8000dd8 <HAL_GetREVID>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d817      	bhi.n	8002da2 <HAL_RCC_OscConfig+0x35e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0x348>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d82:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d8a:	e075      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	069b      	lsls	r3, r3, #26
 8002d9a:	4968      	ldr	r1, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002da0:	e06a      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da2:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	4962      	ldr	r1, [pc, #392]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db6:	e05f      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d042      	beq.n	8002e46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fd ffd4 	bl	8000d78 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dd4:	f7fd ffd0 	bl	8000d78 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e280      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de6:	4b55      	ldr	r3, [pc, #340]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df2:	f7fd fff1 	bl	8000dd8 <HAL_GetREVID>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d817      	bhi.n	8002e30 <HAL_RCC_OscConfig+0x3ec>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d108      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3d6>
 8002e08:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e10:	4a4a      	ldr	r2, [pc, #296]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e16:	6053      	str	r3, [r2, #4]
 8002e18:	e02e      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
 8002e1a:	4b48      	ldr	r3, [pc, #288]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	4944      	ldr	r1, [pc, #272]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
 8002e2e:	e023      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
 8002e30:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	493f      	ldr	r1, [pc, #252]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
 8002e44:	e018      	b.n	8002e78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fd ff91 	bl	8000d78 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e5a:	f7fd ff8d 	bl	8000d78 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e23d      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e6c:	4b33      	ldr	r3, [pc, #204]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d036      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d019      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e90:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fd ff6e 	bl	8000d78 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fd ff6a 	bl	8000d78 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e21a      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x45c>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fd ff54 	bl	8000d78 <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ff50 	bl	8000d78 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e200      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d039      	beq.n	8002f72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f12:	f7fd ff31 	bl	8000d78 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1a:	f7fd ff2d 	bl	8000d78 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1dd      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4d6>
 8002f38:	e01b      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
 8002f3a:	bf00      	nop
 8002f3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f40:	4b9b      	ldr	r3, [pc, #620]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a9a      	ldr	r2, [pc, #616]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd ff14 	bl	8000d78 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f54:	f7fd ff10 	bl	8000d78 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1c0      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f66:	4b92      	ldr	r3, [pc, #584]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8081 	beq.w	8003082 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f80:	4b8c      	ldr	r3, [pc, #560]	@ (80031b4 <HAL_RCC_OscConfig+0x770>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a8b      	ldr	r2, [pc, #556]	@ (80031b4 <HAL_RCC_OscConfig+0x770>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fef4 	bl	8000d78 <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fd fef0 	bl	8000d78 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1a0      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa6:	4b83      	ldr	r3, [pc, #524]	@ (80031b4 <HAL_RCC_OscConfig+0x770>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x584>
 8002fba:	4b7d      	ldr	r3, [pc, #500]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e02d      	b.n	8003024 <HAL_RCC_OscConfig+0x5e0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x5a6>
 8002fd0:	4b77      	ldr	r3, [pc, #476]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	4a76      	ldr	r2, [pc, #472]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fdc:	4b74      	ldr	r3, [pc, #464]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a73      	ldr	r2, [pc, #460]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x5e0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x5c8>
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	4a6b      	ldr	r2, [pc, #428]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	@ 0x70
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x5e0>
 800300c:	4b68      	ldr	r3, [pc, #416]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a67      	ldr	r2, [pc, #412]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
 8003018:	4b65      	ldr	r3, [pc, #404]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	4a64      	ldr	r2, [pc, #400]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fd fea4 	bl	8000d78 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fd fea0 	bl	8000d78 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e14e      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800304a:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ee      	beq.n	8003034 <HAL_RCC_OscConfig+0x5f0>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fd fe8e 	bl	8000d78 <HAL_GetTick>
 800305c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fd fe8a 	bl	8000d78 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e138      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003076:	4b4e      	ldr	r3, [pc, #312]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ee      	bne.n	8003060 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 812d 	beq.w	80032e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800308c:	4b48      	ldr	r3, [pc, #288]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003094:	2b18      	cmp	r3, #24
 8003096:	f000 80bd 	beq.w	8003214 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	2b02      	cmp	r3, #2
 80030a0:	f040 809e 	bne.w	80031e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b42      	ldr	r3, [pc, #264]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a41      	ldr	r2, [pc, #260]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd fe62 	bl	8000d78 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fe5e 	bl	8000d78 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e10e      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ca:	4b39      	ldr	r3, [pc, #228]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030da:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCC_OscConfig+0x774>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	430a      	orrs	r2, r1
 80030ea:	4931      	ldr	r1, [pc, #196]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	3b01      	subs	r3, #1
 80030f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	3b01      	subs	r3, #1
 8003100:	025b      	lsls	r3, r3, #9
 8003102:	b29b      	uxth	r3, r3
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	3b01      	subs	r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	3b01      	subs	r3, #1
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003120:	4923      	ldr	r1, [pc, #140]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003126:	4b22      	ldr	r3, [pc, #136]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	4a21      	ldr	r2, [pc, #132]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003132:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003136:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <HAL_RCC_OscConfig+0x778>)
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800313e:	00d2      	lsls	r2, r2, #3
 8003140:	491b      	ldr	r1, [pc, #108]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003142:	4313      	orrs	r3, r2
 8003144:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	4917      	ldr	r1, [pc, #92]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	f023 0202 	bic.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003164:	4912      	ldr	r1, [pc, #72]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	4a0d      	ldr	r2, [pc, #52]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003182:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800318c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fd fde7 	bl	8000d78 <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ac:	e011      	b.n	80031d2 <HAL_RCC_OscConfig+0x78e>
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58024800 	.word	0x58024800
 80031b8:	fffffc0c 	.word	0xfffffc0c
 80031bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fd fdda 	bl	8000d78 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e08a      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d2:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x77c>
 80031de:	e082      	b.n	80032e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b43      	ldr	r3, [pc, #268]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a42      	ldr	r2, [pc, #264]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd fdc4 	bl	8000d78 <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd fdc0 	bl	8000d78 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e070      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003206:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x7b0>
 8003212:	e068      	b.n	80032e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003214:	4b36      	ldr	r3, [pc, #216]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800321a:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	d031      	beq.n	800328c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d12a      	bne.n	800328c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d122      	bne.n	800328c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0a5b      	lsrs	r3, r3, #9
 800325a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003274:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02b      	b.n	80032e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003290:	4b17      	ldr	r3, [pc, #92]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 8003292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800329a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d01f      	beq.n	80032e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032a6:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	4a11      	ldr	r2, [pc, #68]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032b2:	f7fd fd61 	bl	8000d78 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032b8:	bf00      	nop
 80032ba:	f7fd fd5d 	bl	8000d78 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d0f9      	beq.n	80032ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <HAL_RCC_OscConfig+0x8b0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032d2:	00d2      	lsls	r2, r2, #3
 80032d4:	4906      	ldr	r1, [pc, #24]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032da:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <HAL_RCC_OscConfig+0x8ac>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3730      	adds	r7, #48	@ 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	58024400 	.word	0x58024400
 80032f4:	ffff0007 	.word	0xffff0007

080032f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e19c      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800330c:	4b8a      	ldr	r3, [pc, #552]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d910      	bls.n	800333c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b87      	ldr	r3, [pc, #540]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 020f 	bic.w	r2, r3, #15
 8003322:	4985      	ldr	r1, [pc, #532]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b83      	ldr	r3, [pc, #524]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e184      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003354:	429a      	cmp	r2, r3
 8003356:	d908      	bls.n	800336a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003358:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	4975      	ldr	r1, [pc, #468]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003366:	4313      	orrs	r3, r2
 8003368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	4b70      	ldr	r3, [pc, #448]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003382:	429a      	cmp	r2, r3
 8003384:	d908      	bls.n	8003398 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003386:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	496a      	ldr	r1, [pc, #424]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	4b64      	ldr	r3, [pc, #400]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d908      	bls.n	80033c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033b4:	4b61      	ldr	r3, [pc, #388]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	495e      	ldr	r1, [pc, #376]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033de:	429a      	cmp	r2, r3
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033e2:	4b56      	ldr	r3, [pc, #344]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4953      	ldr	r1, [pc, #332]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	429a      	cmp	r2, r3
 800340e:	d908      	bls.n	8003422 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f023 020f 	bic.w	r2, r3, #15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4947      	ldr	r1, [pc, #284]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800341e:	4313      	orrs	r3, r2
 8003420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d055      	beq.n	80034da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4940      	ldr	r1, [pc, #256]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800343c:	4313      	orrs	r3, r2
 800343e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003448:	4b3c      	ldr	r3, [pc, #240]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d121      	bne.n	8003498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0f6      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d115      	bne.n	8003498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0ea      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003478:	4b30      	ldr	r3, [pc, #192]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0de      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003488:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0d6      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003498:	4b28      	ldr	r3, [pc, #160]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f023 0207 	bic.w	r2, r3, #7
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4925      	ldr	r1, [pc, #148]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034aa:	f7fd fc65 	bl	8000d78 <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b2:	f7fd fc61 	bl	8000d78 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0be      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d1eb      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d208      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f6:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	490e      	ldr	r1, [pc, #56]	@ (800353c <HAL_RCC_ClockConfig+0x244>)
 8003504:	4313      	orrs	r3, r2
 8003506:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d214      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	4906      	ldr	r1, [pc, #24]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e086      	b.n	8003646 <HAL_RCC_ClockConfig+0x34e>
 8003538:	52002000 	.word	0x52002000
 800353c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003558:	429a      	cmp	r2, r3
 800355a:	d208      	bcs.n	800356e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800355c:	4b3c      	ldr	r3, [pc, #240]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	4939      	ldr	r1, [pc, #228]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 800356a:	4313      	orrs	r3, r2
 800356c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003586:	429a      	cmp	r2, r3
 8003588:	d208      	bcs.n	800359c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800358a:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	492e      	ldr	r1, [pc, #184]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 8003598:	4313      	orrs	r3, r2
 800359a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	4b28      	ldr	r3, [pc, #160]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d208      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035b8:	4b25      	ldr	r3, [pc, #148]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4922      	ldr	r1, [pc, #136]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d208      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4917      	ldr	r1, [pc, #92]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f8:	f000 f834 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	4912      	ldr	r1, [pc, #72]	@ (8003654 <HAL_RCC_ClockConfig+0x35c>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_RCC_ClockConfig+0x358>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <HAL_RCC_ClockConfig+0x35c>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <HAL_RCC_ClockConfig+0x360>)
 800362e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003630:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <HAL_RCC_ClockConfig+0x364>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003636:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <HAL_RCC_ClockConfig+0x368>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fb52 	bl	8000ce4 <HAL_InitTick>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	08007584 	.word	0x08007584
 8003658:	24000004 	.word	0x24000004
 800365c:	24000000 	.word	0x24000000
 8003660:	24000008 	.word	0x24000008

08003664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366a:	4bb3      	ldr	r3, [pc, #716]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003672:	2b18      	cmp	r3, #24
 8003674:	f200 8155 	bhi.w	8003922 <HAL_RCC_GetSysClockFreq+0x2be>
 8003678:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <HAL_RCC_GetSysClockFreq+0x1c>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036e5 	.word	0x080036e5
 8003684:	08003923 	.word	0x08003923
 8003688:	08003923 	.word	0x08003923
 800368c:	08003923 	.word	0x08003923
 8003690:	08003923 	.word	0x08003923
 8003694:	08003923 	.word	0x08003923
 8003698:	08003923 	.word	0x08003923
 800369c:	08003923 	.word	0x08003923
 80036a0:	0800370b 	.word	0x0800370b
 80036a4:	08003923 	.word	0x08003923
 80036a8:	08003923 	.word	0x08003923
 80036ac:	08003923 	.word	0x08003923
 80036b0:	08003923 	.word	0x08003923
 80036b4:	08003923 	.word	0x08003923
 80036b8:	08003923 	.word	0x08003923
 80036bc:	08003923 	.word	0x08003923
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003923 	.word	0x08003923
 80036c8:	08003923 	.word	0x08003923
 80036cc:	08003923 	.word	0x08003923
 80036d0:	08003923 	.word	0x08003923
 80036d4:	08003923 	.word	0x08003923
 80036d8:	08003923 	.word	0x08003923
 80036dc:	08003923 	.word	0x08003923
 80036e0:	08003717 	.word	0x08003717
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036e4:	4b94      	ldr	r3, [pc, #592]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036f0:	4b91      	ldr	r3, [pc, #580]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	4a90      	ldr	r2, [pc, #576]	@ (800393c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003702:	e111      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003704:	4b8d      	ldr	r3, [pc, #564]	@ (800393c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003706:	61bb      	str	r3, [r7, #24]
      break;
 8003708:	e10e      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800370a:	4b8d      	ldr	r3, [pc, #564]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800370c:	61bb      	str	r3, [r7, #24]
      break;
 800370e:	e10b      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003710:	4b8c      	ldr	r3, [pc, #560]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003712:	61bb      	str	r3, [r7, #24]
      break;
 8003714:	e108      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003716:	4b88      	ldr	r3, [pc, #544]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003720:	4b85      	ldr	r3, [pc, #532]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800372a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800372c:	4b82      	ldr	r3, [pc, #520]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003736:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80e1 	beq.w	800391c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	f000 8083 	beq.w	8003868 <HAL_RCC_GetSysClockFreq+0x204>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b02      	cmp	r3, #2
 8003766:	f200 80a1 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x248>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x114>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d056      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003776:	e099      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003778:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d02d      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003784:	4b6c      	ldr	r3, [pc, #432]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	4a6b      	ldr	r2, [pc, #428]	@ (800393c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b62      	ldr	r3, [pc, #392]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037de:	e087      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800394c <HAL_RCC_GetSysClockFreq+0x2e8>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003822:	e065      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003950 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b40      	ldr	r3, [pc, #256]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a02 	vldr	s12, [r7, #8]
 800384a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003866:	e043      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b2f      	ldr	r3, [pc, #188]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a02 	vldr	s12, [r7, #8]
 800388e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038aa:	e021      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003950 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80038d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	0a5b      	lsrs	r3, r3, #9
 80038f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fa:	3301      	adds	r3, #1
 80038fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003908:	edd7 6a07 	vldr	s13, [r7, #28]
 800390c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003914:	ee17 3a90 	vmov	r3, s15
 8003918:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
      break;
 8003920:	e002      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003924:	61bb      	str	r3, [r7, #24]
      break;
 8003926:	bf00      	nop
  }

  return sysclockfreq;
 8003928:	69bb      	ldr	r3, [r7, #24]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	@ 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	58024400 	.word	0x58024400
 800393c:	03d09000 	.word	0x03d09000
 8003940:	003d0900 	.word	0x003d0900
 8003944:	017d7840 	.word	0x017d7840
 8003948:	46000000 	.word	0x46000000
 800394c:	4c742400 	.word	0x4c742400
 8003950:	4a742400 	.word	0x4a742400
 8003954:	4bbebc20 	.word	0x4bbebc20

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800395e:	f7ff fe81 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	490f      	ldr	r1, [pc, #60]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	4a09      	ldr	r2, [pc, #36]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003994:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003996:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800399c:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58024400 	.word	0x58024400
 80039ac:	08007584 	.word	0x08007584
 80039b0:	24000004 	.word	0x24000004
 80039b4:	24000000 	.word	0x24000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039bc:	f7ff ffcc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4904      	ldr	r1, [pc, #16]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	58024400 	.word	0x58024400
 80039e0:	08007584 	.word	0x08007584

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e8:	b0ca      	sub	sp, #296	@ 0x128
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a08:	2500      	movs	r5, #0
 8003a0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003a0e:	d049      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a1a:	d02f      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a20:	d828      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a26:	d01a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a2c:	d822      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a36:	d007      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a38:	e01c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3a:	4bb8      	ldr	r3, [pc, #736]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	4ab7      	ldr	r2, [pc, #732]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a46:	e01a      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 fb61 	bl	8006118 <RCCEx_PLL2_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a5c:	e00f      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3328      	adds	r3, #40	@ 0x28
 8003a64:	2102      	movs	r1, #2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 fc08 	bl	800627c <RCCEx_PLL3_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a72:	e004      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a86:	4ba5      	ldr	r3, [pc, #660]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a94:	4aa1      	ldr	r2, [pc, #644]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a9a:	e003      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ab0:	f04f 0900 	mov.w	r9, #0
 8003ab4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ab8:	d047      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d82a      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003ae1 	.word	0x08003ae1
 8003ad0:	08003aef 	.word	0x08003aef
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b23 	.word	0x08003b23
 8003adc:	08003b23 	.word	0x08003b23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4a8d      	ldr	r2, [pc, #564]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aec:	e01a      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	3308      	adds	r3, #8
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 fb0e 	bl	8006118 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b02:	e00f      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	3328      	adds	r3, #40	@ 0x28
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 fbb5 	bl	800627c <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	f023 0107 	bic.w	r1, r3, #7
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	4a78      	ldr	r2, [pc, #480]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b40:	e003      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b56:	f04f 0b00 	mov.w	fp, #0
 8003b5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b5e:	d04c      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6a:	d030      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b70:	d829      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b74:	d02d      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b78:	d825      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b7a:	2b80      	cmp	r3, #128	@ 0x80
 8003b7c:	d018      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d821      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d007      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b8a:	e01c      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4b63      	ldr	r3, [pc, #396]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	4a62      	ldr	r2, [pc, #392]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f002 fab8 	bl	8006118 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	3328      	adds	r3, #40	@ 0x28
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 fb5f 	bl	800627c <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	4a4c      	ldr	r2, [pc, #304]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d053      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c26:	d035      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c2c:	d82e      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c32:	d031      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c38:	d828      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c3e:	d01a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c44:	d822      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c4e:	d007      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c52:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	3308      	adds	r3, #8
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f002 fa55 	bl	8006118 <RCCEx_PLL2_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c74:	e011      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3328      	adds	r3, #40	@ 0x28
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 fafc 	bl	800627c <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003cce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d056      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cee:	d038      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf4:	d831      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cfa:	d034      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003cfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d00:	d82b      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d0c:	d825      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d18:	e01f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4ba2      	ldr	r3, [pc, #648]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	4aa1      	ldr	r2, [pc, #644]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3308      	adds	r3, #8
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 f9ee 	bl	8006118 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3328      	adds	r3, #40	@ 0x28
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f002 fa95 	bl	800627c <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d70:	4b8e      	ldr	r3, [pc, #568]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d80:	4a8a      	ldr	r2, [pc, #552]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003da6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d03a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db6:	2b30      	cmp	r3, #48	@ 0x30
 8003db8:	d01f      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003dba:	2b30      	cmp	r3, #48	@ 0x30
 8003dbc:	d819      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d00c      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d815      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d019      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d111      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dce:	4b77      	ldr	r3, [pc, #476]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	4a76      	ldr	r2, [pc, #472]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dda:	e011      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de0:	3308      	adds	r3, #8
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 f997 	bl	8006118 <RCCEx_PLL2_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e08:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	4a65      	ldr	r2, [pc, #404]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e1c:	e003      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d051      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e50:	d035      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e56:	d82e      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e5c:	d031      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e62:	d828      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e68:	d01a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6e:	d822      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e78:	d007      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e7a:	e01c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	4a4a      	ldr	r2, [pc, #296]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f002 f940 	bl	8006118 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e011      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	3328      	adds	r3, #40	@ 0x28
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 f9e7 	bl	800627c <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f04:	460b      	mov	r3, r1
 8003f06:	4313      	orrs	r3, r2
 8003f08:	d056      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f14:	d033      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f1a:	d82c      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f20:	d02f      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f26:	d826      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f2c:	d02b      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f32:	d820      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f38:	d012      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f3e:	d81a      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d022      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f48:	d115      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	3308      	adds	r3, #8
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f002 f8e0 	bl	8006118 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e015      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 f987 	bl	800627c <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f74:	e00a      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e004      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f82:	bf00      	nop
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa2:	4a02      	ldr	r2, [pc, #8]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003faa:	bf00      	nop
 8003fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	d055      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe4:	d033      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fea:	d82c      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff0:	d02f      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff6:	d826      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ff8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ffc:	d02b      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ffe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004002:	d820      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004008:	d012      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800400a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800400e:	d81a      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d022      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004018:	d115      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	3308      	adds	r3, #8
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f002 f878 	bl	8006118 <RCCEx_PLL2_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800402e:	e015      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	3328      	adds	r3, #40	@ 0x28
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f002 f91f 	bl	800627c <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004044:	e00a      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800404e:	bf00      	nop
 8004050:	e004      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800405a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004064:	4ba3      	ldr	r3, [pc, #652]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004074:	4a9f      	ldr	r2, [pc, #636]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6593      	str	r3, [r2, #88]	@ 0x58
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800409a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d037      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ae:	d00e      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b4:	d816      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040be:	d111      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c0:	4b8c      	ldr	r3, [pc, #560]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	4a8b      	ldr	r2, [pc, #556]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040cc:	e00f      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	3308      	adds	r3, #8
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f002 f81e 	bl	8006118 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040e2:	e004      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80040ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040f6:	4b7f      	ldr	r3, [pc, #508]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	4a7b      	ldr	r2, [pc, #492]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6513      	str	r3, [r2, #80]	@ 0x50
 800410a:	e003      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800412a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d039      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413a:	2b03      	cmp	r3, #3
 800413c:	d81c      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004181 	.word	0x08004181
 8004148:	08004155 	.word	0x08004155
 800414c:	08004163 	.word	0x08004163
 8004150:	08004181 	.word	0x08004181
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004154:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4a66      	ldr	r2, [pc, #408]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3308      	adds	r3, #8
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f001 ffd4 	bl	8006118 <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800418a:	4b5a      	ldr	r3, [pc, #360]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	f023 0103 	bic.w	r1, r3, #3
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419a:	430b      	orrs	r3, r1
 800419c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800419e:	e003      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80041b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f000 809f 	beq.w	8004308 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ca:	4b4b      	ldr	r3, [pc, #300]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4a      	ldr	r2, [pc, #296]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d6:	f7fc fdcf 	bl	8000d78 <HAL_GetTick>
 80041da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041de:	e00b      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fc fdca 	bl	8000d78 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b64      	cmp	r3, #100	@ 0x64
 80041ee:	d903      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f6:	e005      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f8:	4b3f      	ldr	r3, [pc, #252]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ed      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004208:	2b00      	cmp	r3, #0
 800420a:	d179      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800420c:	4b39      	ldr	r3, [pc, #228]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004218:	4053      	eors	r3, r2
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004222:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800422e:	4b31      	ldr	r3, [pc, #196]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	4a30      	ldr	r2, [pc, #192]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004238:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800423a:	4b2e      	ldr	r3, [pc, #184]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004244:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004246:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800424c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425a:	d118      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fc fd8c 	bl	8000d78 <HAL_GetTick>
 8004260:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004264:	e00d      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fc fd87 	bl	8000d78 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004270:	1ad2      	subs	r2, r2, r3
 8004272:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004276:	429a      	cmp	r2, r3
 8004278:	d903      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004280:	e005      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004282:	4b1c      	ldr	r3, [pc, #112]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0eb      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004292:	2b00      	cmp	r3, #0
 8004294:	d129      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a6:	d10e      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80042a8:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042b8:	091a      	lsrs	r2, r3, #4
 80042ba:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042bc:	4013      	ands	r3, r2
 80042be:	4a0d      	ldr	r2, [pc, #52]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6113      	str	r3, [r2, #16]
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042d0:	6113      	str	r3, [r2, #16]
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e2:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e8:	e00e      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80042f2:	e009      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042f4:	58024400 	.word	0x58024400
 80042f8:	58024800 	.word	0x58024800
 80042fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f002 0301 	and.w	r3, r2, #1
 8004314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800431e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	f000 8089 	beq.w	800443c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004330:	2b28      	cmp	r3, #40	@ 0x28
 8004332:	d86b      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004334:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004415 	.word	0x08004415
 8004340:	0800440d 	.word	0x0800440d
 8004344:	0800440d 	.word	0x0800440d
 8004348:	0800440d 	.word	0x0800440d
 800434c:	0800440d 	.word	0x0800440d
 8004350:	0800440d 	.word	0x0800440d
 8004354:	0800440d 	.word	0x0800440d
 8004358:	0800440d 	.word	0x0800440d
 800435c:	080043e1 	.word	0x080043e1
 8004360:	0800440d 	.word	0x0800440d
 8004364:	0800440d 	.word	0x0800440d
 8004368:	0800440d 	.word	0x0800440d
 800436c:	0800440d 	.word	0x0800440d
 8004370:	0800440d 	.word	0x0800440d
 8004374:	0800440d 	.word	0x0800440d
 8004378:	0800440d 	.word	0x0800440d
 800437c:	080043f7 	.word	0x080043f7
 8004380:	0800440d 	.word	0x0800440d
 8004384:	0800440d 	.word	0x0800440d
 8004388:	0800440d 	.word	0x0800440d
 800438c:	0800440d 	.word	0x0800440d
 8004390:	0800440d 	.word	0x0800440d
 8004394:	0800440d 	.word	0x0800440d
 8004398:	0800440d 	.word	0x0800440d
 800439c:	08004415 	.word	0x08004415
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	0800440d 	.word	0x0800440d
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800440d 	.word	0x0800440d
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	08004415 	.word	0x08004415
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	08004415 	.word	0x08004415
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e4:	3308      	adds	r3, #8
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 fe95 	bl	8006118 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043f4:	e00f      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 ff3c 	bl	800627c <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800441e:	4bbf      	ldr	r3, [pc, #764]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442c:	4abb      	ldr	r2, [pc, #748]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6553      	str	r3, [r2, #84]	@ 0x54
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 0302 	and.w	r3, r2, #2
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004452:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d041      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004462:	2b05      	cmp	r3, #5
 8004464:	d824      	bhi.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044b9 	.word	0x080044b9
 8004470:	08004485 	.word	0x08004485
 8004474:	0800449b 	.word	0x0800449b
 8004478:	080044b9 	.word	0x080044b9
 800447c:	080044b9 	.word	0x080044b9
 8004480:	080044b9 	.word	0x080044b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	3308      	adds	r3, #8
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fe43 	bl	8006118 <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004498:	e00f      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	3328      	adds	r3, #40	@ 0x28
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 feea 	bl	800627c <RCCEx_PLL3_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044c2:	4b96      	ldr	r3, [pc, #600]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	f023 0107 	bic.w	r1, r3, #7
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044d0:	4a92      	ldr	r2, [pc, #584]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 0304 	and.w	r3, r2, #4
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d044      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004508:	2b05      	cmp	r3, #5
 800450a:	d825      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004561 	.word	0x08004561
 8004518:	0800452d 	.word	0x0800452d
 800451c:	08004543 	.word	0x08004543
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
 8004528:	08004561 	.word	0x08004561
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	3308      	adds	r3, #8
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f001 fdef 	bl	8006118 <RCCEx_PLL2_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004540:	e00f      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	3328      	adds	r3, #40	@ 0x28
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fe96 	bl	800627c <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004556:	e004      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800455e:	e000      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456a:	4b6c      	ldr	r3, [pc, #432]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f023 0107 	bic.w	r1, r3, #7
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800457a:	4a68      	ldr	r2, [pc, #416]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f002 0320 	and.w	r3, r2, #32
 8004596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800459a:	2300      	movs	r3, #0
 800459c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045a4:	460b      	mov	r3, r1
 80045a6:	4313      	orrs	r3, r2
 80045a8:	d055      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b6:	d033      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045bc:	d82c      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c2:	d02f      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d826      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045ce:	d02b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80045d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045d4:	d820      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045da:	d012      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045e0:	d81a      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d022      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80045e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ea:	d115      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	3308      	adds	r3, #8
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 fd8f 	bl	8006118 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004600:	e015      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	3328      	adds	r3, #40	@ 0x28
 8004608:	2102      	movs	r1, #2
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fe36 	bl	800627c <RCCEx_PLL3_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004616:	e00a      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800461e:	e006      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004620:	bf00      	nop
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800462c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004636:	4b39      	ldr	r3, [pc, #228]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a35      	ldr	r2, [pc, #212]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6553      	str	r3, [r2, #84]	@ 0x54
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800466c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	d058      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004682:	d033      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004684:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004688:	d82c      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004694:	d826      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004696:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800469a:	d02b      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a0:	d820      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a6:	d012      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ac:	d81a      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b6:	d115      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	3308      	adds	r3, #8
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 fd29 	bl	8006118 <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046cc:	e015      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fdd0 	bl	800627c <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046e2:	e00a      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ea:	e006      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046ec:	bf00      	nop
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046f0:	bf00      	nop
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004712:	4a02      	ldr	r2, [pc, #8]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6593      	str	r3, [r2, #88]	@ 0x58
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800473e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	d055      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004750:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004754:	d033      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004756:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800475a:	d82c      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004760:	d02f      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004766:	d826      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004768:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800476c:	d02b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800476e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004772:	d820      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004778:	d012      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800477a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800477e:	d81a      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004788:	d115      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3308      	adds	r3, #8
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f001 fcc0 	bl	8006118 <RCCEx_PLL2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800479e:	e015      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	3328      	adds	r3, #40	@ 0x28
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fd67 	bl	800627c <RCCEx_PLL3_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047be:	bf00      	nop
 80047c0:	e004      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047d4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047e4:	4a9d      	ldr	r2, [pc, #628]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ea:	e003      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f002 0308 	and.w	r3, r2, #8
 8004800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800480a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d01e      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004820:	d10c      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	3328      	adds	r3, #40	@ 0x28
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fd26 	bl	800627c <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800483c:	4b87      	ldr	r3, [pc, #540]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800484c:	4a83      	ldr	r2, [pc, #524]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f002 0310 	and.w	r3, r2, #16
 800485e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004868:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d01e      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800487a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487e:	d10c      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	3328      	adds	r3, #40	@ 0x28
 8004886:	2102      	movs	r1, #2
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fcf7 	bl	800627c <RCCEx_PLL3_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800489a:	4b70      	ldr	r3, [pc, #448]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048aa:	4a6c      	ldr	r2, [pc, #432]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d03e      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048dc:	d022      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80048de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e2:	d81b      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ec:	d00b      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80048ee:	e015      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f4:	3308      	adds	r3, #8
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fc0d 	bl	8006118 <RCCEx_PLL2_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004904:	e00f      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	3328      	adds	r3, #40	@ 0x28
 800490c:	2102      	movs	r1, #2
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fcb4 	bl	800627c <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800492e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800493e:	4a47      	ldr	r2, [pc, #284]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6593      	str	r3, [r2, #88]	@ 0x58
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800495a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800495c:	2300      	movs	r3, #0
 800495e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004960:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d03b      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004976:	d01f      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800497c:	d818      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004988:	d007      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800498a:	e011      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498c:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004998:	e00f      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	3328      	adds	r3, #40	@ 0x28
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 fc6a 	bl	800627c <RCCEx_PLL3_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80049ae:	e004      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c2:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	4a22      	ldr	r2, [pc, #136]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80049d8:	e003      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80049f0:	2300      	movs	r3, #0
 80049f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80049f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d034      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a0e:	e011      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4a11      	ldr	r2, [pc, #68]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	3308      	adds	r3, #8
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fb76 	bl	8006118 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a52:	4a02      	ldr	r2, [pc, #8]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a76:	2300      	movs	r3, #0
 8004a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	d00c      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3328      	adds	r3, #40	@ 0x28
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fbf5 	bl	800627c <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aac:	2300      	movs	r3, #0
 8004aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ab0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	d038      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac6:	d018      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004acc:	d811      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad2:	d014      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad8:	d80b      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d011      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4bc3      	ldr	r3, [pc, #780]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	4ac2      	ldr	r2, [pc, #776]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004af8:	e004      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0c:	4bb9      	ldr	r3, [pc, #740]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1c:	4ab5      	ldr	r2, [pc, #724]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b22:	e003      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b48:	4baa      	ldr	r3, [pc, #680]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	4aa7      	ldr	r2, [pc, #668]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b68:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b78:	4b9e      	ldr	r3, [pc, #632]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b88:	4a9a      	ldr	r2, [pc, #616]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004baa:	4b92      	ldr	r3, [pc, #584]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb8:	4a8e      	ldr	r2, [pc, #568]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bcc:	2300      	movs	r3, #0
 8004bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bda:	4b86      	ldr	r3, [pc, #536]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4a85      	ldr	r2, [pc, #532]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004be4:	6113      	str	r3, [r2, #16]
 8004be6:	4b83      	ldr	r3, [pc, #524]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bf2:	4a80      	ldr	r2, [pc, #512]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c14:	4b77      	ldr	r3, [pc, #476]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	4a74      	ldr	r2, [pc, #464]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c44:	4b6b      	ldr	r3, [pc, #428]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c54:	4a67      	ldr	r2, [pc, #412]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	2100      	movs	r1, #0
 8004c64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d011      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fa4a 	bl	8006118 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6239      	str	r1, [r7, #32]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d011      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	3308      	adds	r3, #8
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fa2a 	bl	8006118 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	61b9      	str	r1, [r7, #24]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d011      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 fa0a 	bl	8006118 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	2100      	movs	r1, #0
 8004d24:	6139      	str	r1, [r7, #16]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d011      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	3328      	adds	r3, #40	@ 0x28
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 fa9c 	bl	800627c <RCCEx_PLL3_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	2100      	movs	r1, #0
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d011      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	3328      	adds	r3, #40	@ 0x28
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 fa7c 	bl	800627c <RCCEx_PLL3_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	2100      	movs	r1, #0
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	3328      	adds	r3, #40	@ 0x28
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fa5c 	bl	800627c <RCCEx_PLL3_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004dda:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df4:	58024400 	.word	0x58024400

08004df8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b090      	sub	sp, #64	@ 0x40
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e06:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	f040 8094 	bne.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004e10:	4b9e      	ldr	r3, [pc, #632]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	f200 8087 	bhi.w	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e3d 	.word	0x08004e3d
 8004e2c:	08004e65 	.word	0x08004e65
 8004e30:	08004e8d 	.word	0x08004e8d
 8004e34:	08004f29 	.word	0x08004f29
 8004e38:	08004eb5 	.word	0x08004eb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e3c:	4b93      	ldr	r3, [pc, #588]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e48:	d108      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f810 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e58:	f000 bd45 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e60:	f000 bd41 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e64:	4b89      	ldr	r3, [pc, #548]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e70:	d108      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e72:	f107 0318 	add.w	r3, r7, #24
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fd54 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e80:	f000 bd31 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e88:	f000 bd2d 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e98:	d108      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fe94 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ea8:	f000 bd1d 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb0:	f000 bd19 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eb4:	4b75      	ldr	r3, [pc, #468]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ebc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ebe:	4b73      	ldr	r3, [pc, #460]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	08db      	lsrs	r3, r3, #3
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	4a6d      	ldr	r2, [pc, #436]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee2:	e01f      	b.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ee4:	4b69      	ldr	r3, [pc, #420]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004efa:	4b66      	ldr	r3, [pc, #408]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f00:	4b62      	ldr	r3, [pc, #392]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f14:	d102      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f16:	4b60      	ldr	r3, [pc, #384]	@ (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f1a:	e003      	b.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f20:	f000 bce1 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f24:	f000 bcdf 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f28:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2c:	f000 bcdb 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f34:	f000 bcd7 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004f40:	430b      	orrs	r3, r1
 8004f42:	f040 80ad 	bne.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004f46:	4b51      	ldr	r3, [pc, #324]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f56:	d056      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f5e:	f200 8090 	bhi.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f66:	f000 8088 	beq.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6e:	f200 8088 	bhi.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	2b80      	cmp	r3, #128	@ 0x80
 8004f76:	d032      	beq.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	2b80      	cmp	r3, #128	@ 0x80
 8004f7c:	f200 8081 	bhi.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	d014      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f8c:	e079      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f9a:	d108      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ff67 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004faa:	f000 bc9c 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb2:	f000 bc98 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc2:	d108      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fc4:	f107 0318 	add.w	r3, r7, #24
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fcab 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fd2:	f000 bc88 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fda:	f000 bc84 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fea:	d108      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fdeb 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ffa:	f000 bc74 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005002:	f000 bc70 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005006:	4b21      	ldr	r3, [pc, #132]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005010:	4b1e      	ldr	r3, [pc, #120]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d10c      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005022:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005034:	e01f      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005036:	4b15      	ldr	r3, [pc, #84]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005042:	d106      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800504a:	d102      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800504c:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800504e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005050:	e011      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005052:	4b0e      	ldr	r3, [pc, #56]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800505e:	d106      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005066:	d102      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005068:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005072:	f000 bc38 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005076:	f000 bc36 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800507a:	4b08      	ldr	r3, [pc, #32]	@ (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507e:	f000 bc32 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005086:	f000 bc2e 	b.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400
 8005090:	03d09000 	.word	0x03d09000
 8005094:	003d0900 	.word	0x003d0900
 8005098:	017d7840 	.word	0x017d7840
 800509c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80050a8:	430b      	orrs	r3, r1
 80050aa:	f040 809c 	bne.w	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80050ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050be:	d054      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050c6:	f200 808b 	bhi.w	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050d0:	f000 8083 	beq.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050da:	f200 8081 	bhi.w	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e4:	d02f      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ec:	d878      	bhi.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050fa:	d012      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80050fc:	e070      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800510c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005110:	4618      	mov	r0, r3
 8005112:	f000 feaf 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800511a:	e3e4      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e3e1      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005122:	4b81      	ldr	r3, [pc, #516]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800512e:	d107      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fbf5 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800513e:	e3d2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005144:	e3cf      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005146:	4b78      	ldr	r3, [pc, #480]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005152:	d107      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd37 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005162:	e3c0      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005168:	e3bd      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800516a:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800516c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005174:	4b6c      	ldr	r3, [pc, #432]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005186:	4b68      	ldr	r3, [pc, #416]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	4a66      	ldr	r2, [pc, #408]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005198:	e01e      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800519a:	4b63      	ldr	r3, [pc, #396]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a6:	d106      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80051a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ae:	d102      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051b0:	4b5f      	ldr	r3, [pc, #380]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b4:	e010      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c2:	d106      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ca:	d102      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051cc:	4b59      	ldr	r3, [pc, #356]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051d6:	e386      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051d8:	e385      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051da:	4b57      	ldr	r3, [pc, #348]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051de:	e382      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e4:	e37f      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f040 80a7 	bne.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80051f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80051fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005204:	d055      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800520c:	f200 8096 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005216:	f000 8084 	beq.w	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005220:	f200 808c 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800522a:	d030      	beq.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005232:	f200 8083 	bhi.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005242:	d012      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005244:	e07a      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005246:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005252:	d107      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fe0b 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005262:	e340      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005268:	e33d      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800526a:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005276:	d107      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fb51 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005286:	e32e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800528c:	e32b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800528e:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fc93 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052aa:	e31c      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b0:	e319      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ce:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e0:	e01e      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e2:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ee:	d106      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80052f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052f6:	d102      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fc:	e010      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800530c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005312:	d102      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800531e:	e2e2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005320:	e2e1      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005322:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005326:	e2de      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	003d0900 	.word	0x003d0900
 8005334:	017d7840 	.word	0x017d7840
 8005338:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005340:	e2d1      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800534a:	430b      	orrs	r3, r1
 800534c:	f040 809c 	bne.w	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005350:	4b93      	ldr	r3, [pc, #588]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005354:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005360:	d054      	beq.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005368:	f200 808b 	bhi.w	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005372:	f000 8083 	beq.w	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800537c:	f200 8081 	bhi.w	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005386:	d02f      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	d878      	bhi.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539c:	d012      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800539e:	e070      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053a0:	4b7f      	ldr	r3, [pc, #508]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ac:	d107      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fd5e 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053bc:	e293      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053c2:	e290      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053c4:	4b76      	ldr	r3, [pc, #472]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053d0:	d107      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053d2:	f107 0318 	add.w	r3, r7, #24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 faa4 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053e0:	e281      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e6:	e27e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053e8:	4b6d      	ldr	r3, [pc, #436]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053f4:	d107      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053f6:	f107 030c 	add.w	r3, r7, #12
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fbe6 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005404:	e26f      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540a:	e26c      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800540c:	4b64      	ldr	r3, [pc, #400]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800540e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005416:	4b62      	ldr	r3, [pc, #392]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d10c      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005428:	4b5d      	ldr	r3, [pc, #372]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	4a5c      	ldr	r2, [pc, #368]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800543a:	e01e      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800543c:	4b58      	ldr	r3, [pc, #352]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005448:	d106      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005450:	d102      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005452:	4b55      	ldr	r3, [pc, #340]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005456:	e010      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005458:	4b51      	ldr	r3, [pc, #324]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005464:	d106      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546c:	d102      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800546e:	4b4f      	ldr	r3, [pc, #316]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005472:	e002      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005478:	e235      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800547a:	e234      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800547c:	4b4c      	ldr	r3, [pc, #304]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005480:	e231      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005486:	e22e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005490:	430b      	orrs	r3, r1
 8005492:	f040 808f 	bne.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005496:	4b42      	ldr	r3, [pc, #264]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800549e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054a6:	d06b      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054ae:	d874      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054b6:	d056      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054be:	d86c      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054c6:	d03b      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054ce:	d864      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054d6:	d021      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054de:	d85c      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ec:	d004      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80054ee:	e054      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fe fa62 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80054f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054f6:	e1f6      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f8:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005504:	d107      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005506:	f107 0318 	add.w	r3, r7, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa0a 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005514:	e1e7      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800551a:	e1e4      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800551c:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d107      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fb4c 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005538:	e1d5      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553e:	e1d2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005540:	4b17      	ldr	r3, [pc, #92]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d109      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800554c:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	4a13      	ldr	r2, [pc, #76]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800555e:	e1c2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005564:	e1bf      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005566:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005572:	d102      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005578:	e1b5      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800557e:	e1b2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800558c:	d102      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005592:	e1a8      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005598:	e1a5      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800559e:	e1a2      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055a0:	58024400 	.word	0x58024400
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	003d0900 	.word	0x003d0900
 80055ac:	017d7840 	.word	0x017d7840
 80055b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80055b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80055bc:	430b      	orrs	r3, r1
 80055be:	d173      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80055c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d02f      	beq.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d8:	d863      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e6:	d012      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80055e8:	e05b      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ea:	4b92      	ldr	r3, [pc, #584]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055f6:	d107      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f8:	f107 0318 	add.w	r3, r7, #24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f991 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005606:	e16e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800560c:	e16b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800560e:	4b89      	ldr	r3, [pc, #548]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800561a:	d107      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fad3 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800562a:	e15c      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005630:	e159      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005632:	4b80      	ldr	r3, [pc, #512]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800563c:	4b7d      	ldr	r3, [pc, #500]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800564e:	4b79      	ldr	r3, [pc, #484]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a77      	ldr	r2, [pc, #476]	@ (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005660:	e01e      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005662:	4b74      	ldr	r3, [pc, #464]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566e:	d106      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005678:	4b70      	ldr	r3, [pc, #448]	@ (800583c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800567c:	e010      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800567e:	4b6d      	ldr	r3, [pc, #436]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005692:	d102      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005694:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800569e:	e122      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056a0:	e121      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a6:	e11e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80056b0:	430b      	orrs	r3, r1
 80056b2:	d133      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80056b4:	4b5f      	ldr	r3, [pc, #380]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ca:	d012      	beq.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80056cc:	e023      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056ce:	4b59      	ldr	r3, [pc, #356]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056da:	d107      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fbc7 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ea:	e0fc      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056f0:	e0f9      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056f2:	4b50      	ldr	r3, [pc, #320]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056fe:	d107      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005700:	f107 0318 	add.w	r3, r7, #24
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f90d 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800570e:	e0ea      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005714:	e0e7      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800571a:	e0e4      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800571c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005720:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005724:	430b      	orrs	r3, r1
 8005726:	f040 808d 	bne.w	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800572a:	4b42      	ldr	r3, [pc, #264]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800573a:	d06b      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005742:	d874      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574a:	d056      	beq.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005752:	d86c      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800575a:	d03b      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005762:	d864      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800576a:	d021      	beq.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005772:	d85c      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005780:	d004      	beq.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005782:	e054      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005784:	f000 f8b8 	bl	80058f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005788:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800578a:	e0ac      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800578c:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005798:	d107      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f8c0 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a8:	e09d      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ae:	e09a      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057b0:	4b20      	ldr	r3, [pc, #128]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa02 	bl	8005bcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057cc:	e08b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057d2:	e088      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d109      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e0:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	4a13      	ldr	r2, [pc, #76]	@ (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
 80057f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f2:	e078      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f8:	e075      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800580c:	e06b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005812:	e068      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005814:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005820:	d102      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e05e      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e05b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005832:	e058      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005834:	58024400 	.word	0x58024400
 8005838:	03d09000 	.word	0x03d09000
 800583c:	003d0900 	.word	0x003d0900
 8005840:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005848:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800584c:	430b      	orrs	r3, r1
 800584e:	d148      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005850:	4b27      	ldr	r3, [pc, #156]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005858:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005860:	d02a      	beq.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005868:	d838      	bhi.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005876:	d00d      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005878:	e030      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800587a:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005886:	d102      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005888:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800588c:	e02b      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005892:	e028      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005894:	4b16      	ldr	r3, [pc, #88]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058a0:	d107      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fae4 	bl	8005e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058b0:	e019      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b6:	e016      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058b8:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c4:	d107      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c6:	f107 0318 	add.w	r3, r7, #24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f82a 	bl	8005924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058d4:	e007      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058da:	e004      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e0:	e001      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80058e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3740      	adds	r7, #64	@ 0x40
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	58024400 	.word	0x58024400
 80058f4:	017d7840 	.word	0x017d7840

080058f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058fc:	f7fe f82c 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b06      	ldr	r3, [pc, #24]	@ (800591c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4904      	ldr	r1, [pc, #16]	@ (8005920 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	58024400 	.word	0x58024400
 8005920:	08007584 	.word	0x08007584

08005924 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	@ 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800592c:	4ba1      	ldr	r3, [pc, #644]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005936:	4b9f      	ldr	r3, [pc, #636]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	0b1b      	lsrs	r3, r3, #12
 800593c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005940:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005942:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800594e:	4b99      	ldr	r3, [pc, #612]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8111 	beq.w	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f000 8083 	beq.w	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b02      	cmp	r3, #2
 800597e:	f200 80a1 	bhi.w	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d056      	beq.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800598e:	e099      	b.n	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005990:	4b88      	ldr	r3, [pc, #544]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02d      	beq.n	80059f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800599c:	4b85      	ldr	r3, [pc, #532]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	08db      	lsrs	r3, r3, #3
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	4a84      	ldr	r2, [pc, #528]	@ (8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059f6:	e087      	b.n	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a3a:	e065      	b.n	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b59      	ldr	r3, [pc, #356]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a7e:	e043      	b.n	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b48      	ldr	r3, [pc, #288]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac2:	e021      	b.n	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b37      	ldr	r3, [pc, #220]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b08:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	0a5b      	lsrs	r3, r3, #9
 8005b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2e:	ee17 2a90 	vmov	r2, s15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b36:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b40:	ee07 3a90 	vmov	s15, r3
 8005b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5c:	ee17 2a90 	vmov	r2, s15
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b64:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	0e1b      	lsrs	r3, r3, #24
 8005b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8a:	ee17 2a90 	vmov	r2, s15
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b92:	e008      	b.n	8005ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
}
 8005ba6:	bf00      	nop
 8005ba8:	3724      	adds	r7, #36	@ 0x24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	03d09000 	.word	0x03d09000
 8005bbc:	46000000 	.word	0x46000000
 8005bc0:	4c742400 	.word	0x4c742400
 8005bc4:	4a742400 	.word	0x4a742400
 8005bc8:	4bbebc20 	.word	0x4bbebc20

08005bcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	@ 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bd4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bde:	4b9f      	ldr	r3, [pc, #636]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	0d1b      	lsrs	r3, r3, #20
 8005be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bea:	4b9c      	ldr	r3, [pc, #624]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bf6:	4b99      	ldr	r3, [pc, #612]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	08db      	lsrs	r3, r3, #3
 8005bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8111 	beq.w	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	f000 8083 	beq.w	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	f200 80a1 	bhi.w	8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d056      	beq.n	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c36:	e099      	b.n	8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c38:	4b88      	ldr	r3, [pc, #544]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d02d      	beq.n	8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c44:	4b85      	ldr	r3, [pc, #532]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	4a84      	ldr	r2, [pc, #528]	@ (8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	ee07 3a90 	vmov	s15, r3
 8005c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c9e:	e087      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ce2:	e065      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b59      	ldr	r3, [pc, #356]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d26:	e043      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b48      	ldr	r3, [pc, #288]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6a:	e021      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005db0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dde:	4b1f      	ldr	r3, [pc, #124]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	0c1b      	lsrs	r3, r3, #16
 8005de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e04:	ee17 2a90 	vmov	r2, s15
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e0c:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e32:	ee17 2a90 	vmov	r2, s15
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e3a:	e008      	b.n	8005e4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	3724      	adds	r7, #36	@ 0x24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	03d09000 	.word	0x03d09000
 8005e64:	46000000 	.word	0x46000000
 8005e68:	4c742400 	.word	0x4c742400
 8005e6c:	4a742400 	.word	0x4a742400
 8005e70:	4bbebc20 	.word	0x4bbebc20

08005e74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	@ 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e7c:	4ba0      	ldr	r3, [pc, #640]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e86:	4b9e      	ldr	r3, [pc, #632]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e92:	4b9b      	ldr	r3, [pc, #620]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e9c:	4b98      	ldr	r3, [pc, #608]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea0:	08db      	lsrs	r3, r3, #3
 8005ea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8111 	beq.w	80060e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	f000 8083 	beq.w	8005fce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	f200 80a1 	bhi.w	8006012 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d056      	beq.n	8005f8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005edc:	e099      	b.n	8006012 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ede:	4b88      	ldr	r3, [pc, #544]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02d      	beq.n	8005f46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eea:	4b85      	ldr	r3, [pc, #532]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	08db      	lsrs	r3, r3, #3
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	4a83      	ldr	r2, [pc, #524]	@ (8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f14:	4b7a      	ldr	r3, [pc, #488]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f28:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f44:	e087      	b.n	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f50:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800610c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f58:	4b69      	ldr	r3, [pc, #420]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f88:	e065      	b.n	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006110 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9c:	4b58      	ldr	r3, [pc, #352]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fac:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fcc:	e043      	b.n	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe0:	4b47      	ldr	r3, [pc, #284]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006010:	e021      	b.n	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800610c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006024:	4b36      	ldr	r3, [pc, #216]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006034:	ed97 6a03 	vldr	s12, [r7, #12]
 8006038:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800603c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006054:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006056:	4b2a      	ldr	r3, [pc, #168]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	0a5b      	lsrs	r3, r3, #9
 800605c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006070:	edd7 6a07 	vldr	s13, [r7, #28]
 8006074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607c:	ee17 2a90 	vmov	r2, s15
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006084:	4b1e      	ldr	r3, [pc, #120]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80060b2:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b6:	0e1b      	lsrs	r3, r3, #24
 80060b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d8:	ee17 2a90 	vmov	r2, s15
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060e0:	e008      	b.n	80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	3724      	adds	r7, #36	@ 0x24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	58024400 	.word	0x58024400
 8006104:	03d09000 	.word	0x03d09000
 8006108:	46000000 	.word	0x46000000
 800610c:	4c742400 	.word	0x4c742400
 8006110:	4a742400 	.word	0x4a742400
 8006114:	4bbebc20 	.word	0x4bbebc20

08006118 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006126:	4b53      	ldr	r3, [pc, #332]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	2b03      	cmp	r3, #3
 8006130:	d101      	bne.n	8006136 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e099      	b.n	800626a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006136:	4b4f      	ldr	r3, [pc, #316]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a4e      	ldr	r2, [pc, #312]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800613c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006142:	f7fa fe19 	bl	8000d78 <HAL_GetTick>
 8006146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006148:	e008      	b.n	800615c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800614a:	f7fa fe15 	bl	8000d78 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e086      	b.n	800626a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800615c:	4b45      	ldr	r3, [pc, #276]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f0      	bne.n	800614a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006168:	4b42      	ldr	r3, [pc, #264]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	493f      	ldr	r1, [pc, #252]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	628b      	str	r3, [r1, #40]	@ 0x28
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	3b01      	subs	r3, #1
 8006182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	3b01      	subs	r3, #1
 800618c:	025b      	lsls	r3, r3, #9
 800618e:	b29b      	uxth	r3, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	3b01      	subs	r3, #1
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	061b      	lsls	r3, r3, #24
 80061a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061ac:	4931      	ldr	r1, [pc, #196]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061b2:	4b30      	ldr	r3, [pc, #192]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	492d      	ldr	r1, [pc, #180]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	f023 0220 	bic.w	r2, r3, #32
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	4928      	ldr	r1, [pc, #160]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	f023 0310 	bic.w	r3, r3, #16
 80061e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061e2:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e6:	4b24      	ldr	r3, [pc, #144]	@ (8006278 <RCCEx_PLL2_Config+0x160>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	69d2      	ldr	r2, [r2, #28]
 80061ee:	00d2      	lsls	r2, r2, #3
 80061f0:	4920      	ldr	r1, [pc, #128]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	f043 0310 	orr.w	r3, r3, #16
 8006200:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006208:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	4a19      	ldr	r2, [pc, #100]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800620e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006214:	e00f      	b.n	8006236 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d106      	bne.n	800622a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800621c:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	4a14      	ldr	r2, [pc, #80]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006228:	e005      	b.n	8006236 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	4a11      	ldr	r2, [pc, #68]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006234:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006236:	4b0f      	ldr	r3, [pc, #60]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a0e      	ldr	r2, [pc, #56]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800623c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006242:	f7fa fd99 	bl	8000d78 <HAL_GetTick>
 8006246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006248:	e008      	b.n	800625c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800624a:	f7fa fd95 	bl	8000d78 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e006      	b.n	800626a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <RCCEx_PLL2_Config+0x15c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	58024400 	.word	0x58024400
 8006278:	ffff0007 	.word	0xffff0007

0800627c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800628a:	4b53      	ldr	r3, [pc, #332]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b03      	cmp	r3, #3
 8006294:	d101      	bne.n	800629a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e099      	b.n	80063ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800629a:	4b4f      	ldr	r3, [pc, #316]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a4e      	ldr	r2, [pc, #312]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80062a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a6:	f7fa fd67 	bl	8000d78 <HAL_GetTick>
 80062aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062ac:	e008      	b.n	80062c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062ae:	f7fa fd63 	bl	8000d78 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e086      	b.n	80063ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062c0:	4b45      	ldr	r3, [pc, #276]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062cc:	4b42      	ldr	r3, [pc, #264]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	493f      	ldr	r1, [pc, #252]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	628b      	str	r3, [r1, #40]	@ 0x28
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	025b      	lsls	r3, r3, #9
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	3b01      	subs	r3, #1
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006310:	4931      	ldr	r1, [pc, #196]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006316:	4b30      	ldr	r3, [pc, #192]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	492d      	ldr	r1, [pc, #180]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006324:	4313      	orrs	r3, r2
 8006326:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006328:	4b2b      	ldr	r3, [pc, #172]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	4928      	ldr	r1, [pc, #160]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006346:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800634a:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <RCCEx_PLL3_Config+0x160>)
 800634c:	4013      	ands	r3, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	69d2      	ldr	r2, [r2, #28]
 8006352:	00d2      	lsls	r2, r2, #3
 8006354:	4920      	ldr	r1, [pc, #128]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800635a:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800635c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635e:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800636c:	4b1a      	ldr	r3, [pc, #104]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	4a19      	ldr	r2, [pc, #100]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006378:	e00f      	b.n	800639a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d106      	bne.n	800638e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006380:	4b15      	ldr	r3, [pc, #84]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	4a14      	ldr	r2, [pc, #80]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800638a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800638c:	e005      	b.n	800639a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800638e:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	4a11      	ldr	r2, [pc, #68]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 8006394:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800639a:	4b0f      	ldr	r3, [pc, #60]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a0e      	ldr	r2, [pc, #56]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a6:	f7fa fce7 	bl	8000d78 <HAL_GetTick>
 80063aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063ac:	e008      	b.n	80063c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063ae:	f7fa fce3 	bl	8000d78 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e006      	b.n	80063ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063c0:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <RCCEx_PLL3_Config+0x15c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	ffff0007 	.word	0xffff0007

080063e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e049      	b.n	8006486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fa fb7c 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f000 fbb0 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e049      	b.n	8006534 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f841 	bl	800653c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f000 fb59 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <HAL_TIM_PWM_Start+0x24>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e03c      	b.n	80065ee <HAL_TIM_PWM_Start+0x9e>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b04      	cmp	r3, #4
 8006578:	d109      	bne.n	800658e <HAL_TIM_PWM_Start+0x3e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e02f      	b.n	80065ee <HAL_TIM_PWM_Start+0x9e>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d109      	bne.n	80065a8 <HAL_TIM_PWM_Start+0x58>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e022      	b.n	80065ee <HAL_TIM_PWM_Start+0x9e>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d109      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x72>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e015      	b.n	80065ee <HAL_TIM_PWM_Start+0x9e>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start+0x8c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e008      	b.n	80065ee <HAL_TIM_PWM_Start+0x9e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0a1      	b.n	800673a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_PWM_Start+0xb6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006604:	e023      	b.n	800664e <HAL_TIM_PWM_Start+0xfe>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d104      	bne.n	8006616 <HAL_TIM_PWM_Start+0xc6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006614:	e01b      	b.n	800664e <HAL_TIM_PWM_Start+0xfe>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d104      	bne.n	8006626 <HAL_TIM_PWM_Start+0xd6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006624:	e013      	b.n	800664e <HAL_TIM_PWM_Start+0xfe>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b0c      	cmp	r3, #12
 800662a:	d104      	bne.n	8006636 <HAL_TIM_PWM_Start+0xe6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006634:	e00b      	b.n	800664e <HAL_TIM_PWM_Start+0xfe>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b10      	cmp	r3, #16
 800663a:	d104      	bne.n	8006646 <HAL_TIM_PWM_Start+0xf6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006644:	e003      	b.n	800664e <HAL_TIM_PWM_Start+0xfe>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2201      	movs	r2, #1
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fea8 	bl	80073ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a38      	ldr	r2, [pc, #224]	@ (8006744 <HAL_TIM_PWM_Start+0x1f4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_TIM_PWM_Start+0x13e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a37      	ldr	r2, [pc, #220]	@ (8006748 <HAL_TIM_PWM_Start+0x1f8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_TIM_PWM_Start+0x13e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a35      	ldr	r2, [pc, #212]	@ (800674c <HAL_TIM_PWM_Start+0x1fc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_TIM_PWM_Start+0x13e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a34      	ldr	r2, [pc, #208]	@ (8006750 <HAL_TIM_PWM_Start+0x200>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_TIM_PWM_Start+0x13e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a32      	ldr	r2, [pc, #200]	@ (8006754 <HAL_TIM_PWM_Start+0x204>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_TIM_PWM_Start+0x142>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_TIM_PWM_Start+0x144>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a25      	ldr	r2, [pc, #148]	@ (8006744 <HAL_TIM_PWM_Start+0x1f4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ba:	d01d      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a25      	ldr	r2, [pc, #148]	@ (8006758 <HAL_TIM_PWM_Start+0x208>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a24      	ldr	r2, [pc, #144]	@ (800675c <HAL_TIM_PWM_Start+0x20c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a22      	ldr	r2, [pc, #136]	@ (8006760 <HAL_TIM_PWM_Start+0x210>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	@ (8006748 <HAL_TIM_PWM_Start+0x1f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006764 <HAL_TIM_PWM_Start+0x214>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x1a8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a16      	ldr	r2, [pc, #88]	@ (800674c <HAL_TIM_PWM_Start+0x1fc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d115      	bne.n	8006724 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006768 <HAL_TIM_PWM_Start+0x218>)
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b06      	cmp	r3, #6
 8006708:	d015      	beq.n	8006736 <HAL_TIM_PWM_Start+0x1e6>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d011      	beq.n	8006736 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	e008      	b.n	8006736 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e000      	b.n	8006738 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000
 8006748:	40010400 	.word	0x40010400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40001800 	.word	0x40001800
 8006768:	00010007 	.word	0x00010007

0800676c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006786:	2302      	movs	r3, #2
 8006788:	e0ff      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b14      	cmp	r3, #20
 8006796:	f200 80f0 	bhi.w	800697a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	0800697b 	.word	0x0800697b
 80067a8:	0800697b 	.word	0x0800697b
 80067ac:	0800697b 	.word	0x0800697b
 80067b0:	08006835 	.word	0x08006835
 80067b4:	0800697b 	.word	0x0800697b
 80067b8:	0800697b 	.word	0x0800697b
 80067bc:	0800697b 	.word	0x0800697b
 80067c0:	08006877 	.word	0x08006877
 80067c4:	0800697b 	.word	0x0800697b
 80067c8:	0800697b 	.word	0x0800697b
 80067cc:	0800697b 	.word	0x0800697b
 80067d0:	080068b7 	.word	0x080068b7
 80067d4:	0800697b 	.word	0x0800697b
 80067d8:	0800697b 	.word	0x0800697b
 80067dc:	0800697b 	.word	0x0800697b
 80067e0:	080068f9 	.word	0x080068f9
 80067e4:	0800697b 	.word	0x0800697b
 80067e8:	0800697b 	.word	0x0800697b
 80067ec:	0800697b 	.word	0x0800697b
 80067f0:	08006939 	.word	0x08006939
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fa62 	bl	8006cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0208 	orr.w	r2, r2, #8
 800680e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0204 	bic.w	r2, r2, #4
 800681e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6999      	ldr	r1, [r3, #24]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	619a      	str	r2, [r3, #24]
      break;
 8006832:	e0a5      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fad2 	bl	8006de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800684e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	021a      	lsls	r2, r3, #8
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]
      break;
 8006874:	e084      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fb3b 	bl	8006ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0204 	bic.w	r2, r2, #4
 80068a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	61da      	str	r2, [r3, #28]
      break;
 80068b4:	e064      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fba3 	bl	8007008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69d9      	ldr	r1, [r3, #28]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	021a      	lsls	r2, r3, #8
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	61da      	str	r2, [r3, #28]
      break;
 80068f6:	e043      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fbec 	bl	80070dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0208 	orr.w	r2, r2, #8
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006936:	e023      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fc30 	bl	80071a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	021a      	lsls	r2, r3, #8
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006978:	e002      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
      break;
 800697e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop

08006994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIM_ConfigClockSource+0x1c>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e0dc      	b.n	8006b6a <HAL_TIM_ConfigClockSource+0x1d6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006b74 <HAL_TIM_ConfigClockSource+0x1e0>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a64      	ldr	r2, [pc, #400]	@ (8006b78 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f000 80a9 	beq.w	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 80069ec:	4a62      	ldr	r2, [pc, #392]	@ (8006b78 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	f200 80ae 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 80069f4:	4a61      	ldr	r2, [pc, #388]	@ (8006b7c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	f000 80a1 	beq.w	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 80069fc:	4a5f      	ldr	r2, [pc, #380]	@ (8006b7c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f200 80a6 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a04:	4a5e      	ldr	r2, [pc, #376]	@ (8006b80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	f000 8099 	beq.w	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8006b80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	f200 809e 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a18:	f000 8091 	beq.w	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a20:	f200 8096 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a28:	f000 8089 	beq.w	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a30:	f200 808e 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a38:	d03e      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0x124>
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3e:	f200 8087 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a46:	f000 8086 	beq.w	8006b56 <HAL_TIM_ConfigClockSource+0x1c2>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4e:	d87f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a50:	2b70      	cmp	r3, #112	@ 0x70
 8006a52:	d01a      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xf6>
 8006a54:	2b70      	cmp	r3, #112	@ 0x70
 8006a56:	d87b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a58:	2b60      	cmp	r3, #96	@ 0x60
 8006a5a:	d050      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x16a>
 8006a5c:	2b60      	cmp	r3, #96	@ 0x60
 8006a5e:	d877      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a60:	2b50      	cmp	r3, #80	@ 0x50
 8006a62:	d03c      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x14a>
 8006a64:	2b50      	cmp	r3, #80	@ 0x50
 8006a66:	d873      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a68:	2b40      	cmp	r3, #64	@ 0x40
 8006a6a:	d058      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x18a>
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d86f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a70:	2b30      	cmp	r3, #48	@ 0x30
 8006a72:	d064      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a74:	2b30      	cmp	r3, #48	@ 0x30
 8006a76:	d86b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d060      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d867      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d05c      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d05a      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a88:	e062      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a9a:	f000 fc67 	bl	800736c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	609a      	str	r2, [r3, #8]
      break;
 8006ab6:	e04f      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ac8:	f000 fc50 	bl	800736c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ada:	609a      	str	r2, [r3, #8]
      break;
 8006adc:	e03c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aea:	461a      	mov	r2, r3
 8006aec:	f000 fbc0 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2150      	movs	r1, #80	@ 0x50
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fc1a 	bl	8007330 <TIM_ITRx_SetConfig>
      break;
 8006afc:	e02c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f000 fbdf 	bl	80072ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2160      	movs	r1, #96	@ 0x60
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fc0a 	bl	8007330 <TIM_ITRx_SetConfig>
      break;
 8006b1c:	e01c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 fba0 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2140      	movs	r1, #64	@ 0x40
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fbfa 	bl	8007330 <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e00c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 fbf1 	bl	8007330 <TIM_ITRx_SetConfig>
      break;
 8006b4e:	e003      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      break;
 8006b54:	e000      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	ffceff88 	.word	0xffceff88
 8006b78:	00100040 	.word	0x00100040
 8006b7c:	00100030 	.word	0x00100030
 8006b80:	00100020 	.word	0x00100020

08006b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a43      	ldr	r2, [pc, #268]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a40      	ldr	r2, [pc, #256]	@ (8006ca8 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3f      	ldr	r2, [pc, #252]	@ (8006cac <TIM_Base_SetConfig+0x128>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <TIM_Base_SetConfig+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d108      	bne.n	8006bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01f      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be4:	d01b      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ca8 <TIM_Base_SetConfig+0x124>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d017      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006cac <TIM_Base_SetConfig+0x128>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb0 <TIM_Base_SetConfig+0x12c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00f      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00b      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb8 <TIM_Base_SetConfig+0x134>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d007      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2a      	ldr	r2, [pc, #168]	@ (8006cbc <TIM_Base_SetConfig+0x138>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_Base_SetConfig+0x9a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a29      	ldr	r2, [pc, #164]	@ (8006cc0 <TIM_Base_SetConfig+0x13c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a14      	ldr	r2, [pc, #80]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_Base_SetConfig+0xf2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_Base_SetConfig+0xf2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <TIM_Base_SetConfig+0x134>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_Base_SetConfig+0xf2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a14      	ldr	r2, [pc, #80]	@ (8006cbc <TIM_Base_SetConfig+0x138>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0xf2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <TIM_Base_SetConfig+0x13c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d103      	bne.n	8006c7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800

08006cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f023 0201 	bic.w	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4b37      	ldr	r3, [pc, #220]	@ (8006dcc <TIM_OC1_SetConfig+0x108>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f023 0302 	bic.w	r3, r3, #2
 8006d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00f      	beq.n	8006d40 <TIM_OC1_SetConfig+0x7c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_OC1_SetConfig+0x7c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_OC1_SetConfig+0x7c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC1_SetConfig+0x7c>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a29      	ldr	r2, [pc, #164]	@ (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10c      	bne.n	8006d5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0308 	bic.w	r3, r3, #8
 8006d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 0304 	bic.w	r3, r3, #4
 8006d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00f      	beq.n	8006d82 <TIM_OC1_SetConfig+0xbe>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <TIM_OC1_SetConfig+0xbe>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC1_SetConfig+0xbe>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a19      	ldr	r2, [pc, #100]	@ (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC1_SetConfig+0xbe>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a18      	ldr	r2, [pc, #96]	@ (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d111      	bne.n	8006da6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	fffeff8f 	.word	0xfffeff8f
 8006dd0:	40010000 	.word	0x40010000
 8006dd4:	40010400 	.word	0x40010400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f023 0210 	bic.w	r2, r3, #16
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4b34      	ldr	r3, [pc, #208]	@ (8006ee0 <TIM_OC2_SetConfig+0xfc>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0320 	bic.w	r3, r3, #32
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a29      	ldr	r2, [pc, #164]	@ (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC2_SetConfig+0x68>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a28      	ldr	r2, [pc, #160]	@ (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d10d      	bne.n	8006e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00f      	beq.n	8006e90 <TIM_OC2_SetConfig+0xac>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <TIM_OC2_SetConfig+0xac>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <TIM_OC2_SetConfig+0x108>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d007      	beq.n	8006e90 <TIM_OC2_SetConfig+0xac>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <TIM_OC2_SetConfig+0x10c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC2_SetConfig+0xac>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef4 <TIM_OC2_SetConfig+0x110>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d113      	bne.n	8006eb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	feff8fff 	.word	0xfeff8fff
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4b33      	ldr	r3, [pc, #204]	@ (8006ff0 <TIM_OC3_SetConfig+0xf8>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a28      	ldr	r2, [pc, #160]	@ (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC3_SetConfig+0x66>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a27      	ldr	r2, [pc, #156]	@ (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d10d      	bne.n	8006f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00f      	beq.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ffc <TIM_OC3_SetConfig+0x104>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1a      	ldr	r2, [pc, #104]	@ (8007000 <TIM_OC3_SetConfig+0x108>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <TIM_OC3_SetConfig+0x10c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d113      	bne.n	8006fca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	fffeff8f 	.word	0xfffeff8f
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4b24      	ldr	r3, [pc, #144]	@ (80070c4 <TIM_OC4_SetConfig+0xbc>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800703e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	031b      	lsls	r3, r3, #12
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a19      	ldr	r2, [pc, #100]	@ (80070c8 <TIM_OC4_SetConfig+0xc0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00f      	beq.n	8007088 <TIM_OC4_SetConfig+0x80>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a18      	ldr	r2, [pc, #96]	@ (80070cc <TIM_OC4_SetConfig+0xc4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_OC4_SetConfig+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a17      	ldr	r2, [pc, #92]	@ (80070d0 <TIM_OC4_SetConfig+0xc8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_OC4_SetConfig+0x80>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a16      	ldr	r2, [pc, #88]	@ (80070d4 <TIM_OC4_SetConfig+0xcc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC4_SetConfig+0x80>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a15      	ldr	r2, [pc, #84]	@ (80070d8 <TIM_OC4_SetConfig+0xd0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d109      	bne.n	800709c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800708e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	019b      	lsls	r3, r3, #6
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	feff8fff 	.word	0xfeff8fff
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40010400 	.word	0x40010400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800

080070dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4b21      	ldr	r3, [pc, #132]	@ (800718c <TIM_OC5_SetConfig+0xb0>)
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800711c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	041b      	lsls	r3, r3, #16
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <TIM_OC5_SetConfig+0xb4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00f      	beq.n	8007152 <TIM_OC5_SetConfig+0x76>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a17      	ldr	r2, [pc, #92]	@ (8007194 <TIM_OC5_SetConfig+0xb8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00b      	beq.n	8007152 <TIM_OC5_SetConfig+0x76>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a16      	ldr	r2, [pc, #88]	@ (8007198 <TIM_OC5_SetConfig+0xbc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d007      	beq.n	8007152 <TIM_OC5_SetConfig+0x76>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a15      	ldr	r2, [pc, #84]	@ (800719c <TIM_OC5_SetConfig+0xc0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d003      	beq.n	8007152 <TIM_OC5_SetConfig+0x76>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a14      	ldr	r2, [pc, #80]	@ (80071a0 <TIM_OC5_SetConfig+0xc4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d109      	bne.n	8007166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	621a      	str	r2, [r3, #32]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	fffeff8f 	.word	0xfffeff8f
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4b22      	ldr	r3, [pc, #136]	@ (8007258 <TIM_OC6_SetConfig+0xb4>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	051b      	lsls	r3, r3, #20
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a19      	ldr	r2, [pc, #100]	@ (800725c <TIM_OC6_SetConfig+0xb8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00f      	beq.n	800721c <TIM_OC6_SetConfig+0x78>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a18      	ldr	r2, [pc, #96]	@ (8007260 <TIM_OC6_SetConfig+0xbc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00b      	beq.n	800721c <TIM_OC6_SetConfig+0x78>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a17      	ldr	r2, [pc, #92]	@ (8007264 <TIM_OC6_SetConfig+0xc0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <TIM_OC6_SetConfig+0x78>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a16      	ldr	r2, [pc, #88]	@ (8007268 <TIM_OC6_SetConfig+0xc4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC6_SetConfig+0x78>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a15      	ldr	r2, [pc, #84]	@ (800726c <TIM_OC6_SetConfig+0xc8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d109      	bne.n	8007230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	feff8fff 	.word	0xfeff8fff
 800725c:	40010000 	.word	0x40010000
 8007260:	40010400 	.word	0x40010400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 030a 	bic.w	r3, r3, #10
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f023 0210 	bic.w	r2, r3, #16
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800730a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <TIM_ITRx_SetConfig+0x38>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	f043 0307 	orr.w	r3, r3, #7
 8007352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	ffcfff8f 	.word	0xffcfff8f

0800736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e06d      	b.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a30      	ldr	r2, [pc, #192]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2f      	ldr	r2, [pc, #188]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800744a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a20      	ldr	r2, [pc, #128]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d022      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d01d      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d018      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1c      	ldr	r2, [pc, #112]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1a      	ldr	r2, [pc, #104]	@ (8007508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d009      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a16      	ldr	r2, [pc, #88]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10c      	bne.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	40001800 	.word	0x40001800
 8007510:	40014000 	.word	0x40014000

08007514 <memset>:
 8007514:	4402      	add	r2, r0
 8007516:	4603      	mov	r3, r0
 8007518:	4293      	cmp	r3, r2
 800751a:	d100      	bne.n	800751e <memset+0xa>
 800751c:	4770      	bx	lr
 800751e:	f803 1b01 	strb.w	r1, [r3], #1
 8007522:	e7f9      	b.n	8007518 <memset+0x4>

08007524 <__libc_init_array>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4d0d      	ldr	r5, [pc, #52]	@ (800755c <__libc_init_array+0x38>)
 8007528:	4c0d      	ldr	r4, [pc, #52]	@ (8007560 <__libc_init_array+0x3c>)
 800752a:	1b64      	subs	r4, r4, r5
 800752c:	10a4      	asrs	r4, r4, #2
 800752e:	2600      	movs	r6, #0
 8007530:	42a6      	cmp	r6, r4
 8007532:	d109      	bne.n	8007548 <__libc_init_array+0x24>
 8007534:	4d0b      	ldr	r5, [pc, #44]	@ (8007564 <__libc_init_array+0x40>)
 8007536:	4c0c      	ldr	r4, [pc, #48]	@ (8007568 <__libc_init_array+0x44>)
 8007538:	f000 f818 	bl	800756c <_init>
 800753c:	1b64      	subs	r4, r4, r5
 800753e:	10a4      	asrs	r4, r4, #2
 8007540:	2600      	movs	r6, #0
 8007542:	42a6      	cmp	r6, r4
 8007544:	d105      	bne.n	8007552 <__libc_init_array+0x2e>
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	f855 3b04 	ldr.w	r3, [r5], #4
 800754c:	4798      	blx	r3
 800754e:	3601      	adds	r6, #1
 8007550:	e7ee      	b.n	8007530 <__libc_init_array+0xc>
 8007552:	f855 3b04 	ldr.w	r3, [r5], #4
 8007556:	4798      	blx	r3
 8007558:	3601      	adds	r6, #1
 800755a:	e7f2      	b.n	8007542 <__libc_init_array+0x1e>
 800755c:	08007594 	.word	0x08007594
 8007560:	08007594 	.word	0x08007594
 8007564:	08007594 	.word	0x08007594
 8007568:	08007598 	.word	0x08007598

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
