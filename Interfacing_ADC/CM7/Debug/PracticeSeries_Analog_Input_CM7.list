
PracticeSeries_Analog_Input_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007adc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  0000902c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  0000902c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2400002c  08007de4  0000902c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000160  08007de4  00009160  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001521f  00000000  00000000  0000905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272f  00000000  00000000  0001e279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000209a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf1  00000000  00000000  00021938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bae2  00000000  00000000  00022529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014351  00000000  00000000  0005e00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190d09  00000000  00000000  0007235c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00203065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d4  00000000  00000000  002030a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0020727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d5c 	.word	0x08007d5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08007d5c 	.word	0x08007d5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800079c:	bf00      	nop
 800079e:	4b47      	ldr	r3, [pc, #284]	@ (80008bc <main+0x12c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
  if ( timeout < 0 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
  {
  Error_Handler();
 80007ba:	f000 fa35 	bl	8000c28 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fcef 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f887 	bl	80008d4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <main+0x12c>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a3b      	ldr	r2, [pc, #236]	@ (80008bc <main+0x12c>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b39      	ldr	r3, [pc, #228]	@ (80008bc <main+0x12c>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f002 fd3f 	bl	8003268 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f002 fd55 	bl	800329c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <main+0x12c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
{
Error_Handler();
 8000816:	f000 fa07 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f949 	bl	8000ab0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800081e:	f000 f8cb 	bl	80009b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000822:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000826:	2100      	movs	r1, #0
 8000828:	4825      	ldr	r0, [pc, #148]	@ (80008c0 <main+0x130>)
 800082a:	f002 f865 	bl	80028f8 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 faee 	bl	8000e10 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 faeb 	bl	8000e10 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fae8 	bl	8000e10 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000840:	2101      	movs	r1, #1
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fb5a 	bl	8000efc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <main+0x134>)
 800084a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <main+0x134>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <main+0x134>)
 8000858:	2200      	movs	r2, #0
 800085a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <main+0x134>)
 800085e:	2200      	movs	r2, #0
 8000860:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <main+0x134>)
 8000864:	2200      	movs	r2, #0
 8000866:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000868:	4916      	ldr	r1, [pc, #88]	@ (80008c4 <main+0x134>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fbd6 	bl	800101c <BSP_COM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0xea>
  {
    Error_Handler();
 8000876:	f000 f9d7 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <main+0x130>)
 800087c:	f001 f930 	bl	8001ae0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000880:	2164      	movs	r1, #100	@ 0x64
 8000882:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <main+0x130>)
 8000884:	f001 f9f6 	bl	8001c74 <HAL_ADC_PollForConversion>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <main+0x10c>
	  {
		  analog_val = HAL_ADC_GetValue(&hadc1);
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <main+0x130>)
 8000890:	f001 fae4 	bl	8001e5c <HAL_ADC_GetValue>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <main+0x138>)
 800089a:	801a      	strh	r2, [r3, #0]

	  }
	  HAL_Delay(550);
 800089c:	f240 2026 	movw	r0, #550	@ 0x226
 80008a0:	f000 fd10 	bl	80012c4 <HAL_Delay>
	  run++;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <main+0x13c>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <main+0x13c>)
 80008ae:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008b0:	2101      	movs	r1, #1
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <main+0x140>)
 80008b4:	f002 fcbd 	bl	8003232 <HAL_GPIO_TogglePin>
	  HAL_ADC_Start(&hadc1);
 80008b8:	e7df      	b.n	800087a <main+0xea>
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400
 80008c0:	24000058 	.word	0x24000058
 80008c4:	24000048 	.word	0x24000048
 80008c8:	240000bc 	.word	0x240000bc
 80008cc:	240000be 	.word	0x240000be
 80008d0:	58020400 	.word	0x58020400

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09c      	sub	sp, #112	@ 0x70
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	224c      	movs	r2, #76	@ 0x4c
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fa0e 	bl	8007d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2220      	movs	r2, #32
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 fa08 	bl	8007d04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f4:	2004      	movs	r0, #4
 80008f6:	f002 fce5 	bl	80032c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <SystemClock_Config+0xd8>)
 8000900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000902:	4a2a      	ldr	r2, [pc, #168]	@ (80009ac <SystemClock_Config+0xd8>)
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <SystemClock_Config+0xd8>)
 800090c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <SystemClock_Config+0xdc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800091c:	4a24      	ldr	r2, [pc, #144]	@ (80009b0 <SystemClock_Config+0xdc>)
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <SystemClock_Config+0xdc>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000930:	bf00      	nop
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <SystemClock_Config+0xdc>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800093e:	d1f8      	bne.n	8000932 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <SystemClock_Config+0xe0>)
 8000942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <SystemClock_Config+0xe0>)
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094c:	2302      	movs	r3, #2
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000950:	2301      	movs	r3, #1
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fd09 	bl	8003378 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800096c:	f000 f95c 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	233f      	movs	r3, #63	@ 0x3f
 8000972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f949 	bl	8003c2c <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009a0:	f000 f942 	bl	8000c28 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3770      	adds	r7, #112	@ 0x70
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58000400 	.word	0x58000400
 80009b0:	58024800 	.word	0x58024800
 80009b4:	58024400 	.word	0x58024400

080009b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009dc:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009de:	4a32      	ldr	r2, [pc, #200]	@ (8000aa8 <MX_ADC1_Init+0xf0>)
 80009e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009ea:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f6:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a40:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a42:	f000 feab 	bl	800179c <HAL_ADC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a4c:	f000 f8ec 	bl	8000c28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a5c:	f001 ffb0 	bl	80029c0 <HAL_ADCEx_MultiModeConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a66:	f000 f8df 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_ADC1_Init+0xf4>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a8e:	f001 f9f3 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a98:	f000 f8c6 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000058 	.word	0x24000058
 8000aa8:	40022000 	.word	0x40022000
 8000aac:	43210000 	.word	0x43210000

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b53      	ldr	r3, [pc, #332]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	4a51      	ldr	r2, [pc, #324]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	4a4a      	ldr	r2, [pc, #296]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af4:	4b47      	ldr	r3, [pc, #284]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a42      	ldr	r2, [pc, #264]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b40      	ldr	r3, [pc, #256]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	4b3c      	ldr	r3, [pc, #240]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	4a3b      	ldr	r2, [pc, #236]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b30:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_1_GPIO_Port, led_1_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	4835      	ldr	r0, [pc, #212]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000b44:	f002 fb5c 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b48:	2332      	movs	r3, #50	@ 0x32
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <MX_GPIO_Init+0x16c>)
 8000b64:	f002 f99c 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b68:	2386      	movs	r3, #134	@ 0x86
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4827      	ldr	r0, [pc, #156]	@ (8000c20 <MX_GPIO_Init+0x170>)
 8000b84:	f002 f98c 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_1_Pin */
  GPIO_InitStruct.Pin = led_1_Pin;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481e      	ldr	r0, [pc, #120]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000ba0:	f002 f97e 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4815      	ldr	r0, [pc, #84]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000bc2:	f002 f96d 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bc6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <MX_GPIO_Init+0x170>)
 8000be4:	f002 f95c 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000be8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_GPIO_Init+0x174>)
 8000c06:	f002 f94b 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020400 	.word	0x58020400
 8000c1c:	58020800 	.word	0x58020800
 8000c20:	58020000 	.word	0x58020000
 8000c24:	58021800 	.word	0x58021800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c40:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	58024400 	.word	0x58024400

08000c68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	22c0      	movs	r2, #192	@ 0xc0
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f007 f83b 	bl	8007d04 <memset>
  if(hadc->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a2b      	ldr	r2, [pc, #172]	@ (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d14f      	bne.n	8000d38 <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cb8:	23c0      	movs	r3, #192	@ 0xc0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb38 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000cda:	f7ff ffa5 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ce4:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000ce6:	f043 0320 	orr.w	r3, r3, #32
 8000cea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <HAL_ADC_MspInit+0xe0>)
 8000d34:	f002 f8b4 	bl	8002ea0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d38:	bf00      	nop
 8000d3a:	37e8      	adds	r7, #232	@ 0xe8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40022000 	.word	0x40022000
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020000 	.word	0x58020000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 fa6f 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f916 	bl	8000fe0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000df4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000dbc:	f7ff fcd0 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fc20 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 ff93 	bl	8007d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fccf 	bl	8000790 <main>
  bx  lr
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dfc:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000e00:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8000e04:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000e08:	24000160 	.word	0x24000160

08000e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC3_IRQHandler>
	...

08000e10 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	@ 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d009      	beq.n	8000e38 <BSP_LED_Init+0x28>
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d006      	beq.n	8000e38 <BSP_LED_Init+0x28>
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d003      	beq.n	8000e38 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e30:	f06f 0301 	mvn.w	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e36:	e055      	b.n	8000ee4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	e021      	b.n	8000ea2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10f      	bne.n	8000e84 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e6c:	f043 0310 	orr.w	r3, r3, #16
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	e00e      	b.n	8000ea2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <BSP_LED_Init+0xe0>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4a13      	ldr	r2, [pc, #76]	@ (8000ef4 <BSP_LED_Init+0xe4>)
 8000ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eaa:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <BSP_LED_Init+0xe8>)
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	f107 0218 	add.w	r2, r7, #24
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 ffea 	bl	8002ea0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <BSP_LED_Init+0xe8>)
 8000ed0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <BSP_LED_Init+0xe4>)
 8000ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f002 f98e 	bl	8003200 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	08007d84 	.word	0x08007d84
 8000ef8:	2400000c 	.word	0x2400000c

08000efc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <BSP_PB_Init+0xcc>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <BSP_PB_Init+0xcc>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <BSP_PB_Init+0xcc>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <BSP_PB_Init+0xd0>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 ffa5 	bl	8002ea0 <HAL_GPIO_Init>
 8000f56:	e031      	b.n	8000fbc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f5c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <BSP_PB_Init+0xd0>)
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	f107 020c 	add.w	r2, r7, #12
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 ff97 	bl	8002ea0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <BSP_PB_Init+0xd4>)
 8000f78:	441a      	add	r2, r3
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4915      	ldr	r1, [pc, #84]	@ (8000fd4 <BSP_PB_Init+0xd8>)
 8000f7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 ff3a 	bl	8002dfe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <BSP_PB_Init+0xd4>)
 8000f90:	1898      	adds	r0, r3, r2
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <BSP_PB_Init+0xdc>)
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f001 ff0f 	bl	8002dc0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000fa2:	2028      	movs	r0, #40	@ 0x28
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <BSP_PB_Init+0xe0>)
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f001 febf 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000fb4:	2328      	movs	r3, #40	@ 0x28
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fed5 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	24000018 	.word	0x24000018
 8000fd0:	240000c0 	.word	0x240000c0
 8000fd4:	08007d8c 	.word	0x08007d8c
 8000fd8:	2400001c 	.word	0x2400001c
 8000fdc:	24000020 	.word	0x24000020

08000fe0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <BSP_PB_IRQHandler+0x20>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 ff18 	bl	8002e28 <HAL_EXTI_IRQHandler>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	240000c0 	.word	0x240000c0

08001004 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001032:	f06f 0301 	mvn.w	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e018      	b.n	800106c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2294      	movs	r2, #148	@ 0x94
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <BSP_COM_Init+0x5c>)
 8001044:	4413      	add	r3, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f852 	bl	80010f0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2294      	movs	r2, #148	@ 0x94
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <BSP_COM_Init+0x5c>)
 8001056:	4413      	add	r3, r2
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f80e 	bl	800107c <MX_USART3_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001066:	f06f 0303 	mvn.w	r3, #3
 800106a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	240000c8 	.word	0x240000c8

0800107c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_USART3_Init+0x60>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	220c      	movs	r2, #12
 800109a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	895b      	ldrh	r3, [r3, #10]
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	891b      	ldrh	r3, [r3, #8]
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	899b      	ldrh	r3, [r3, #12]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010c8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 fe38 	bl	8006d40 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	24000008 	.word	0x24000008

080010e0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff8d 	bl	8001004 <BSP_PB_Callback>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <COM1_MspInit+0xa8>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <COM1_MspInit+0xa8>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <COM1_MspInit+0xa8>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <COM1_MspInit+0xa8>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <COM1_MspInit+0xa8>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <COM1_MspInit+0xa8>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <COM1_MspInit+0xa8>)
 8001136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <COM1_MspInit+0xa8>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <COM1_MspInit+0xa8>)
 8001146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001152:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001156:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001164:	2307      	movs	r3, #7
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <COM1_MspInit+0xac>)
 8001170:	f001 fe96 	bl	8002ea0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001178:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <COM1_MspInit+0xac>)
 800118a:	f001 fe89 	bl	8002ea0 <HAL_GPIO_Init>
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	58024400 	.word	0x58024400
 800119c:	58020c00 	.word	0x58020c00

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f001 fdb8 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ac:	f002 fef4 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_Init+0x68>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	4913      	ldr	r1, [pc, #76]	@ (800120c <HAL_Init+0x6c>)
 80011be:	5ccb      	ldrb	r3, [r1, r3]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_Init+0x68>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <HAL_Init+0x6c>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <HAL_Init+0x70>)
 80011e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_Init+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f814 	bl	8001218 <HAL_InitTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e002      	b.n	8001200 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011fa:	f7ff fd1b 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58024400 	.word	0x58024400
 800120c:	08007d74 	.word	0x08007d74
 8001210:	24000004 	.word	0x24000004
 8001214:	24000000 	.word	0x24000000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_InitTick+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e021      	b.n	8001270 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_InitTick+0x64>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_InitTick+0x60>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fd9d 	bl	8002d82 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f001 fd67 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x68>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000028 	.word	0x24000028
 800127c:	24000000 	.word	0x24000000
 8001280:	24000024 	.word	0x24000024

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	24000028 	.word	0x24000028
 80012a8:	2400015c 	.word	0x2400015c

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2400015c 	.word	0x2400015c

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000028 	.word	0x24000028

0800130c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_GetREVID+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0c1b      	lsrs	r3, r3, #16
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	5c001000 	.word	0x5c001000

08001324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <LL_ADC_SetChannelPreselection+0x24>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	0e9b      	lsrs	r3, r3, #26
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	2201      	movs	r2, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	e015      	b.n	80013dc <LL_ADC_SetChannelPreselection+0x50>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80013c6:	2320      	movs	r3, #32
 80013c8:	e003      	b.n	80013d2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	2201      	movs	r2, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	69d2      	ldr	r2, [r2, #28]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3360      	adds	r3, #96	@ 0x60
 8001404:	461a      	mov	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	430b      	orrs	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	431a      	orrs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	611a      	str	r2, [r3, #16]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3360      	adds	r3, #96	@ 0x60
 8001474:	461a      	mov	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
  }
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3330      	adds	r3, #48	@ 0x30
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	4413      	add	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	211f      	movs	r1, #31
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0e9b      	lsrs	r3, r3, #26
 80014f8:	f003 011f 	and.w	r1, r3, #31
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3314      	adds	r3, #20
 8001528:	461a      	mov	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	0e5b      	lsrs	r3, r3, #25
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0d1b      	lsrs	r3, r3, #20
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	2107      	movs	r1, #7
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	0d1b      	lsrs	r3, r3, #20
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0318 	and.w	r3, r3, #24
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001594:	40d9      	lsrs	r1, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	400b      	ands	r3, r1
 800159a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800159e:	431a      	orrs	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	000fffff 	.word	0x000fffff

080015b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <LL_ADC_DisableDeepPowerDown+0x20>)
 80015fe:	4013      	ands	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6093      	str	r3, [r2, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	5fffffc0 	.word	0x5fffffc0

08001614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001628:	d101      	bne.n	800162e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <LL_ADC_EnableInternalRegulator+0x24>)
 800164a:	4013      	ands	r3, r2
 800164c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	6fffffc0 	.word	0x6fffffc0

08001664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <LL_ADC_Enable+0x24>)
 800169a:	4013      	ands	r3, r2
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	7fffffc0 	.word	0x7fffffc0

080016b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <LL_ADC_Disable+0x24>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	7fffffc0 	.word	0x7fffffc0

080016dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_IsEnabled+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_IsEnabled+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b02      	cmp	r3, #2
 8001714:	d101      	bne.n	800171a <LL_ADC_IsDisableOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsDisableOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <LL_ADC_REG_StartConversion+0x24>)
 8001736:	4013      	ands	r3, r2
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	7fffffc0 	.word	0x7fffffc0

08001750 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b04      	cmp	r3, #4
 8001762:	d101      	bne.n	8001768 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b08      	cmp	r3, #8
 8001788:	d101      	bne.n	800178e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e18f      	b.n	8001ad6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fa4f 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff19 	bl	8001614 <LL_ADC_IsDeepPowerDownEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff feff 	bl	80015f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff34 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d114      	bne.n	800182c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff18 	bl	800163c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800180c:	4b87      	ldr	r3, [pc, #540]	@ (8001a2c <HAL_ADC_Init+0x290>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	4a87      	ldr	r2, [pc, #540]	@ (8001a30 <HAL_ADC_Init+0x294>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800181e:	e002      	b.n	8001826 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff17 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10d      	bne.n	8001858 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff77 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 8001862:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 8129 	bne.w	8001ac4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8125 	bne.w	8001ac4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff24 	bl	80016dc <LL_ADC_IsEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d136      	bne.n	8001908 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_ADC_Init+0x298>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x112>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a63      	ldr	r2, [pc, #396]	@ (8001a38 <HAL_ADC_Init+0x29c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10e      	bne.n	80018cc <HAL_ADC_Init+0x130>
 80018ae:	4861      	ldr	r0, [pc, #388]	@ (8001a34 <HAL_ADC_Init+0x298>)
 80018b0:	f7ff ff14 	bl	80016dc <LL_ADC_IsEnabled>
 80018b4:	4604      	mov	r4, r0
 80018b6:	4860      	ldr	r0, [pc, #384]	@ (8001a38 <HAL_ADC_Init+0x29c>)
 80018b8:	f7ff ff10 	bl	80016dc <LL_ADC_IsEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	4323      	orrs	r3, r4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e008      	b.n	80018de <HAL_ADC_Init+0x142>
 80018cc:	485b      	ldr	r0, [pc, #364]	@ (8001a3c <HAL_ADC_Init+0x2a0>)
 80018ce:	f7ff ff05 	bl	80016dc <LL_ADC_IsEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	@ (8001a34 <HAL_ADC_Init+0x298>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d004      	beq.n	80018f6 <HAL_ADC_Init+0x15a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a51      	ldr	r2, [pc, #324]	@ (8001a38 <HAL_ADC_Init+0x29c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x15e>
 80018f6:	4a52      	ldr	r2, [pc, #328]	@ (8001a40 <HAL_ADC_Init+0x2a4>)
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Init+0x160>
 80018fa:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_ADC_Init+0x2a8>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff fd0e 	bl	8001324 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001908:	f7ff fd00 	bl	800130c <HAL_GetREVID>
 800190c:	4603      	mov	r3, r0
 800190e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001912:	4293      	cmp	r3, r2
 8001914:	d914      	bls.n	8001940 <HAL_ADC_Init+0x1a4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d110      	bne.n	8001940 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7d5b      	ldrb	r3, [r3, #21]
 8001922:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001928:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800192e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7f1b      	ldrb	r3, [r3, #28]
 8001934:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001936:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001938:	f043 030c 	orr.w	r3, r3, #12
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	e00d      	b.n	800195c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7d5b      	ldrb	r3, [r3, #21]
 8001944:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800194a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001950:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f1b      	ldrb	r3, [r3, #28]
 8001956:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7f1b      	ldrb	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	3b01      	subs	r3, #1
 800196a:	045b      	lsls	r3, r3, #17
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001986:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4b2c      	ldr	r3, [pc, #176]	@ (8001a48 <HAL_ADC_Init+0x2ac>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	69b9      	ldr	r1, [r7, #24]
 800199e:	430b      	orrs	r3, r1
 80019a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fed2 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 80019ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fedf 	bl	8001776 <LL_ADC_INJ_IsConversionOngoing>
 80019b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d15f      	bne.n	8001a80 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d15c      	bne.n	8001a80 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7d1b      	ldrb	r3, [r3, #20]
 80019ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_ADC_Init+0x2b0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d130      	bne.n	8001a54 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <HAL_ADC_Init+0x2b4>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0411      	lsls	r1, r2, #16
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	e01c      	b.n	8001a64 <HAL_ADC_Init+0x2c8>
 8001a2a:	bf00      	nop
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	053e2d63 	.word	0x053e2d63
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40022100 	.word	0x40022100
 8001a3c:	58026000 	.word	0x58026000
 8001a40:	40022300 	.word	0x40022300
 8001a44:	58026300 	.word	0x58026300
 8001a48:	fff0c003 	.word	0xfff0c003
 8001a4c:	ffffbffc 	.word	0xffffbffc
 8001a50:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fdd6 	bl	800262c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10c      	bne.n	8001aa2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f023 010f 	bic.w	r1, r3, #15
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020f 	bic.w	r2, r2, #15
 8001ab0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ac2:	e007      	b.n	8001ad4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	bf00      	nop

08001ae0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_ADC_Start+0x180>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_Start+0x1c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c64 <HAL_ADC_Start+0x184>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_Start+0x20>
 8001afc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_ADC_Start+0x188>)
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_Start+0x22>
 8001b00:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <HAL_ADC_Start+0x18c>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fd58 	bl	80015b8 <LL_ADC_GetMultimode>
 8001b08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe1e 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 809a 	bne.w	8001c50 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Start+0x4a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e095      	b.n	8001c56 <HAL_ADC_Start+0x176>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fc90 	bl	8002458 <ADC_Enable>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8081 	bne.w	8001c46 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b48:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <HAL_ADC_Start+0x190>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_ADC_Start+0x184>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d002      	beq.n	8001b64 <HAL_ADC_Start+0x84>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Start+0x86>
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <HAL_ADC_Start+0x180>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d002      	beq.n	8001b74 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f023 0206 	bic.w	r2, r3, #6
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	221c      	movs	r2, #28
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <HAL_ADC_Start+0x184>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d002      	beq.n	8001bc2 <HAL_ADC_Start+0xe2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e000      	b.n	8001bc4 <HAL_ADC_Start+0xe4>
 8001bc2:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_ADC_Start+0x180>)
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d008      	beq.n	8001bde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d002      	beq.n	8001bde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	d114      	bne.n	8001c08 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bf4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fd91 	bl	8001728 <LL_ADC_REG_StartConversion>
 8001c06:	e025      	b.n	8001c54 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_ADC_Start+0x184>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d002      	beq.n	8001c24 <HAL_ADC_Start+0x144>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_Start+0x146>
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_ADC_Start+0x180>)
 8001c26:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00f      	beq.n	8001c54 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c44:	e006      	b.n	8001c54 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c4e:	e001      	b.n	8001c54 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
 8001c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40022100 	.word	0x40022100
 8001c68:	40022300 	.word	0x40022300
 8001c6c:	58026300 	.word	0x58026300
 8001c70:	fffff0fe 	.word	0xfffff0fe

08001c74 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a72      	ldr	r2, [pc, #456]	@ (8001e4c <HAL_ADC_PollForConversion+0x1d8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_ADC_PollForConversion+0x1e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a70      	ldr	r2, [pc, #448]	@ (8001e50 <HAL_ADC_PollForConversion+0x1dc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_PollForConversion+0x22>
 8001c92:	4b70      	ldr	r3, [pc, #448]	@ (8001e54 <HAL_ADC_PollForConversion+0x1e0>)
 8001c94:	e000      	b.n	8001c98 <HAL_ADC_PollForConversion+0x24>
 8001c96:	4b70      	ldr	r3, [pc, #448]	@ (8001e58 <HAL_ADC_PollForConversion+0x1e4>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fc8d 	bl	80015b8 <LL_ADC_GetMultimode>
 8001c9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d102      	bne.n	8001cae <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e037      	b.n	8001d1e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d002      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d111      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	f043 0220 	orr.w	r2, r3, #32
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0b1      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cde:	2304      	movs	r3, #4
 8001ce0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ce2:	e01c      	b.n	8001d1e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_ADC_PollForConversion+0x1d8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_PollForConversion+0x84>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a57      	ldr	r2, [pc, #348]	@ (8001e50 <HAL_ADC_PollForConversion+0x1dc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x88>
 8001cf8:	4b56      	ldr	r3, [pc, #344]	@ (8001e54 <HAL_ADC_PollForConversion+0x1e0>)
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_PollForConversion+0x8a>
 8001cfc:	4b56      	ldr	r3, [pc, #344]	@ (8001e58 <HAL_ADC_PollForConversion+0x1e4>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fc68 	bl	80015d4 <LL_ADC_GetMultiDMATransfer>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e093      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d1e:	f7ff fac5 	bl	80012ac <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d24:	e021      	b.n	8001d6a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d01d      	beq.n	8001d6a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d2e:	f7ff fabd 	bl	80012ac <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d302      	bcc.n	8001d44 <HAL_ADC_PollForConversion+0xd0>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d112      	bne.n	8001d6a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e06b      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0d6      	beq.n	8001d26 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fb86 	bl	800149a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7d5b      	ldrb	r3, [r3, #21]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d118      	bne.n	8001dce <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d111      	bne.n	8001dce <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <HAL_ADC_PollForConversion+0x1dc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d002      	beq.n	8001dde <HAL_ADC_PollForConversion+0x16a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_PollForConversion+0x16c>
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_ADC_PollForConversion+0x1d8>)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d008      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d002      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d104      	bne.n	8001e04 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e00c      	b.n	8001e1e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <HAL_ADC_PollForConversion+0x1dc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d002      	beq.n	8001e14 <HAL_ADC_PollForConversion+0x1a0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_PollForConversion+0x1a2>
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_ADC_PollForConversion+0x1d8>)
 8001e16:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d104      	bne.n	8001e2e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e008      	b.n	8001e40 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40022100 	.word	0x40022100
 8001e54:	40022300 	.word	0x40022300
 8001e58:	58026300 	.word	0x58026300

08001e5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b08d      	sub	sp, #52	@ 0x34
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x2a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e2c7      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5ba>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc4e 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 82ac 	bne.w	8002414 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db2c      	blt.n	8001f1e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x6a>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2201      	movs	r2, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	e016      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x98>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	613b      	str	r3, [r7, #16]
  return result;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e003      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	69d1      	ldr	r1, [r2, #28]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f7ff fac8 	bl	80014c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fc0b 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 8001f3a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fc18 	bl	8001776 <LL_ADC_INJ_IsConversionOngoing>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80b8 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80b4 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f7ff fad7 	bl	8001518 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f6a:	4b30      	ldr	r3, [pc, #192]	@ (800202c <HAL_ADC_ConfigChannel+0x1b4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x118>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	e01d      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x154>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x13e>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	e00a      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x154>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d02c      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f7ff fa05 	bl	80013f2 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	7e5b      	ldrb	r3, [r3, #25]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
 8001ff8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_ConfigChannel+0x188>
 8001ffe:	2300      	movs	r3, #0
 8002000:	461a      	mov	r2, r3
 8002002:	f7ff fa2f 	bl	8001464 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7e1b      	ldrb	r3, [r3, #24]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d102      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1a4>
 8002016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800201a:	e000      	b.n	800201e <HAL_ADC_ConfigChannel+0x1a6>
 800201c:	2300      	movs	r3, #0
 800201e:	461a      	mov	r2, r3
 8002020:	f7ff fa07 	bl	8001432 <LL_ADC_SetDataRightShift>
 8002024:	e04c      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x248>
 8002026:	bf00      	nop
 8002028:	47ff0000 	.word	0x47ff0000
 800202c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	069b      	lsls	r3, r3, #26
 8002040:	429a      	cmp	r2, r3
 8002042:	d107      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002052:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	069b      	lsls	r3, r3, #26
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002076:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800207e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800209a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	069b      	lsls	r3, r3, #26
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb09 	bl	80016dc <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 81aa 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fa46 	bl	8001570 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a87      	ldr	r2, [pc, #540]	@ (8002308 <HAL_ADC_ConfigChannel+0x490>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f040 809a 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4984      	ldr	r1, [pc, #528]	@ (800230c <HAL_ADC_ConfigChannel+0x494>)
 80020fa:	428b      	cmp	r3, r1
 80020fc:	d147      	bne.n	800218e <HAL_ADC_ConfigChannel+0x316>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4983      	ldr	r1, [pc, #524]	@ (8002310 <HAL_ADC_ConfigChannel+0x498>)
 8002104:	428b      	cmp	r3, r1
 8002106:	d040      	beq.n	800218a <HAL_ADC_ConfigChannel+0x312>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4981      	ldr	r1, [pc, #516]	@ (8002314 <HAL_ADC_ConfigChannel+0x49c>)
 800210e:	428b      	cmp	r3, r1
 8002110:	d039      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x30e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4980      	ldr	r1, [pc, #512]	@ (8002318 <HAL_ADC_ConfigChannel+0x4a0>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d032      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x30a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	497e      	ldr	r1, [pc, #504]	@ (800231c <HAL_ADC_ConfigChannel+0x4a4>)
 8002122:	428b      	cmp	r3, r1
 8002124:	d02b      	beq.n	800217e <HAL_ADC_ConfigChannel+0x306>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	497d      	ldr	r1, [pc, #500]	@ (8002320 <HAL_ADC_ConfigChannel+0x4a8>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d024      	beq.n	800217a <HAL_ADC_ConfigChannel+0x302>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	497b      	ldr	r1, [pc, #492]	@ (8002324 <HAL_ADC_ConfigChannel+0x4ac>)
 8002136:	428b      	cmp	r3, r1
 8002138:	d01d      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x2fe>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	497a      	ldr	r1, [pc, #488]	@ (8002328 <HAL_ADC_ConfigChannel+0x4b0>)
 8002140:	428b      	cmp	r3, r1
 8002142:	d016      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x2fa>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4978      	ldr	r1, [pc, #480]	@ (800232c <HAL_ADC_ConfigChannel+0x4b4>)
 800214a:	428b      	cmp	r3, r1
 800214c:	d00f      	beq.n	800216e <HAL_ADC_ConfigChannel+0x2f6>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4977      	ldr	r1, [pc, #476]	@ (8002330 <HAL_ADC_ConfigChannel+0x4b8>)
 8002154:	428b      	cmp	r3, r1
 8002156:	d008      	beq.n	800216a <HAL_ADC_ConfigChannel+0x2f2>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4975      	ldr	r1, [pc, #468]	@ (8002334 <HAL_ADC_ConfigChannel+0x4bc>)
 800215e:	428b      	cmp	r3, r1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x2ee>
 8002162:	4b75      	ldr	r3, [pc, #468]	@ (8002338 <HAL_ADC_ConfigChannel+0x4c0>)
 8002164:	e05a      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002166:	2300      	movs	r3, #0
 8002168:	e058      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800216a:	4b74      	ldr	r3, [pc, #464]	@ (800233c <HAL_ADC_ConfigChannel+0x4c4>)
 800216c:	e056      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800216e:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <HAL_ADC_ConfigChannel+0x4c8>)
 8002170:	e054      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002172:	4b6e      	ldr	r3, [pc, #440]	@ (800232c <HAL_ADC_ConfigChannel+0x4b4>)
 8002174:	e052      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002176:	4b6c      	ldr	r3, [pc, #432]	@ (8002328 <HAL_ADC_ConfigChannel+0x4b0>)
 8002178:	e050      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800217a:	4b72      	ldr	r3, [pc, #456]	@ (8002344 <HAL_ADC_ConfigChannel+0x4cc>)
 800217c:	e04e      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800217e:	4b72      	ldr	r3, [pc, #456]	@ (8002348 <HAL_ADC_ConfigChannel+0x4d0>)
 8002180:	e04c      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_ADC_ConfigChannel+0x4d4>)
 8002184:	e04a      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_ADC_ConfigChannel+0x4d8>)
 8002188:	e048      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800218a:	2301      	movs	r3, #1
 800218c:	e046      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4970      	ldr	r1, [pc, #448]	@ (8002354 <HAL_ADC_ConfigChannel+0x4dc>)
 8002194:	428b      	cmp	r3, r1
 8002196:	d140      	bne.n	800221a <HAL_ADC_ConfigChannel+0x3a2>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	495c      	ldr	r1, [pc, #368]	@ (8002310 <HAL_ADC_ConfigChannel+0x498>)
 800219e:	428b      	cmp	r3, r1
 80021a0:	d039      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x39e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	495b      	ldr	r1, [pc, #364]	@ (8002314 <HAL_ADC_ConfigChannel+0x49c>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d032      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x39a>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4959      	ldr	r1, [pc, #356]	@ (8002318 <HAL_ADC_ConfigChannel+0x4a0>)
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d02b      	beq.n	800220e <HAL_ADC_ConfigChannel+0x396>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4958      	ldr	r1, [pc, #352]	@ (800231c <HAL_ADC_ConfigChannel+0x4a4>)
 80021bc:	428b      	cmp	r3, r1
 80021be:	d024      	beq.n	800220a <HAL_ADC_ConfigChannel+0x392>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4956      	ldr	r1, [pc, #344]	@ (8002320 <HAL_ADC_ConfigChannel+0x4a8>)
 80021c6:	428b      	cmp	r3, r1
 80021c8:	d01d      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x38e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4955      	ldr	r1, [pc, #340]	@ (8002324 <HAL_ADC_ConfigChannel+0x4ac>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d016      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x38a>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4953      	ldr	r1, [pc, #332]	@ (8002328 <HAL_ADC_ConfigChannel+0x4b0>)
 80021da:	428b      	cmp	r3, r1
 80021dc:	d00f      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x386>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4952      	ldr	r1, [pc, #328]	@ (800232c <HAL_ADC_ConfigChannel+0x4b4>)
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d008      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x382>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4951      	ldr	r1, [pc, #324]	@ (8002334 <HAL_ADC_ConfigChannel+0x4bc>)
 80021ee:	428b      	cmp	r3, r1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x37e>
 80021f2:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <HAL_ADC_ConfigChannel+0x4c0>)
 80021f4:	e012      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 80021f6:	2300      	movs	r3, #0
 80021f8:	e010      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_ADC_ConfigChannel+0x4c8>)
 80021fc:	e00e      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 80021fe:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <HAL_ADC_ConfigChannel+0x4b4>)
 8002200:	e00c      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002202:	4b49      	ldr	r3, [pc, #292]	@ (8002328 <HAL_ADC_ConfigChannel+0x4b0>)
 8002204:	e00a      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002206:	4b4f      	ldr	r3, [pc, #316]	@ (8002344 <HAL_ADC_ConfigChannel+0x4cc>)
 8002208:	e008      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800220a:	4b4f      	ldr	r3, [pc, #316]	@ (8002348 <HAL_ADC_ConfigChannel+0x4d0>)
 800220c:	e006      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800220e:	4b4f      	ldr	r3, [pc, #316]	@ (800234c <HAL_ADC_ConfigChannel+0x4d4>)
 8002210:	e004      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002212:	4b4f      	ldr	r3, [pc, #316]	@ (8002350 <HAL_ADC_ConfigChannel+0x4d8>)
 8002214:	e002      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_ADC_ConfigChannel+0x3a4>
 800221a:	2300      	movs	r3, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f7ff f8b4 	bl	800138c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f280 80fc 	bge.w	8002426 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a36      	ldr	r2, [pc, #216]	@ (800230c <HAL_ADC_ConfigChannel+0x494>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d004      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x3ca>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a45      	ldr	r2, [pc, #276]	@ (8002354 <HAL_ADC_ConfigChannel+0x4dc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x3ce>
 8002242:	4b45      	ldr	r3, [pc, #276]	@ (8002358 <HAL_ADC_ConfigChannel+0x4e0>)
 8002244:	e000      	b.n	8002248 <HAL_ADC_ConfigChannel+0x3d0>
 8002246:	4b45      	ldr	r3, [pc, #276]	@ (800235c <HAL_ADC_ConfigChannel+0x4e4>)
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f891 	bl	8001370 <LL_ADC_GetCommonPathInternalCh>
 800224e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <HAL_ADC_ConfigChannel+0x494>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x3ec>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3d      	ldr	r2, [pc, #244]	@ (8002354 <HAL_ADC_ConfigChannel+0x4dc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10e      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x40a>
 8002264:	4829      	ldr	r0, [pc, #164]	@ (800230c <HAL_ADC_ConfigChannel+0x494>)
 8002266:	f7ff fa39 	bl	80016dc <LL_ADC_IsEnabled>
 800226a:	4604      	mov	r4, r0
 800226c:	4839      	ldr	r0, [pc, #228]	@ (8002354 <HAL_ADC_ConfigChannel+0x4dc>)
 800226e:	f7ff fa35 	bl	80016dc <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	4323      	orrs	r3, r4
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e008      	b.n	8002294 <HAL_ADC_ConfigChannel+0x41c>
 8002282:	4837      	ldr	r0, [pc, #220]	@ (8002360 <HAL_ADC_ConfigChannel+0x4e8>)
 8002284:	f7ff fa2a 	bl	80016dc <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80b3 	beq.w	8002400 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a31      	ldr	r2, [pc, #196]	@ (8002364 <HAL_ADC_ConfigChannel+0x4ec>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d165      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x4f8>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d160      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <HAL_ADC_ConfigChannel+0x4e8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	f040 80b6 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a13      	ldr	r2, [pc, #76]	@ (800230c <HAL_ADC_ConfigChannel+0x494>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x456>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <HAL_ADC_ConfigChannel+0x4dc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x45a>
 80022ce:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_ADC_ConfigChannel+0x4e0>)
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x45c>
 80022d2:	4a22      	ldr	r2, [pc, #136]	@ (800235c <HAL_ADC_ConfigChannel+0x4e4>)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f7ff f834 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <HAL_ADC_ConfigChannel+0x4f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	4a20      	ldr	r2, [pc, #128]	@ (800236c <HAL_ADC_ConfigChannel+0x4f4>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80022f6:	e002      	b.n	80022fe <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002304:	e08f      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
 8002306:	bf00      	nop
 8002308:	47ff0000 	.word	0x47ff0000
 800230c:	40022000 	.word	0x40022000
 8002310:	04300002 	.word	0x04300002
 8002314:	08600004 	.word	0x08600004
 8002318:	0c900008 	.word	0x0c900008
 800231c:	10c00010 	.word	0x10c00010
 8002320:	14f00020 	.word	0x14f00020
 8002324:	2a000400 	.word	0x2a000400
 8002328:	2e300800 	.word	0x2e300800
 800232c:	32601000 	.word	0x32601000
 8002330:	43210000 	.word	0x43210000
 8002334:	4b840000 	.word	0x4b840000
 8002338:	4fb80000 	.word	0x4fb80000
 800233c:	47520000 	.word	0x47520000
 8002340:	36902000 	.word	0x36902000
 8002344:	25b00200 	.word	0x25b00200
 8002348:	21800100 	.word	0x21800100
 800234c:	1d500080 	.word	0x1d500080
 8002350:	19200040 	.word	0x19200040
 8002354:	40022100 	.word	0x40022100
 8002358:	40022300 	.word	0x40022300
 800235c:	58026300 	.word	0x58026300
 8002360:	58026000 	.word	0x58026000
 8002364:	cb840000 	.word	0xcb840000
 8002368:	24000000 	.word	0x24000000
 800236c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_ADC_ConfigChannel+0x5c4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d11e      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x540>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d119      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2d      	ldr	r2, [pc, #180]	@ (8002440 <HAL_ADC_ConfigChannel+0x5c8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d14b      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2c      	ldr	r2, [pc, #176]	@ (8002444 <HAL_ADC_ConfigChannel+0x5cc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x52a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2a      	ldr	r2, [pc, #168]	@ (8002448 <HAL_ADC_ConfigChannel+0x5d0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x52e>
 80023a2:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_ADC_ConfigChannel+0x5d4>)
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x530>
 80023a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002450 <HAL_ADC_ConfigChannel+0x5d8>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7fe ffca 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b6:	e036      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a25      	ldr	r2, [pc, #148]	@ (8002454 <HAL_ADC_ConfigChannel+0x5dc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d131      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12c      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <HAL_ADC_ConfigChannel+0x5c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d127      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1a      	ldr	r2, [pc, #104]	@ (8002444 <HAL_ADC_ConfigChannel+0x5cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d004      	beq.n	80023ea <HAL_ADC_ConfigChannel+0x572>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a18      	ldr	r2, [pc, #96]	@ (8002448 <HAL_ADC_ConfigChannel+0x5d0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x576>
 80023ea:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_ADC_ConfigChannel+0x5d4>)
 80023ec:	e000      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x578>
 80023ee:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <HAL_ADC_ConfigChannel+0x5d8>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe ffa6 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
 80023fe:	e012      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002412:	e008      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800242e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002432:	4618      	mov	r0, r3
 8002434:	3734      	adds	r7, #52	@ 0x34
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	c7520000 	.word	0xc7520000
 8002440:	58026000 	.word	0x58026000
 8002444:	40022000 	.word	0x40022000
 8002448:	40022100 	.word	0x40022100
 800244c:	40022300 	.word	0x40022300
 8002450:	58026300 	.word	0x58026300
 8002454:	cfb80000 	.word	0xcfb80000

08002458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f939 	bl	80016dc <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d16e      	bne.n	800254e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <ADC_Enable+0x100>)
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e05a      	b.n	8002550 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f8f4 	bl	800168c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024a4:	f7fe ff02 	bl	80012ac <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	@ (800255c <ADC_Enable+0x104>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <ADC_Enable+0x66>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	@ (8002560 <ADC_Enable+0x108>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <ADC_Enable+0x6a>
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <ADC_Enable+0x10c>)
 80024c0:	e000      	b.n	80024c4 <ADC_Enable+0x6c>
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <ADC_Enable+0x110>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f877 	bl	80015b8 <LL_ADC_GetMultimode>
 80024ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <ADC_Enable+0x108>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d002      	beq.n	80024dc <ADC_Enable+0x84>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e000      	b.n	80024de <ADC_Enable+0x86>
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <ADC_Enable+0x104>)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d130      	bne.n	800254e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ec:	e028      	b.n	8002540 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f8f2 	bl	80016dc <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f8c2 	bl	800168c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002508:	f7fe fed0 	bl	80012ac <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d914      	bls.n	8002540 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00d      	beq.n	8002540 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d1cf      	bne.n	80024ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	8000003f 	.word	0x8000003f
 800255c:	40022000 	.word	0x40022000
 8002560:	40022100 	.word	0x40022100
 8002564:	40022300 	.word	0x40022300
 8002568:	58026300 	.word	0x58026300

0800256c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f8c2 	bl	8001702 <LL_ADC_IsDisableOngoing>
 800257e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f8a9 	bl	80016dc <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d047      	beq.n	8002620 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d144      	bne.n	8002620 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030d 	and.w	r3, r3, #13
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10c      	bne.n	80025be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f883 	bl	80016b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2203      	movs	r2, #3
 80025b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fe79 	bl	80012ac <HAL_GetTick>
 80025ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025bc:	e029      	b.n	8002612 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e023      	b.n	8002622 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025da:	f7fe fe67 	bl	80012ac <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d914      	bls.n	8002612 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1dc      	bne.n	80025da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a7a      	ldr	r2, [pc, #488]	@ (8002824 <ADC_ConfigureBoostMode+0x1f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <ADC_ConfigureBoostMode+0x1c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a79      	ldr	r2, [pc, #484]	@ (8002828 <ADC_ConfigureBoostMode+0x1fc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d109      	bne.n	800265c <ADC_ConfigureBoostMode+0x30>
 8002648:	4b78      	ldr	r3, [pc, #480]	@ (800282c <ADC_ConfigureBoostMode+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e008      	b.n	800266e <ADC_ConfigureBoostMode+0x42>
 800265c:	4b74      	ldr	r3, [pc, #464]	@ (8002830 <ADC_ConfigureBoostMode+0x204>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002672:	f001 fe0b 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8002676:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002680:	d010      	beq.n	80026a4 <ADC_ConfigureBoostMode+0x78>
 8002682:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002686:	d873      	bhi.n	8002770 <ADC_ConfigureBoostMode+0x144>
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268c:	d002      	beq.n	8002694 <ADC_ConfigureBoostMode+0x68>
 800268e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002692:	d16d      	bne.n	8002770 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	60fb      	str	r3, [r7, #12]
        break;
 80026a2:	e068      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	60fb      	str	r3, [r7, #12]
        break;
 80026aa:	e064      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	f003 f850 	bl	8005758 <HAL_RCCEx_GetPeriphCLKFreq>
 80026b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026c2:	d051      	beq.n	8002768 <ADC_ConfigureBoostMode+0x13c>
 80026c4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026c8:	d854      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026ca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026ce:	d047      	beq.n	8002760 <ADC_ConfigureBoostMode+0x134>
 80026d0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026d4:	d84e      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026d6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026da:	d03d      	beq.n	8002758 <ADC_ConfigureBoostMode+0x12c>
 80026dc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026e0:	d848      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e6:	d033      	beq.n	8002750 <ADC_ConfigureBoostMode+0x124>
 80026e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ec:	d842      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026ee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026f2:	d029      	beq.n	8002748 <ADC_ConfigureBoostMode+0x11c>
 80026f4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026f8:	d83c      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026fe:	d01a      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002700:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002704:	d836      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 8002706:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800270a:	d014      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 800270c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002710:	d830      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002716:	d00e      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800271c:	d82a      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 800271e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002722:	d008      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002724:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002728:	d824      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 800272a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800272e:	d002      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002730:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002734:	d11e      	bne.n	8002774 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	60fb      	str	r3, [r7, #12]
        break;
 8002746:	e016      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
        break;
 800274e:	e012      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	60fb      	str	r3, [r7, #12]
        break;
 8002756:	e00e      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	60fb      	str	r3, [r7, #12]
        break;
 800275e:	e00a      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	09db      	lsrs	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
        break;
 8002766:	e006      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	60fb      	str	r3, [r7, #12]
        break;
 800276e:	e002      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002774:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002776:	f7fe fdc9 	bl	800130c <HAL_GetREVID>
 800277a:	4603      	mov	r3, r0
 800277c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002780:	4293      	cmp	r3, r2
 8002782:	d815      	bhi.n	80027b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <ADC_ConfigureBoostMode+0x208>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d908      	bls.n	800279e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800279c:	e03e      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	e035      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <ADC_ConfigureBoostMode+0x20c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d808      	bhi.n	80027d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	e025      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	@ (800283c <ADC_ConfigureBoostMode+0x210>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d80a      	bhi.n	80027ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	e016      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <ADC_ConfigureBoostMode+0x214>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d80a      	bhi.n	800280c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002808:	609a      	str	r2, [r3, #8]
}
 800280a:	e007      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40022000 	.word	0x40022000
 8002828:	40022100 	.word	0x40022100
 800282c:	40022300 	.word	0x40022300
 8002830:	58026300 	.word	0x58026300
 8002834:	01312d00 	.word	0x01312d00
 8002838:	005f5e10 	.word	0x005f5e10
 800283c:	00bebc20 	.word	0x00bebc20
 8002840:	017d7840 	.word	0x017d7840

08002844 <LL_ADC_IsEnabled>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <LL_ADC_IsEnabled+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_ADC_IsEnabled+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <LL_ADC_StartCalibration>:
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <LL_ADC_StartCalibration+0x38>)
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800288c:	430a      	orrs	r2, r1
 800288e:	4313      	orrs	r3, r2
 8002890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	3ffeffc0 	.word	0x3ffeffc0

080028a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_REG_IsConversionOngoing>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d101      	bne.n	80028e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADCEx_Calibration_Start+0x1e>
 8002912:	2302      	movs	r3, #2
 8002914:	e04c      	b.n	80029b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fe24 	bl	800256c <ADC_Disable>
 8002924:	4603      	mov	r3, r0
 8002926:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d135      	bne.n	800299a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002932:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002934:	4013      	ands	r3, r2
 8002936:	f043 0202 	orr.w	r2, r3, #2
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff90 	bl	800286c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800294c:	e014      	b.n	8002978 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	3301      	adds	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <HAL_ADCEx_Calibration_Start+0xc4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d30d      	bcc.n	8002978 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f023 0312 	bic.w	r3, r3, #18
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e01b      	b.n	80029b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff93 	bl	80028a8 <LL_ADC_IsCalibrationOnGoing>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e2      	bne.n	800294e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f023 0303 	bic.w	r3, r3, #3
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
 8002998:	e005      	b.n	80029a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	ffffeefd 	.word	0xffffeefd
 80029bc:	25c3f800 	.word	0x25c3f800

080029c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b09f      	sub	sp, #124	@ 0x7c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029da:	2302      	movs	r3, #2
 80029dc:	e0be      	b.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d102      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	e001      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e09d      	b.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff54 	bl	80028d0 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff4e 	bl	80028d0 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d17f      	bne.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17c      	bne.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a47      	ldr	r2, [pc, #284]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a46      	ldr	r2, [pc, #280]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002a54:	4b45      	ldr	r3, [pc, #276]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a56:	e000      	b.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d039      	beq.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a38      	ldr	r2, [pc, #224]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10e      	bne.n	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a8a:	4836      	ldr	r0, [pc, #216]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a8c:	f7ff feda 	bl	8002844 <LL_ADC_IsEnabled>
 8002a90:	4604      	mov	r4, r0
 8002a92:	4835      	ldr	r0, [pc, #212]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a94:	f7ff fed6 	bl	8002844 <LL_ADC_IsEnabled>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e008      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002aa8:	4832      	ldr	r0, [pc, #200]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002aaa:	f7ff fecb 	bl	8002844 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d047      	beq.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	6892      	ldr	r2, [r2, #8]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad6:	e03a      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10e      	bne.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002af8:	481a      	ldr	r0, [pc, #104]	@ (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002afa:	f7ff fea3 	bl	8002844 <LL_ADC_IsEnabled>
 8002afe:	4604      	mov	r4, r0
 8002b00:	4819      	ldr	r0, [pc, #100]	@ (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b02:	f7ff fe9f 	bl	8002844 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4323      	orrs	r3, r4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e008      	b.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b16:	4817      	ldr	r0, [pc, #92]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b18:	f7ff fe94 	bl	8002844 <LL_ADC_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b38:	e009      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b4c:	e000      	b.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b58:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	377c      	adds	r7, #124	@ 0x7c
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022100 	.word	0x40022100
 8002b6c:	40022300 	.word	0x40022300
 8002b70:	58026300 	.word	0x58026300
 8002b74:	58026000 	.word	0x58026000
 8002b78:	fffff0e0 	.word	0xfffff0e0

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	05fa0000 	.word	0x05fa0000

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	@ (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	@ (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff29 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff40 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff90 	bl	8002c70 <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5f 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff33 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffa4 	bl	8002cd8 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_GetCurrentCPUID+0x20>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002da8:	2b70      	cmp	r3, #112	@ 0x70
 8002daa:	d101      	bne.n	8002db0 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e000      	b.n	8002db2 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002db0:	2301      	movs	r3, #1
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00a      	b.n	8002df2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]
      break;
 8002de8:	e002      	b.n	8002df0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
      break;
 8002dee:	bf00      	nop
  }

  return status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e003      	b.n	8002e1a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002e4c:	f7ff ffa6 	bl	8002d9c <HAL_GetCurrentCPUID>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d105      	bne.n	8002e62 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	011a      	lsls	r2, r3, #4
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <HAL_EXTI_IRQHandler+0x70>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e004      	b.n	8002e6c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	011a      	lsls	r2, r3, #4
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_EXTI_IRQHandler+0x74>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4798      	blx	r3
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58000088 	.word	0x58000088
 8002e9c:	580000c8 	.word	0x580000c8

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eae:	4b89      	ldr	r3, [pc, #548]	@ (80030d4 <HAL_GPIO_Init+0x234>)
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb2:	e194      	b.n	80031de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8186 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_GPIO_Init+0x44>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d130      	bne.n	8002f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0201 	and.w	r2, r3, #1
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80e0 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b2f      	ldr	r3, [pc, #188]	@ (80030d8 <HAL_GPIO_Init+0x238>)
 800301a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800301e:	4a2e      	ldr	r2, [pc, #184]	@ (80030d8 <HAL_GPIO_Init+0x238>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003028:	4b2b      	ldr	r3, [pc, #172]	@ (80030d8 <HAL_GPIO_Init+0x238>)
 800302a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003036:	4a29      	ldr	r2, [pc, #164]	@ (80030dc <HAL_GPIO_Init+0x23c>)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <HAL_GPIO_Init+0x240>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d052      	beq.n	8003108 <HAL_GPIO_Init+0x268>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <HAL_GPIO_Init+0x244>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_GPIO_Init+0x248>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02b      	beq.n	80030ca <HAL_GPIO_Init+0x22a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_GPIO_Init+0x24c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x226>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <HAL_GPIO_Init+0x250>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x222>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_GPIO_Init+0x254>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x21e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1a      	ldr	r2, [pc, #104]	@ (80030f8 <HAL_GPIO_Init+0x258>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x21a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	@ (80030fc <HAL_GPIO_Init+0x25c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x216>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_GPIO_Init+0x260>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <HAL_GPIO_Init+0x264>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x20e>
 80030aa:	2309      	movs	r3, #9
 80030ac:	e02d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ae:	230a      	movs	r3, #10
 80030b0:	e02b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b2:	2308      	movs	r3, #8
 80030b4:	e029      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b6:	2307      	movs	r3, #7
 80030b8:	e027      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ba:	2306      	movs	r3, #6
 80030bc:	e025      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030be:	2305      	movs	r3, #5
 80030c0:	e023      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e01f      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e01d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e01b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030d2:	bf00      	nop
 80030d4:	58000080 	.word	0x58000080
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58000400 	.word	0x58000400
 80030e0:	58020000 	.word	0x58020000
 80030e4:	58020400 	.word	0x58020400
 80030e8:	58020800 	.word	0x58020800
 80030ec:	58020c00 	.word	0x58020c00
 80030f0:	58021000 	.word	0x58021000
 80030f4:	58021400 	.word	0x58021400
 80030f8:	58021800 	.word	0x58021800
 80030fc:	58021c00 	.word	0x58021c00
 8003100:	58022000 	.word	0x58022000
 8003104:	58022400 	.word	0x58022400
 8003108:	2300      	movs	r3, #0
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311a:	4938      	ldr	r1, [pc, #224]	@ (80031fc <HAL_GPIO_Init+0x35c>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800317c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f ae63 	bne.w	8002eb4 <HAL_GPIO_Init+0x14>
  }
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	3724      	adds	r7, #36	@ 0x24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	58000400 	.word	0x58000400

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43d9      	mvns	r1, r3
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003270:	4a08      	ldr	r2, [pc, #32]	@ (8003294 <HAL_HSEM_FastTake+0x2c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	4a07      	ldr	r2, [pc, #28]	@ (8003298 <HAL_HSEM_FastTake+0x30>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58026400 	.word	0x58026400
 8003298:	80000300 	.word	0x80000300

0800329c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032a6:	4906      	ldr	r1, [pc, #24]	@ (80032c0 <HAL_HSEM_Release+0x24>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	58026400 	.word	0x58026400

080032c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032cc:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d00a      	beq.n	80032ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032d8:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e040      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e03e      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032ee:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80032f6:	491f      	ldr	r1, [pc, #124]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032fe:	f7fd ffd5 	bl	80012ac <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003304:	e009      	b.n	800331a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003306:	f7fd ffd1 	bl	80012ac <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003314:	d901      	bls.n	800331a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e028      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800331a:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003326:	d1ee      	bne.n	8003306 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b1e      	cmp	r3, #30
 800332c:	d008      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b2e      	cmp	r3, #46	@ 0x2e
 8003332:	d005      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b1d      	cmp	r3, #29
 8003338:	d002      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b2d      	cmp	r3, #45	@ 0x2d
 800333e:	d114      	bne.n	800336a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003340:	f7fd ffb4 	bl	80012ac <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003346:	e009      	b.n	800335c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003348:	f7fd ffb0 	bl	80012ac <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003356:	d901      	bls.n	800335c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003368:	d1ee      	bne.n	8003348 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024800 	.word	0x58024800

08003378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	@ 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f000 bc48 	b.w	8003c1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8088 	beq.w	80034aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b99      	ldr	r3, [pc, #612]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033a4:	4b96      	ldr	r3, [pc, #600]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d007      	beq.n	80033c0 <HAL_RCC_OscConfig+0x48>
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	2b18      	cmp	r3, #24
 80033b4:	d111      	bne.n	80033da <HAL_RCC_OscConfig+0x62>
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06d      	beq.n	80034a8 <HAL_RCC_OscConfig+0x130>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d169      	bne.n	80034a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f000 bc21 	b.w	8003c1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x7a>
 80033e4:	4b86      	ldr	r3, [pc, #536]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a85      	ldr	r2, [pc, #532]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x9c>
 80033fa:	4b81      	ldr	r3, [pc, #516]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a80      	ldr	r2, [pc, #512]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b7e      	ldr	r3, [pc, #504]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7d      	ldr	r2, [pc, #500]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0xc0>
 800341e:	4b78      	ldr	r3, [pc, #480]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a77      	ldr	r2, [pc, #476]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b75      	ldr	r3, [pc, #468]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a74      	ldr	r2, [pc, #464]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xd8>
 8003438:	4b71      	ldr	r3, [pc, #452]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a70      	ldr	r2, [pc, #448]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b6e      	ldr	r3, [pc, #440]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6d      	ldr	r2, [pc, #436]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800344e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd ff28 	bl	80012ac <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fd ff24 	bl	80012ac <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e3d4      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003472:	4b63      	ldr	r3, [pc, #396]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fd ff14 	bl	80012ac <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003488:	f7fd ff10 	bl	80012ac <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	@ 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e3c0      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800349a:	4b59      	ldr	r3, [pc, #356]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x110>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80ca 	beq.w	800364c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b8:	4b51      	ldr	r3, [pc, #324]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_RCC_OscConfig+0x166>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b18      	cmp	r3, #24
 80034d2:	d156      	bne.n	8003582 <HAL_RCC_OscConfig+0x20a>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d151      	bne.n	8003582 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034de:	4b48      	ldr	r3, [pc, #288]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e392      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034f6:	4b42      	ldr	r3, [pc, #264]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 0219 	bic.w	r2, r3, #25
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	493f      	ldr	r1, [pc, #252]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fd fed0 	bl	80012ac <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003510:	f7fd fecc 	bl	80012ac <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e37c      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003522:	4b37      	ldr	r3, [pc, #220]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	f7fd feed 	bl	800130c <HAL_GetREVID>
 8003532:	4603      	mov	r3, r0
 8003534:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003538:	4293      	cmp	r3, r2
 800353a:	d817      	bhi.n	800356c <HAL_RCC_OscConfig+0x1f4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d108      	bne.n	8003556 <HAL_RCC_OscConfig+0x1de>
 8003544:	4b2e      	ldr	r3, [pc, #184]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800354c:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	e07a      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b2a      	ldr	r3, [pc, #168]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	4926      	ldr	r1, [pc, #152]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356a:	e06f      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b24      	ldr	r3, [pc, #144]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	4921      	ldr	r1, [pc, #132]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	e064      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d047      	beq.n	800361a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800358a:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0219 	bic.w	r2, r3, #25
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	491a      	ldr	r1, [pc, #104]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fe86 	bl	80012ac <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd fe82 	bl	80012ac <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e332      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	f7fd fea3 	bl	800130c <HAL_GetREVID>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d819      	bhi.n	8003604 <HAL_RCC_OscConfig+0x28c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b40      	cmp	r3, #64	@ 0x40
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x272>
 80035d8:	4b09      	ldr	r3, [pc, #36]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e030      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
 80035ea:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	4901      	ldr	r1, [pc, #4]	@ (8003600 <HAL_RCC_OscConfig+0x288>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
 80035fe:	e025      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
 8003600:	58024400 	.word	0x58024400
 8003604:	4b9a      	ldr	r3, [pc, #616]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4997      	ldr	r1, [pc, #604]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
 8003618:	e018      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b95      	ldr	r3, [pc, #596]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a94      	ldr	r2, [pc, #592]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fe41 	bl	80012ac <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fd fe3d 	bl	80012ac <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e2ed      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003640:	4b8b      	ldr	r3, [pc, #556]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a9 	beq.w	80037ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b85      	ldr	r3, [pc, #532]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003664:	4b82      	ldr	r3, [pc, #520]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d007      	beq.n	8003680 <HAL_RCC_OscConfig+0x308>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b18      	cmp	r3, #24
 8003674:	d13a      	bne.n	80036ec <HAL_RCC_OscConfig+0x374>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d135      	bne.n	80036ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003680:	4b7b      	ldr	r3, [pc, #492]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x320>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b80      	cmp	r3, #128	@ 0x80
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e2c1      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003698:	f7fd fe38 	bl	800130c <HAL_GetREVID>
 800369c:	4603      	mov	r3, r0
 800369e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d817      	bhi.n	80036d6 <HAL_RCC_OscConfig+0x35e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x348>
 80036ae:	4b70      	ldr	r3, [pc, #448]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80036b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036be:	e075      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	4968      	ldr	r1, [pc, #416]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036d4:	e06a      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036d6:	4b66      	ldr	r3, [pc, #408]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	4962      	ldr	r1, [pc, #392]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ea:	e05f      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d042      	beq.n	800377a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fdd4 	bl	80012ac <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003708:	f7fd fdd0 	bl	80012ac <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e280      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800371a:	4b55      	ldr	r3, [pc, #340]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003726:	f7fd fdf1 	bl	800130c <HAL_GetREVID>
 800372a:	4603      	mov	r3, r0
 800372c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003730:	4293      	cmp	r3, r2
 8003732:	d817      	bhi.n	8003764 <HAL_RCC_OscConfig+0x3ec>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d108      	bne.n	800374e <HAL_RCC_OscConfig+0x3d6>
 800373c:	4b4c      	ldr	r3, [pc, #304]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003744:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e02e      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	069b      	lsls	r3, r3, #26
 800375c:	4944      	ldr	r1, [pc, #272]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	e023      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
 8003764:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	493f      	ldr	r1, [pc, #252]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e018      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3c      	ldr	r2, [pc, #240]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fd91 	bl	80012ac <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800378e:	f7fd fd8d 	bl	80012ac <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e23d      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037a0:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d036      	beq.n	8003826 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d019      	beq.n	80037f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fd6e 	bl	80012ac <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fd fd6a 	bl	80012ac <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e21a      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037e6:	4b22      	ldr	r3, [pc, #136]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x45c>
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fd54 	bl	80012ac <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fd fd50 	bl	80012ac <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e200      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d039      	beq.n	80038a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0c      	ldr	r2, [pc, #48]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003846:	f7fd fd31 	bl	80012ac <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800384e:	f7fd fd2d 	bl	80012ac <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1dd      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x4d6>
 800386c:	e01b      	b.n	80038a6 <HAL_RCC_OscConfig+0x52e>
 800386e:	bf00      	nop
 8003870:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003874:	4b9b      	ldr	r3, [pc, #620]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a9a      	ldr	r2, [pc, #616]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800387a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800387e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003880:	f7fd fd14 	bl	80012ac <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003888:	f7fd fd10 	bl	80012ac <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1c0      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800389a:	4b92      	ldr	r3, [pc, #584]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8081 	beq.w	80039b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a8b      	ldr	r2, [pc, #556]	@ (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038c0:	f7fd fcf4 	bl	80012ac <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c8:	f7fd fcf0 	bl	80012ac <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1a0      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038da:	4b83      	ldr	r3, [pc, #524]	@ (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x584>
 80038ee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fa:	e02d      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x5a6>
 8003904:	4b77      	ldr	r3, [pc, #476]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003908:	4a76      	ldr	r2, [pc, #472]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003910:	4b74      	ldr	r3, [pc, #464]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a73      	ldr	r2, [pc, #460]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	e01c      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c8>
 8003926:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	6713      	str	r3, [r2, #112]	@ 0x70
 8003932:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 8003940:	4b68      	ldr	r3, [pc, #416]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003944:	4a67      	ldr	r2, [pc, #412]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	@ 0x70
 800394c:	4b65      	ldr	r3, [pc, #404]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a64      	ldr	r2, [pc, #400]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003952:	f023 0304 	bic.w	r3, r3, #4
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd fca4 	bl	80012ac <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fd fca0 	bl	80012ac <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e14e      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800397e:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0ee      	beq.n	8003968 <HAL_RCC_OscConfig+0x5f0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fc8e 	bl	80012ac <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fd fc8a 	bl	80012ac <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e138      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039aa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ee      	bne.n	8003994 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 812d 	beq.w	8003c1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039c0:	4b48      	ldr	r3, [pc, #288]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c8:	2b18      	cmp	r3, #24
 80039ca:	f000 80bd 	beq.w	8003b48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	f040 809e 	bne.w	8003b14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b42      	ldr	r3, [pc, #264]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a41      	ldr	r2, [pc, #260]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fc62 	bl	80012ac <HAL_GetTick>
 80039e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fc5e 	bl	80012ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e10e      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fe:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a0e:	4b37      	ldr	r3, [pc, #220]	@ (8003aec <HAL_RCC_OscConfig+0x774>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4931      	ldr	r1, [pc, #196]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	3b01      	subs	r3, #1
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a54:	4923      	ldr	r1, [pc, #140]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a66:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6a:	4b21      	ldr	r3, [pc, #132]	@ (8003af0 <HAL_RCC_OscConfig+0x778>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a72:	00d2      	lsls	r2, r2, #3
 8003a74:	491b      	ldr	r1, [pc, #108]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f023 020c 	bic.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	4917      	ldr	r1, [pc, #92]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f023 0202 	bic.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	4912      	ldr	r1, [pc, #72]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	4a10      	ldr	r2, [pc, #64]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ac2:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	4a07      	ldr	r2, [pc, #28]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd fbe7 	bl	80012ac <HAL_GetTick>
 8003ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae0:	e011      	b.n	8003b06 <HAL_RCC_OscConfig+0x78e>
 8003ae2:	bf00      	nop
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	58024800 	.word	0x58024800
 8003aec:	fffffc0c 	.word	0xfffffc0c
 8003af0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fbda 	bl	80012ac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e08a      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b06:	4b47      	ldr	r3, [pc, #284]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x77c>
 8003b12:	e082      	b.n	8003c1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b14:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a42      	ldr	r2, [pc, #264]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fbc4 	bl	80012ac <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fbc0 	bl	80012ac <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e070      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x7b0>
 8003b46:	e068      	b.n	8003c1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b4e:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d031      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d12a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d122      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0e1b      	lsrs	r3, r3, #24
 8003bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e02b      	b.n	8003c1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bc4:	4b17      	ldr	r3, [pc, #92]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d01f      	beq.n	8003c1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bda:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	4a11      	ldr	r2, [pc, #68]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003be6:	f7fd fb61 	bl	80012ac <HAL_GetTick>
 8003bea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003bec:	bf00      	nop
 8003bee:	f7fd fb5d 	bl	80012ac <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d0f9      	beq.n	8003bee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_RCC_OscConfig+0x8b0>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c06:	00d2      	lsls	r2, r2, #3
 8003c08:	4906      	ldr	r1, [pc, #24]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <HAL_RCC_OscConfig+0x8ac>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3730      	adds	r7, #48	@ 0x30
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	58024400 	.word	0x58024400
 8003c28:	ffff0007 	.word	0xffff0007

08003c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e19c      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b8a      	ldr	r3, [pc, #552]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d910      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4985      	ldr	r1, [pc, #532]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b83      	ldr	r3, [pc, #524]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e184      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	4b7b      	ldr	r3, [pc, #492]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d908      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c8c:	4b78      	ldr	r3, [pc, #480]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4975      	ldr	r1, [pc, #468]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d908      	bls.n	8003ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cba:	4b6d      	ldr	r3, [pc, #436]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	496a      	ldr	r1, [pc, #424]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4b64      	ldr	r3, [pc, #400]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d908      	bls.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ce8:	4b61      	ldr	r3, [pc, #388]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	495e      	ldr	r1, [pc, #376]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d908      	bls.n	8003d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d16:	4b56      	ldr	r3, [pc, #344]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4953      	ldr	r1, [pc, #332]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	4b4d      	ldr	r3, [pc, #308]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d908      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d44:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f023 020f 	bic.w	r2, r3, #15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4947      	ldr	r1, [pc, #284]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d055      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d62:	4b43      	ldr	r3, [pc, #268]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4940      	ldr	r1, [pc, #256]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d121      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0f6      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0ea      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dac:	4b30      	ldr	r3, [pc, #192]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0de      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d6      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f023 0207 	bic.w	r2, r3, #7
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4925      	ldr	r1, [pc, #148]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dde:	f7fd fa65 	bl	80012ac <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de6:	f7fd fa61 	bl	80012ac <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0be      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d1eb      	bne.n	8003de6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d208      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2a:	4b11      	ldr	r3, [pc, #68]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	490e      	ldr	r1, [pc, #56]	@ (8003e70 <HAL_RCC_ClockConfig+0x244>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d214      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 020f 	bic.w	r2, r3, #15
 8003e52:	4906      	ldr	r1, [pc, #24]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <HAL_RCC_ClockConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e086      	b.n	8003f7a <HAL_RCC_ClockConfig+0x34e>
 8003e6c:	52002000 	.word	0x52002000
 8003e70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	4b3f      	ldr	r3, [pc, #252]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d208      	bcs.n	8003ea2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e90:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4939      	ldr	r1, [pc, #228]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	4b34      	ldr	r3, [pc, #208]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d208      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ebe:	4b31      	ldr	r3, [pc, #196]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	492e      	ldr	r1, [pc, #184]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d208      	bcs.n	8003efe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4922      	ldr	r1, [pc, #136]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d208      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4917      	ldr	r1, [pc, #92]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f2c:	f000 f834 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	4912      	ldr	r1, [pc, #72]	@ (8003f88 <HAL_RCC_ClockConfig+0x35c>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <HAL_RCC_ClockConfig+0x358>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <HAL_RCC_ClockConfig+0x35c>)
 8003f54:	5cd3      	ldrb	r3, [r2, r3]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <HAL_RCC_ClockConfig+0x360>)
 8003f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f64:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <HAL_RCC_ClockConfig+0x364>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <HAL_RCC_ClockConfig+0x368>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fd f952 	bl	8001218 <HAL_InitTick>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
 8003f88:	08007d74 	.word	0x08007d74
 8003f8c:	24000004 	.word	0x24000004
 8003f90:	24000000 	.word	0x24000000
 8003f94:	24000024 	.word	0x24000024

08003f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	@ 0x24
 8003f9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9e:	4bb3      	ldr	r3, [pc, #716]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa6:	2b18      	cmp	r3, #24
 8003fa8:	f200 8155 	bhi.w	8004256 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004257 	.word	0x08004257
 8003fbc:	08004257 	.word	0x08004257
 8003fc0:	08004257 	.word	0x08004257
 8003fc4:	08004257 	.word	0x08004257
 8003fc8:	08004257 	.word	0x08004257
 8003fcc:	08004257 	.word	0x08004257
 8003fd0:	08004257 	.word	0x08004257
 8003fd4:	0800403f 	.word	0x0800403f
 8003fd8:	08004257 	.word	0x08004257
 8003fdc:	08004257 	.word	0x08004257
 8003fe0:	08004257 	.word	0x08004257
 8003fe4:	08004257 	.word	0x08004257
 8003fe8:	08004257 	.word	0x08004257
 8003fec:	08004257 	.word	0x08004257
 8003ff0:	08004257 	.word	0x08004257
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	08004257 	.word	0x08004257
 8003ffc:	08004257 	.word	0x08004257
 8004000:	08004257 	.word	0x08004257
 8004004:	08004257 	.word	0x08004257
 8004008:	08004257 	.word	0x08004257
 800400c:	08004257 	.word	0x08004257
 8004010:	08004257 	.word	0x08004257
 8004014:	0800404b 	.word	0x0800404b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004018:	4b94      	ldr	r3, [pc, #592]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004024:	4b91      	ldr	r3, [pc, #580]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	08db      	lsrs	r3, r3, #3
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	4a90      	ldr	r2, [pc, #576]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
 8004034:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004036:	e111      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004038:	4b8d      	ldr	r3, [pc, #564]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800403a:	61bb      	str	r3, [r7, #24]
      break;
 800403c:	e10e      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800403e:	4b8d      	ldr	r3, [pc, #564]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004040:	61bb      	str	r3, [r7, #24]
      break;
 8004042:	e10b      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004044:	4b8c      	ldr	r3, [pc, #560]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004046:	61bb      	str	r3, [r7, #24]
      break;
 8004048:	e108      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800404a:	4b88      	ldr	r3, [pc, #544]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004054:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800405e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004060:	4b82      	ldr	r3, [pc, #520]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800406a:	4b80      	ldr	r3, [pc, #512]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80e1 	beq.w	8004250 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b02      	cmp	r3, #2
 8004092:	f000 8083 	beq.w	800419c <HAL_RCC_GetSysClockFreq+0x204>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b02      	cmp	r3, #2
 800409a:	f200 80a1 	bhi.w	80041e0 <HAL_RCC_GetSysClockFreq+0x248>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x114>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d056      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040aa:	e099      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040ac:	4b6f      	ldr	r3, [pc, #444]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02d      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040b8:	4b6c      	ldr	r3, [pc, #432]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
 80040c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e2:	4b62      	ldr	r3, [pc, #392]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2e4>
 80040fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004112:	e087      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004126:	4b51      	ldr	r3, [pc, #324]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004136:	ed97 6a02 	vldr	s12, [r7, #8]
 800413a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2e4>
 800413e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800414a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004156:	e065      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004162:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004284 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416a:	4b40      	ldr	r3, [pc, #256]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417a:	ed97 6a02 	vldr	s12, [r7, #8]
 800417e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800418e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800419a:	e043      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ae:	4b2f      	ldr	r3, [pc, #188]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041be:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2e4>
 80041c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041de:	e021      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004284 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f2:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	ed97 6a02 	vldr	s12, [r7, #8]
 8004206:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2e4>
 800420a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004222:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004224:	4b11      	ldr	r3, [pc, #68]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	0a5b      	lsrs	r3, r3, #9
 800422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422e:	3301      	adds	r3, #1
 8004230:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800423c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004248:	ee17 3a90 	vmov	r3, s15
 800424c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800424e:	e005      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
      break;
 8004254:	e002      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004256:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004258:	61bb      	str	r3, [r7, #24]
      break;
 800425a:	bf00      	nop
  }

  return sysclockfreq;
 800425c:	69bb      	ldr	r3, [r7, #24]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	@ 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	58024400 	.word	0x58024400
 8004270:	03d09000 	.word	0x03d09000
 8004274:	003d0900 	.word	0x003d0900
 8004278:	017d7840 	.word	0x017d7840
 800427c:	46000000 	.word	0x46000000
 8004280:	4c742400 	.word	0x4c742400
 8004284:	4a742400 	.word	0x4a742400
 8004288:	4bbebc20 	.word	0x4bbebc20

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004292:	f7ff fe81 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_RCC_GetHCLKFreq+0x50>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490f      	ldr	r1, [pc, #60]	@ (80042e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	fa22 f303 	lsr.w	r3, r2, r3
 80042ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <HAL_RCC_GetHCLKFreq+0x50>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a07      	ldr	r2, [pc, #28]	@ (80042e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80042c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042ca:	4a07      	ldr	r2, [pc, #28]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	58024400 	.word	0x58024400
 80042e0:	08007d74 	.word	0x08007d74
 80042e4:	24000004 	.word	0x24000004
 80042e8:	24000000 	.word	0x24000000

080042ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042f0:	f7ff ffcc 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	@ (8004314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	58024400 	.word	0x58024400
 8004314:	08007d74 	.word	0x08007d74

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800431c:	f7ff ffb6 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4904      	ldr	r1, [pc, #16]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	58024400 	.word	0x58024400
 8004340:	08007d74 	.word	0x08007d74

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b0ca      	sub	sp, #296	@ 0x128
 800434a:	af00      	add	r7, sp, #0
 800434c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004368:	2500      	movs	r5, #0
 800436a:	ea54 0305 	orrs.w	r3, r4, r5
 800436e:	d049      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800437c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004380:	d828      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004386:	d01a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800438c:	d822      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004396:	d007      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004398:	e01c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439a:	4bb8      	ldr	r3, [pc, #736]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	4ab7      	ldr	r2, [pc, #732]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043a6:	e01a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 fb61 	bl	8006a78 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fc08 	bl	8006bdc <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043e6:	4ba5      	ldr	r3, [pc, #660]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f4:	4aa1      	ldr	r2, [pc, #644]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80043fa:	e003      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004410:	f04f 0900 	mov.w	r9, #0
 8004414:	ea58 0309 	orrs.w	r3, r8, r9
 8004418:	d047      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	2b04      	cmp	r3, #4
 8004422:	d82a      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004424:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004441 	.word	0x08004441
 8004430:	0800444f 	.word	0x0800444f
 8004434:	08004465 	.word	0x08004465
 8004438:	08004483 	.word	0x08004483
 800443c:	08004483 	.word	0x08004483
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4b8e      	ldr	r3, [pc, #568]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	4a8d      	ldr	r2, [pc, #564]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800444c:	e01a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	3308      	adds	r3, #8
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f002 fb0e 	bl	8006a78 <RCCEx_PLL2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004462:	e00f      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	3328      	adds	r3, #40	@ 0x28
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f002 fbb5 	bl	8006bdc <RCCEx_PLL3_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800448c:	4b7b      	ldr	r3, [pc, #492]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	f023 0107 	bic.w	r1, r3, #7
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	4a78      	ldr	r2, [pc, #480]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80044b6:	f04f 0b00 	mov.w	fp, #0
 80044ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80044be:	d04c      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d030      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d0:	d829      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d4:	d02d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d8:	d825      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d018      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d821      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d007      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80044ea:	e01c      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	4a62      	ldr	r2, [pc, #392]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044f8:	e01c      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f002 fab8 	bl	8006a78 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800450e:	e011      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	3328      	adds	r3, #40	@ 0x28
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f002 fb5f 	bl	8006bdc <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800453c:	4b4f      	ldr	r3, [pc, #316]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	4a4c      	ldr	r2, [pc, #304]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004566:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004570:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d053      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004586:	d035      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800458c:	d82e      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800458e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004592:	d031      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004594:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004598:	d828      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800459e:	d01a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a4:	d822      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80045aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ae:	d007      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80045b0:	e01c      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b2:	4b32      	ldr	r3, [pc, #200]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	4a31      	ldr	r2, [pc, #196]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045be:	e01c      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	3308      	adds	r3, #8
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 fa55 	bl	8006a78 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045d4:	e011      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f002 fafc 	bl	8006bdc <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ea:	e006      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f2:	e002      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004602:	4b1e      	ldr	r3, [pc, #120]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004614:	430b      	orrs	r3, r1
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800462e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004638:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d056      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800464a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800464e:	d038      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004654:	d831      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004656:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800465a:	d034      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800465c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004660:	d82b      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004666:	d01d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800466c:	d825      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004678:	e01f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4ba2      	ldr	r3, [pc, #648]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4aa1      	ldr	r2, [pc, #644]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800468c:	e01c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3308      	adds	r3, #8
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f002 f9ee 	bl	8006a78 <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	3328      	adds	r3, #40	@ 0x28
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f002 fa95 	bl	8006bdc <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c0:	e002      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046d0:	4b8e      	ldr	r3, [pc, #568]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046e0:	4a8a      	ldr	r2, [pc, #552]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046e2:	430b      	orrs	r3, r1
 80046e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e6:	e003      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80046fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004706:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800470a:	460b      	mov	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	d03a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	2b30      	cmp	r3, #48	@ 0x30
 8004718:	d01f      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800471a:	2b30      	cmp	r3, #48	@ 0x30
 800471c:	d819      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d00c      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004722:	2b20      	cmp	r3, #32
 8004724:	d815      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d111      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4b77      	ldr	r3, [pc, #476]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a76      	ldr	r2, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800473a:	e011      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	3308      	adds	r3, #8
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f002 f997 	bl	8006a78 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004758:	e002      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004768:	4b68      	ldr	r3, [pc, #416]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	4a65      	ldr	r2, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004778:	430b      	orrs	r3, r1
 800477a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800479c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d051      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b0:	d035      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b6:	d82e      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047bc:	d031      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047c2:	d828      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c8:	d01a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ce:	d822      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d8:	d007      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047da:	e01c      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047e8:	e01c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f002 f940 	bl	8006a78 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047fe:	e011      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f002 f9e7 	bl	8006bdc <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800482c:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483a:	4a34      	ldr	r2, [pc, #208]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004860:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d056      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004874:	d033      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004876:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800487a:	d82c      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800487c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004880:	d02f      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004886:	d826      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800488c:	d02b      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800488e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004892:	d820      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004898:	d012      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800489a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800489e:	d81a      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d115      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	3308      	adds	r3, #8
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f002 f8e0 	bl	8006a78 <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048be:	e015      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 f987 	bl	8006bdc <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048d4:	e00a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004902:	4a02      	ldr	r2, [pc, #8]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004904:	430b      	orrs	r3, r1
 8004906:	6513      	str	r3, [r2, #80]	@ 0x50
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800492e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004932:	460b      	mov	r3, r1
 8004934:	4313      	orrs	r3, r2
 8004936:	d055      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004944:	d033      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800494a:	d82c      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d02f      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d826      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800495c:	d02b      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800495e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004962:	d820      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004968:	d012      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800496a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800496e:	d81a      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d022      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004978:	d115      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	3308      	adds	r3, #8
 8004980:	2101      	movs	r1, #1
 8004982:	4618      	mov	r0, r3
 8004984:	f002 f878 	bl	8006a78 <RCCEx_PLL2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800498e:	e015      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	3328      	adds	r3, #40	@ 0x28
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f002 f91f 	bl	8006bdc <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049a4:	e00a      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ae:	bf00      	nop
 80049b0:	e004      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049c4:	4ba3      	ldr	r3, [pc, #652]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80049fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d037      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0e:	d00e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a14:	d816      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4a8b      	ldr	r2, [pc, #556]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a2c:	e00f      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	3308      	adds	r3, #8
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 f81e 	bl	8006a78 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a56:	4b7f      	ldr	r3, [pc, #508]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	4a7b      	ldr	r2, [pc, #492]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d039      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ae1 	.word	0x08004ae1
 8004aa8:	08004ab5 	.word	0x08004ab5
 8004aac:	08004ac3 	.word	0x08004ac3
 8004ab0:	08004ae1 	.word	0x08004ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4a66      	ldr	r2, [pc, #408]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ac0:	e00f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 ffd4 	bl	8006a78 <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ad6:	e004      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004aea:	4b5a      	ldr	r3, [pc, #360]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	f023 0103 	bic.w	r1, r3, #3
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af8:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f000 809f 	beq.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b36:	f7fc fbb9 	bl	80012ac <HAL_GetTick>
 8004b3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b40:	f7fc fbb4 	bl	80012ac <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	@ 0x64
 8004b4e:	d903      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b56:	e005      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b58:	4b3f      	ldr	r3, [pc, #252]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ed      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d179      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b78:	4053      	eors	r3, r2
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b8e:	4b31      	ldr	r3, [pc, #196]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a30      	ldr	r2, [pc, #192]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bba:	d118      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fb76 	bl	80012ac <HAL_GetTick>
 8004bc0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc4:	e00d      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fb71 	bl	80012ac <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d903      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0eb      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d129      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c06:	d10e      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c08:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c18:	091a      	lsrs	r2, r3, #4
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	e005      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c30:	6113      	str	r3, [r2, #16]
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c42:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c48:	e00e      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58024800 	.word	0x58024800
 8004c5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 0301 	and.w	r3, r2, #1
 8004c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f000 8089 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c90:	2b28      	cmp	r3, #40	@ 0x28
 8004c92:	d86b      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004d75 	.word	0x08004d75
 8004ca0:	08004d6d 	.word	0x08004d6d
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d6d 	.word	0x08004d6d
 8004cac:	08004d6d 	.word	0x08004d6d
 8004cb0:	08004d6d 	.word	0x08004d6d
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004d6d 	.word	0x08004d6d
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d6d 	.word	0x08004d6d
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d6d 	.word	0x08004d6d
 8004cdc:	08004d57 	.word	0x08004d57
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004d75 	.word	0x08004d75
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004d6d 	.word	0x08004d6d
 8004d10:	08004d6d 	.word	0x08004d6d
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004d75 	.word	0x08004d75
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d6d 	.word	0x08004d6d
 8004d2c:	08004d6d 	.word	0x08004d6d
 8004d30:	08004d6d 	.word	0x08004d6d
 8004d34:	08004d6d 	.word	0x08004d6d
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d75 	.word	0x08004d75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	3308      	adds	r3, #8
 8004d46:	2101      	movs	r1, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 fe95 	bl	8006a78 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d54:	e00f      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 ff3c 	bl	8006bdc <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d7e:	4bbf      	ldr	r3, [pc, #764]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8c:	4abb      	ldr	r2, [pc, #748]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0302 	and.w	r3, r2, #2
 8004da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d041      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d824      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004dfb 	.word	0x08004dfb
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fe43 	bl	8006a78 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 feea 	bl	8006bdc <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e22:	4b96      	ldr	r3, [pc, #600]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f023 0107 	bic.w	r1, r3, #7
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e30:	4a92      	ldr	r2, [pc, #584]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0304 	and.w	r3, r2, #4
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d044      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d825      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	3308      	adds	r3, #8
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 fdef 	bl	8006a78 <RCCEx_PLL2_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fe96 	bl	8006bdc <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eca:	4b6c      	ldr	r3, [pc, #432]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f023 0107 	bic.w	r1, r3, #7
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eda:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f002 0320 	and.w	r3, r2, #32
 8004ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d033      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1c:	d82c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d02f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d826      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f2e:	d02b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f34:	d820      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3a:	d012      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f40:	d81a      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d022      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4a:	d115      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 fd8f 	bl	8006a78 <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 fe36 	bl	8006bdc <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f76:	e00a      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f80:	bf00      	nop
 8004f82:	e004      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f84:	bf00      	nop
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f96:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	d058      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe2:	d033      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004fe4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe8:	d82c      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff4:	d826      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ffa:	d02b      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005000:	d820      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005006:	d012      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500c:	d81a      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d022      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d115      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	3308      	adds	r3, #8
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fd29 	bl	8006a78 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800502c:	e015      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005032:	3328      	adds	r3, #40	@ 0x28
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fdd0 	bl	8006bdc <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800504a:	e006      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800504c:	bf00      	nop
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005066:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005072:	4a02      	ldr	r2, [pc, #8]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005074:	430b      	orrs	r3, r1
 8005076:	6593      	str	r3, [r2, #88]	@ 0x58
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800509e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050a2:	460b      	mov	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	d055      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050b4:	d033      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80050b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050ba:	d82c      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d02f      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c6:	d826      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050cc:	d02b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80050ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050d2:	d820      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d8:	d012      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050de:	d81a      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d022      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e8:	d115      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	3308      	adds	r3, #8
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fcc0 	bl	8006a78 <RCCEx_PLL2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050fe:	e015      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	3328      	adds	r3, #40	@ 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fd67 	bl	8006bdc <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005134:	4ba1      	ldr	r3, [pc, #644]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005138:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005144:	4a9d      	ldr	r2, [pc, #628]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 0308 	and.w	r3, r2, #8
 8005160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d01e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	3328      	adds	r3, #40	@ 0x28
 8005188:	2102      	movs	r1, #2
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fd26 	bl	8006bdc <RCCEx_PLL3_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800519c:	4b87      	ldr	r3, [pc, #540]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ac:	4a83      	ldr	r2, [pc, #524]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f002 0310 	and.w	r3, r2, #16
 80051be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051cc:	460b      	mov	r3, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	d01e      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	3328      	adds	r3, #40	@ 0x28
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 fcf7 	bl	8006bdc <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051fa:	4b70      	ldr	r3, [pc, #448]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800520a:	4a6c      	ldr	r2, [pc, #432]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800521c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005226:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800522a:	460b      	mov	r3, r1
 800522c:	4313      	orrs	r3, r2
 800522e:	d03e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523c:	d022      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800523e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005242:	d81b      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524c:	d00b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800524e:	e015      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	3308      	adds	r3, #8
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f001 fc0d 	bl	8006a78 <RCCEx_PLL2_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005264:	e00f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	3328      	adds	r3, #40	@ 0x28
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f001 fcb4 	bl	8006bdc <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528e:	4b4b      	ldr	r3, [pc, #300]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800529e:	4a47      	ldr	r2, [pc, #284]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052bc:	2300      	movs	r3, #0
 80052be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d03b      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d6:	d01f      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052dc:	d818      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e2:	d003      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80052e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e8:	d007      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80052ea:	e011      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b33      	ldr	r3, [pc, #204]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a32      	ldr	r2, [pc, #200]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80052f8:	e00f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	3328      	adds	r3, #40	@ 0x28
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f001 fc6a 	bl	8006bdc <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005322:	4b26      	ldr	r3, [pc, #152]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6553      	str	r3, [r2, #84]	@ 0x54
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800534e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005350:	2300      	movs	r3, #0
 8005352:	677b      	str	r3, [r7, #116]	@ 0x74
 8005354:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d034      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d007      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800536e:	e011      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005370:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800537c:	e00e      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3308      	adds	r3, #8
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fb76 	bl	8006a78 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800539a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d6:	2300      	movs	r3, #0
 80053d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d00c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	3328      	adds	r3, #40	@ 0x28
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 fbf5 	bl	8006bdc <RCCEx_PLL3_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800540a:	663b      	str	r3, [r7, #96]	@ 0x60
 800540c:	2300      	movs	r3, #0
 800540e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005410:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005414:	460b      	mov	r3, r1
 8005416:	4313      	orrs	r3, r2
 8005418:	d038      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005426:	d018      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542c:	d811      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005432:	d014      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005438:	d80b      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800543e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005444:	4bc3      	ldr	r3, [pc, #780]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	4ac2      	ldr	r2, [pc, #776]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005450:	e008      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005458:	e004      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800546c:	4bb9      	ldr	r3, [pc, #740]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547c:	4ab5      	ldr	r2, [pc, #724]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	@ 0x54
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800549a:	2300      	movs	r3, #0
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800549e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a8:	4baa      	ldr	r3, [pc, #680]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b6:	4aa7      	ldr	r2, [pc, #668]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ca:	2300      	movs	r3, #0
 80054cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	2300      	movs	r3, #0
 80054fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005500:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800550a:	4b92      	ldr	r3, [pc, #584]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	4a8e      	ldr	r2, [pc, #568]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800552a:	643b      	str	r3, [r7, #64]	@ 0x40
 800552c:	2300      	movs	r3, #0
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005530:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800553a:	4b86      	ldr	r3, [pc, #536]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4a85      	ldr	r2, [pc, #532]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005540:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	4b83      	ldr	r3, [pc, #524]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005548:	6919      	ldr	r1, [r3, #16]
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005552:	4a80      	ldr	r2, [pc, #512]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005554:	430b      	orrs	r3, r1
 8005556:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005566:	2300      	movs	r3, #0
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005574:	4b77      	ldr	r3, [pc, #476]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	4a74      	ldr	r2, [pc, #464]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005584:	430b      	orrs	r3, r1
 8005586:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005594:	633b      	str	r3, [r7, #48]	@ 0x30
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b4:	4a67      	ldr	r2, [pc, #412]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	2100      	movs	r1, #0
 80055c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d011      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	3308      	adds	r3, #8
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fa4a 	bl	8006a78 <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	2100      	movs	r1, #0
 8005604:	6239      	str	r1, [r7, #32]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561a:	3308      	adds	r3, #8
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fa2a 	bl	8006a78 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800562a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	2100      	movs	r1, #0
 8005644:	61b9      	str	r1, [r7, #24]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fa0a 	bl	8006a78 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	2100      	movs	r1, #0
 8005684:	6139      	str	r1, [r7, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d011      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	3328      	adds	r3, #40	@ 0x28
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fa9c 	bl	8006bdc <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80056aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	2100      	movs	r1, #0
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d011      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	3328      	adds	r3, #40	@ 0x28
 80056dc:	2101      	movs	r1, #1
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fa7c 	bl	8006bdc <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80056ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	2100      	movs	r1, #0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d011      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	3328      	adds	r3, #40	@ 0x28
 800571c:	2102      	movs	r1, #2
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fa5c 	bl	8006bdc <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800573a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800574e:	46bd      	mov	sp, r7
 8005750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005754:	58024400 	.word	0x58024400

08005758 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	@ 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 8094 	bne.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005770:	4b9e      	ldr	r3, [pc, #632]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	2b04      	cmp	r3, #4
 800577e:	f200 8087 	bhi.w	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005782:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	0800579d 	.word	0x0800579d
 800578c:	080057c5 	.word	0x080057c5
 8005790:	080057ed 	.word	0x080057ed
 8005794:	08005889 	.word	0x08005889
 8005798:	08005815 	.word	0x08005815
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800579c:	4b93      	ldr	r3, [pc, #588]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a8:	d108      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f810 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b8:	f000 bd45 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057c0:	f000 bd41 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057c4:	4b89      	ldr	r3, [pc, #548]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d0:	d108      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d2:	f107 0318 	add.w	r3, r7, #24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd54 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057e0:	f000 bd31 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e8:	f000 bd2d 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ec:	4b7f      	ldr	r3, [pc, #508]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f8:	d108      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fe94 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005808:	f000 bd1d 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	f000 bd19 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005814:	4b75      	ldr	r3, [pc, #468]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800581e:	4b73      	ldr	r3, [pc, #460]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800582a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005830:	4b6e      	ldr	r3, [pc, #440]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	4a6d      	ldr	r2, [pc, #436]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005842:	e01f      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005844:	4b69      	ldr	r3, [pc, #420]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005850:	d106      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005858:	d102      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800585a:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585e:	e011      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005860:	4b62      	ldr	r3, [pc, #392]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800586c:	d106      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005874:	d102      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005876:	4b60      	ldr	r3, [pc, #384]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800587a:	e003      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005880:	f000 bce1 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005884:	f000 bcdf 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005888:	4b5c      	ldr	r3, [pc, #368]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800588c:	f000 bcdb 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005894:	f000 bcd7 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f040 80ad 	bne.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80058a6:	4b51      	ldr	r3, [pc, #324]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b6:	d056      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	f200 8090 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c6:	f000 8088 	beq.w	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ce:	f200 8088 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d032      	beq.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	f200 8081 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d014      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80058ec:	e079      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058ee:	4b3f      	ldr	r3, [pc, #252]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058fa:	d108      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005900:	4618      	mov	r0, r3
 8005902:	f000 ff67 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590a:	f000 bc9c 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005912:	f000 bc98 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005916:	4b35      	ldr	r3, [pc, #212]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005922:	d108      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005924:	f107 0318 	add.w	r3, r7, #24
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fcab 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005932:	f000 bc88 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593a:	f000 bc84 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594a:	d108      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fdeb 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595a:	f000 bc74 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005962:	f000 bc70 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005966:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005970:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b04      	cmp	r3, #4
 800597a:	d10c      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005982:	4b1a      	ldr	r3, [pc, #104]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a18      	ldr	r2, [pc, #96]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005994:	e01f      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005996:	4b15      	ldr	r3, [pc, #84]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80059c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059d2:	f000 bc38 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059d6:	f000 bc36 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059de:	f000 bc32 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e6:	f000 bc2e 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
 80059f0:	03d09000 	.word	0x03d09000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	017d7840 	.word	0x017d7840
 80059fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	f040 809c 	bne.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a12:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005a16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a1e:	d054      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a26:	f200 808b 	bhi.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a30:	f000 8083 	beq.w	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a3a:	f200 8081 	bhi.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a44:	d02f      	beq.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a4c:	d878      	bhi.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a5a:	d012      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005a5c:	e070      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a5e:	4b8a      	ldr	r3, [pc, #552]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 feaf 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7a:	e3e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a80:	e3e1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a82:	4b81      	ldr	r3, [pc, #516]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a90:	f107 0318 	add.w	r3, r7, #24
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fbf5 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a9e:	e3d2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa4:	e3cf      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aa6:	4b78      	ldr	r3, [pc, #480]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd37 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac2:	e3c0      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e3bd      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005aca:	4b6f      	ldr	r3, [pc, #444]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d10c      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ae6:	4b68      	ldr	r3, [pc, #416]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	4a66      	ldr	r2, [pc, #408]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af8:	e01e      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005afa:	4b63      	ldr	r3, [pc, #396]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b10:	4b5f      	ldr	r3, [pc, #380]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b14:	e010      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b16:	4b5c      	ldr	r3, [pc, #368]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b22:	d106      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2a:	d102      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b2c:	4b59      	ldr	r3, [pc, #356]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b36:	e386      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b38:	e385      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b3a:	4b57      	ldr	r3, [pc, #348]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3e:	e382      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b44:	e37f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	f040 80a7 	bne.w	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005b54:	4b4c      	ldr	r3, [pc, #304]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b64:	d055      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b6c:	f200 8096 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b76:	f000 8084 	beq.w	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b80:	f200 808c 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b8a:	d030      	beq.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b92:	f200 8083 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ba2:	d012      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005ba4:	e07a      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ba6:	4b38      	ldr	r3, [pc, #224]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe0b 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc2:	e340      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc8:	e33d      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bca:	4b2f      	ldr	r3, [pc, #188]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd8:	f107 0318 	add.w	r3, r7, #24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fb51 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be6:	e32e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bec:	e32b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bee:	4b26      	ldr	r3, [pc, #152]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fc93 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c0a:	e31c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c10:	e319      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c2e:	4b16      	ldr	r3, [pc, #88]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c40:	e01e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c42:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c56:	d102      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c58:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c5c:	e010      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c74:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c7e:	e2e2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c80:	e2e1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c86:	e2de      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	03d09000 	.word	0x03d09000
 8005c90:	003d0900 	.word	0x003d0900
 8005c94:	017d7840 	.word	0x017d7840
 8005c98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca0:	e2d1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005caa:	430b      	orrs	r3, r1
 8005cac:	f040 809c 	bne.w	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005cb0:	4b93      	ldr	r3, [pc, #588]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005cb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc0:	d054      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc8:	f200 808b 	bhi.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cd2:	f000 8083 	beq.w	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cdc:	f200 8081 	bhi.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce6:	d02f      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cee:	d878      	bhi.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfc:	d012      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005cfe:	e070      	b.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d00:	4b7f      	ldr	r3, [pc, #508]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd5e 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d1c:	e293      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d22:	e290      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d24:	4b76      	ldr	r3, [pc, #472]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d30:	d107      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d32:	f107 0318 	add.w	r3, r7, #24
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 faa4 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d40:	e281      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d46:	e27e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d48:	4b6d      	ldr	r3, [pc, #436]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d54:	d107      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d56:	f107 030c 	add.w	r3, r7, #12
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fbe6 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d64:	e26f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6a:	e26c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d6c:	4b64      	ldr	r3, [pc, #400]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d76:	4b62      	ldr	r3, [pc, #392]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d88:	4b5d      	ldr	r3, [pc, #372]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	4a5c      	ldr	r2, [pc, #368]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d9a:	e01e      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d9c:	4b58      	ldr	r3, [pc, #352]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da8:	d106      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db0:	d102      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005db2:	4b55      	ldr	r3, [pc, #340]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db6:	e010      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005db8:	4b51      	ldr	r3, [pc, #324]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dcc:	d102      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dce:	4b4f      	ldr	r3, [pc, #316]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005dd8:	e235      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dda:	e234      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de0:	e231      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de6:	e22e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005df0:	430b      	orrs	r3, r1
 8005df2:	f040 808f 	bne.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005df6:	4b42      	ldr	r3, [pc, #264]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e06:	d06b      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e0e:	d874      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e16:	d056      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e1e:	d86c      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e26:	d03b      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e2e:	d864      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e36:	d021      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e3e:	d85c      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d004      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005e4e:	e054      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7fe fa4c 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8005e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e56:	e1f6      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e58:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e64:	d107      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e66:	f107 0318 	add.w	r3, r7, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa0a 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e74:	e1e7      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e7a:	e1e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e7c:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e88:	d107      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fb4c 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e98:	e1d5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9e:	e1d2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea0:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eac:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ebe:	e1c2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e1bf      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d102      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ed8:	e1b5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ede:	e1b2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ee0:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef2:	e1a8      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef8:	e1a5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005efe:	e1a2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f00:	58024400 	.word	0x58024400
 8005f04:	03d09000 	.word	0x03d09000
 8005f08:	003d0900 	.word	0x003d0900
 8005f0c:	017d7840 	.word	0x017d7840
 8005f10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	d173      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f20:	4b9c      	ldr	r3, [pc, #624]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f30:	d02f      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f38:	d863      	bhi.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f46:	d012      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005f48:	e05b      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4a:	4b92      	ldr	r3, [pc, #584]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f56:	d107      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f58:	f107 0318 	add.w	r3, r7, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f991 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f66:	e16e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6c:	e16b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f6e:	4b89      	ldr	r3, [pc, #548]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fad3 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f8a:	e15c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f90:	e159      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f92:	4b80      	ldr	r3, [pc, #512]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f9c:	4b7d      	ldr	r3, [pc, #500]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fae:	4b79      	ldr	r3, [pc, #484]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	4a77      	ldr	r2, [pc, #476]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc0:	e01e      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fc2:	4b74      	ldr	r3, [pc, #464]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fce:	d106      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fd6:	d102      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fd8:	4b70      	ldr	r3, [pc, #448]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fdc:	e010      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fde:	4b6d      	ldr	r3, [pc, #436]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fea:	d106      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff2:	d102      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ff8:	e002      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ffe:	e122      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006000:	e121      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006006:	e11e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006010:	430b      	orrs	r3, r1
 8006012:	d133      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006014:	4b5f      	ldr	r3, [pc, #380]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800602c:	e023      	b.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800602e:	4b59      	ldr	r3, [pc, #356]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800603c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fbc7 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e0fc      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e0f9      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006052:	4b50      	ldr	r3, [pc, #320]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006060:	f107 0318 	add.w	r3, r7, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f90d 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606e:	e0ea      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e0e7      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607a:	e0e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006080:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006084:	430b      	orrs	r3, r1
 8006086:	f040 808d 	bne.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800608a:	4b42      	ldr	r3, [pc, #264]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800609a:	d06b      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a2:	d874      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d056      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	d86c      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060ba:	d03b      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060c2:	d864      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ca:	d021      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d2:	d85c      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e0:	d004      	beq.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80060e2:	e054      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80060e4:	f000 f8b8 	bl	8006258 <HAL_RCCEx_GetD3PCLK1Freq>
 80060e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060ea:	e0ac      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ec:	4b29      	ldr	r3, [pc, #164]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060f8:	d107      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f8c0 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006108:	e09d      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610e:	e09a      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006110:	4b20      	ldr	r3, [pc, #128]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611c:	d107      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa02 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800612c:	e08b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006132:	e088      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006134:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d109      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006140:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	4a13      	ldr	r2, [pc, #76]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006152:	e078      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e075      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800615a:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006166:	d102      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616c:	e06b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006172:	e068      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006174:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d102      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006182:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006186:	e05e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e05b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006192:	e058      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006194:	58024400 	.word	0x58024400
 8006198:	03d09000 	.word	0x03d09000
 800619c:	003d0900 	.word	0x003d0900
 80061a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80061a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80061ac:	430b      	orrs	r3, r1
 80061ae:	d148      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80061b0:	4b27      	ldr	r3, [pc, #156]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c0:	d02a      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c8:	d838      	bhi.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d6:	d00d      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80061d8:	e030      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061da:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e6:	d102      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	e02b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	e028      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061f4:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fae4 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006210:	e019      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006216:	e016      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006218:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006224:	d107      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f82a 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006234:	e007      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006240:	e001      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006248:	4618      	mov	r0, r3
 800624a:	3740      	adds	r7, #64	@ 0x40
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	58024400 	.word	0x58024400
 8006254:	017d7840 	.word	0x017d7840

08006258 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800625c:	f7fe f816 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	4904      	ldr	r1, [pc, #16]	@ (8006280 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800626e:	5ccb      	ldrb	r3, [r1, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	58024400 	.word	0x58024400
 8006280:	08007d74 	.word	0x08007d74

08006284 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	@ 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800628c:	4ba1      	ldr	r3, [pc, #644]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006296:	4b9f      	ldr	r3, [pc, #636]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629a:	0b1b      	lsrs	r3, r3, #12
 800629c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	091b      	lsrs	r3, r3, #4
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062ae:	4b99      	ldr	r3, [pc, #612]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8111 	beq.w	80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	f000 8083 	beq.w	80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	f200 80a1 	bhi.w	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d056      	beq.n	800639c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062ee:	e099      	b.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f0:	4b88      	ldr	r3, [pc, #544]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02d      	beq.n	8006358 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062fc:	4b85      	ldr	r3, [pc, #532]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	08db      	lsrs	r3, r3, #3
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	4a84      	ldr	r2, [pc, #528]	@ (8006518 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
 800630c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006326:	4b7b      	ldr	r3, [pc, #492]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	ed97 6a03 	vldr	s12, [r7, #12]
 800633a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800633e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006356:	e087      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636a:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637a:	ed97 6a03 	vldr	s12, [r7, #12]
 800637e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800639a:	e065      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b59      	ldr	r3, [pc, #356]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063de:	e043      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b48      	ldr	r3, [pc, #288]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a03 	vldr	s12, [r7, #12]
 8006406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006422:	e021      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006436:	4b37      	ldr	r3, [pc, #220]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006446:	ed97 6a03 	vldr	s12, [r7, #12]
 800644a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006466:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006468:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	0a5b      	lsrs	r3, r3, #9
 800646e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006482:	edd7 6a07 	vldr	s13, [r7, #28]
 8006486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648e:	ee17 2a90 	vmov	r2, s15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006496:	4b1f      	ldr	r3, [pc, #124]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	0c1b      	lsrs	r3, r3, #16
 800649c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064bc:	ee17 2a90 	vmov	r2, s15
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064c4:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	0e1b      	lsrs	r3, r3, #24
 80064ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064de:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ea:	ee17 2a90 	vmov	r2, s15
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
}
 8006506:	bf00      	nop
 8006508:	3724      	adds	r7, #36	@ 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	03d09000 	.word	0x03d09000
 800651c:	46000000 	.word	0x46000000
 8006520:	4c742400 	.word	0x4c742400
 8006524:	4a742400 	.word	0x4a742400
 8006528:	4bbebc20 	.word	0x4bbebc20

0800652c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	@ 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006534:	4ba1      	ldr	r3, [pc, #644]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800653e:	4b9f      	ldr	r3, [pc, #636]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	0d1b      	lsrs	r3, r3, #20
 8006544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006548:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800654a:	4b9c      	ldr	r3, [pc, #624]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006556:	4b99      	ldr	r3, [pc, #612]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	08db      	lsrs	r3, r3, #3
 800655c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8111 	beq.w	800679c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b02      	cmp	r3, #2
 800657e:	f000 8083 	beq.w	8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b02      	cmp	r3, #2
 8006586:	f200 80a1 	bhi.w	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d056      	beq.n	8006644 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006596:	e099      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006598:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02d      	beq.n	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065a4:	4b85      	ldr	r3, [pc, #532]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	4a84      	ldr	r2, [pc, #528]	@ (80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ce:	4b7b      	ldr	r3, [pc, #492]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	ed97 6a03 	vldr	s12, [r7, #12]
 80065e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065fe:	e087      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800660e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006612:	4b6a      	ldr	r3, [pc, #424]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006622:	ed97 6a03 	vldr	s12, [r7, #12]
 8006626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800662a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006642:	e065      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	4b59      	ldr	r3, [pc, #356]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006666:	ed97 6a03 	vldr	s12, [r7, #12]
 800666a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800666e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006686:	e043      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669a:	4b48      	ldr	r3, [pc, #288]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ca:	e021      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066de:	4b37      	ldr	r3, [pc, #220]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006710:	4b2a      	ldr	r3, [pc, #168]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	0a5b      	lsrs	r3, r3, #9
 8006716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800672a:	edd7 6a07 	vldr	s13, [r7, #28]
 800672e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006736:	ee17 2a90 	vmov	r2, s15
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800673e:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006758:	edd7 6a07 	vldr	s13, [r7, #28]
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 2a90 	vmov	r2, s15
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800676c:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006786:	edd7 6a07 	vldr	s13, [r7, #28]
 800678a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006792:	ee17 2a90 	vmov	r2, s15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800679a:	e008      	b.n	80067ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	609a      	str	r2, [r3, #8]
}
 80067ae:	bf00      	nop
 80067b0:	3724      	adds	r7, #36	@ 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
 80067c0:	03d09000 	.word	0x03d09000
 80067c4:	46000000 	.word	0x46000000
 80067c8:	4c742400 	.word	0x4c742400
 80067cc:	4a742400 	.word	0x4a742400
 80067d0:	4bbebc20 	.word	0x4bbebc20

080067d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b089      	sub	sp, #36	@ 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80067e6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80067f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067fc:	4b98      	ldr	r3, [pc, #608]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8111 	beq.w	8006a42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b02      	cmp	r3, #2
 8006824:	f000 8083 	beq.w	800692e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b02      	cmp	r3, #2
 800682c:	f200 80a1 	bhi.w	8006972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d056      	beq.n	80068ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800683c:	e099      	b.n	8006972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800683e:	4b88      	ldr	r3, [pc, #544]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02d      	beq.n	80068a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800684a:	4b85      	ldr	r3, [pc, #532]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	4a83      	ldr	r2, [pc, #524]	@ (8006a64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006874:	4b7a      	ldr	r3, [pc, #488]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006884:	ed97 6a03 	vldr	s12, [r7, #12]
 8006888:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800688c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068a4:	e087      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80068b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b8:	4b69      	ldr	r3, [pc, #420]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80068cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068e8:	e065      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	ee07 3a90 	vmov	s15, r3
 80068f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006a70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80068f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fc:	4b58      	ldr	r3, [pc, #352]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006910:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800692c:	e043      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006938:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800693c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006940:	4b47      	ldr	r3, [pc, #284]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006950:	ed97 6a03 	vldr	s12, [r7, #12]
 8006954:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006970:	e021      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006984:	4b36      	ldr	r3, [pc, #216]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006994:	ed97 6a03 	vldr	s12, [r7, #12]
 8006998:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800699c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80069b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069dc:	ee17 2a90 	vmov	r2, s15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80069e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0a:	ee17 2a90 	vmov	r2, s15
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006a12:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a38:	ee17 2a90 	vmov	r2, s15
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	3724      	adds	r7, #36	@ 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	46000000 	.word	0x46000000
 8006a6c:	4c742400 	.word	0x4c742400
 8006a70:	4a742400 	.word	0x4a742400
 8006a74:	4bbebc20 	.word	0x4bbebc20

08006a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a86:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d101      	bne.n	8006a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e099      	b.n	8006bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a96:	4b4f      	ldr	r3, [pc, #316]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fa fc03 	bl	80012ac <HAL_GetTick>
 8006aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006aa8:	e008      	b.n	8006abc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006aaa:	f7fa fbff 	bl	80012ac <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e086      	b.n	8006bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006abc:	4b45      	ldr	r3, [pc, #276]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f0      	bne.n	8006aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ac8:	4b42      	ldr	r3, [pc, #264]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	493f      	ldr	r1, [pc, #252]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	628b      	str	r3, [r1, #40]	@ 0x28
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b0c:	4931      	ldr	r1, [pc, #196]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b12:	4b30      	ldr	r3, [pc, #192]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	492d      	ldr	r1, [pc, #180]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b24:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	f023 0220 	bic.w	r2, r3, #32
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4928      	ldr	r1, [pc, #160]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b36:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a26      	ldr	r2, [pc, #152]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b3c:	f023 0310 	bic.w	r3, r3, #16
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b42:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b46:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <RCCEx_PLL2_Config+0x160>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	69d2      	ldr	r2, [r2, #28]
 8006b4e:	00d2      	lsls	r2, r2, #3
 8006b50:	4920      	ldr	r1, [pc, #128]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b56:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f043 0310 	orr.w	r3, r3, #16
 8006b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b68:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a19      	ldr	r2, [pc, #100]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b74:	e00f      	b.n	8006b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d106      	bne.n	8006b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b7c:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	4a14      	ldr	r2, [pc, #80]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b88:	e005      	b.n	8006b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b8a:	4b12      	ldr	r3, [pc, #72]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b96:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fa fb83 	bl	80012ac <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ba8:	e008      	b.n	8006bbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006baa:	f7fa fb7f 	bl	80012ac <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e006      	b.n	8006bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bbc:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	ffff0007 	.word	0xffff0007

08006bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bea:	4b53      	ldr	r3, [pc, #332]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d101      	bne.n	8006bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e099      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fa fb51 	bl	80012ac <HAL_GetTick>
 8006c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c0e:	f7fa fb4d 	bl	80012ac <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e086      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c20:	4b45      	ldr	r3, [pc, #276]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f0      	bne.n	8006c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c2c:	4b42      	ldr	r3, [pc, #264]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	493f      	ldr	r1, [pc, #252]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	025b      	lsls	r3, r3, #9
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c70:	4931      	ldr	r1, [pc, #196]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c76:	4b30      	ldr	r3, [pc, #192]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	492d      	ldr	r1, [pc, #180]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c88:	4b2b      	ldr	r3, [pc, #172]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	4928      	ldr	r1, [pc, #160]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c9a:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4a26      	ldr	r2, [pc, #152]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ca6:	4b24      	ldr	r3, [pc, #144]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006caa:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <RCCEx_PLL3_Config+0x160>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	69d2      	ldr	r2, [r2, #28]
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	4920      	ldr	r1, [pc, #128]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cba:	4b1f      	ldr	r3, [pc, #124]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cd8:	e00f      	b.n	8006cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d106      	bne.n	8006cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ce0:	4b15      	ldr	r3, [pc, #84]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cec:	e005      	b.n	8006cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	4a11      	ldr	r2, [pc, #68]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d06:	f7fa fad1 	bl	80012ac <HAL_GetTick>
 8006d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d0c:	e008      	b.n	8006d20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d0e:	f7fa facd 	bl	80012ac <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d20:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	ffff0007 	.word	0xffff0007

08006d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e042      	b.n	8006dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f83b 	bl	8006de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2224      	movs	r2, #36	@ 0x24
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd9a 	bl	80078c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f82f 	bl	8006df4 <UART_SetConfig>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e01b      	b.n	8006dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fe19 	bl	8007a08 <UART_CheckIdleState>
 8006dd6:	4603      	mov	r3, r0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df8:	b092      	sub	sp, #72	@ 0x48
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4bbe      	ldr	r3, [pc, #760]	@ (800711c <UART_SetConfig+0x328>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4ab3      	ldr	r2, [pc, #716]	@ (8007120 <UART_SetConfig+0x32c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4baf      	ldr	r3, [pc, #700]	@ (8007124 <UART_SetConfig+0x330>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7a:	f023 010f 	bic.w	r1, r3, #15
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4aa6      	ldr	r2, [pc, #664]	@ (8007128 <UART_SetConfig+0x334>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d177      	bne.n	8006f84 <UART_SetConfig+0x190>
 8006e94:	4ba5      	ldr	r3, [pc, #660]	@ (800712c <UART_SetConfig+0x338>)
 8006e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e9c:	2b28      	cmp	r3, #40	@ 0x28
 8006e9e:	d86d      	bhi.n	8006f7c <UART_SetConfig+0x188>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <UART_SetConfig+0xb4>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006f4d 	.word	0x08006f4d
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	08006f7d 	.word	0x08006f7d
 8006eb4:	08006f7d 	.word	0x08006f7d
 8006eb8:	08006f7d 	.word	0x08006f7d
 8006ebc:	08006f7d 	.word	0x08006f7d
 8006ec0:	08006f7d 	.word	0x08006f7d
 8006ec4:	08006f7d 	.word	0x08006f7d
 8006ec8:	08006f55 	.word	0x08006f55
 8006ecc:	08006f7d 	.word	0x08006f7d
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006f7d 	.word	0x08006f7d
 8006ee0:	08006f7d 	.word	0x08006f7d
 8006ee4:	08006f7d 	.word	0x08006f7d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f7d 	.word	0x08006f7d
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f7d 	.word	0x08006f7d
 8006efc:	08006f7d 	.word	0x08006f7d
 8006f00:	08006f7d 	.word	0x08006f7d
 8006f04:	08006f7d 	.word	0x08006f7d
 8006f08:	08006f65 	.word	0x08006f65
 8006f0c:	08006f7d 	.word	0x08006f7d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	08006f7d 	.word	0x08006f7d
 8006f20:	08006f7d 	.word	0x08006f7d
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f7d 	.word	0x08006f7d
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006f7d 	.word	0x08006f7d
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f7d 	.word	0x08006f7d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e222      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e21e      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f62:	e21a      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e216      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f6c:	2320      	movs	r3, #32
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e212      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f74:	2340      	movs	r3, #64	@ 0x40
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e20e      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f7c:	2380      	movs	r3, #128	@ 0x80
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e20a      	b.n	800739a <UART_SetConfig+0x5a6>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a69      	ldr	r2, [pc, #420]	@ (8007130 <UART_SetConfig+0x33c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d130      	bne.n	8006ff0 <UART_SetConfig+0x1fc>
 8006f8e:	4b67      	ldr	r3, [pc, #412]	@ (800712c <UART_SetConfig+0x338>)
 8006f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	d826      	bhi.n	8006fe8 <UART_SetConfig+0x1f4>
 8006f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <UART_SetConfig+0x1ac>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fc1 	.word	0x08006fc1
 8006fa8:	08006fc9 	.word	0x08006fc9
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e1ec      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e1e8      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e1e4      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	e1e0      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fd8:	2320      	movs	r3, #32
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e1dc      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fe0:	2340      	movs	r3, #64	@ 0x40
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e1d8      	b.n	800739a <UART_SetConfig+0x5a6>
 8006fe8:	2380      	movs	r3, #128	@ 0x80
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e1d4      	b.n	800739a <UART_SetConfig+0x5a6>
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8007134 <UART_SetConfig+0x340>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d130      	bne.n	800705c <UART_SetConfig+0x268>
 8006ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800712c <UART_SetConfig+0x338>)
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	2b05      	cmp	r3, #5
 8007004:	d826      	bhi.n	8007054 <UART_SetConfig+0x260>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <UART_SetConfig+0x218>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007025 	.word	0x08007025
 8007010:	0800702d 	.word	0x0800702d
 8007014:	08007035 	.word	0x08007035
 8007018:	0800703d 	.word	0x0800703d
 800701c:	08007045 	.word	0x08007045
 8007020:	0800704d 	.word	0x0800704d
 8007024:	2300      	movs	r3, #0
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e1b6      	b.n	800739a <UART_SetConfig+0x5a6>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e1b2      	b.n	800739a <UART_SetConfig+0x5a6>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703a:	e1ae      	b.n	800739a <UART_SetConfig+0x5a6>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e1aa      	b.n	800739a <UART_SetConfig+0x5a6>
 8007044:	2320      	movs	r3, #32
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704a:	e1a6      	b.n	800739a <UART_SetConfig+0x5a6>
 800704c:	2340      	movs	r3, #64	@ 0x40
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007052:	e1a2      	b.n	800739a <UART_SetConfig+0x5a6>
 8007054:	2380      	movs	r3, #128	@ 0x80
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705a:	e19e      	b.n	800739a <UART_SetConfig+0x5a6>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a35      	ldr	r2, [pc, #212]	@ (8007138 <UART_SetConfig+0x344>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d130      	bne.n	80070c8 <UART_SetConfig+0x2d4>
 8007066:	4b31      	ldr	r3, [pc, #196]	@ (800712c <UART_SetConfig+0x338>)
 8007068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	2b05      	cmp	r3, #5
 8007070:	d826      	bhi.n	80070c0 <UART_SetConfig+0x2cc>
 8007072:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <UART_SetConfig+0x284>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007091 	.word	0x08007091
 800707c:	08007099 	.word	0x08007099
 8007080:	080070a1 	.word	0x080070a1
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007096:	e180      	b.n	800739a <UART_SetConfig+0x5a6>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e17c      	b.n	800739a <UART_SetConfig+0x5a6>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a6:	e178      	b.n	800739a <UART_SetConfig+0x5a6>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e174      	b.n	800739a <UART_SetConfig+0x5a6>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b6:	e170      	b.n	800739a <UART_SetConfig+0x5a6>
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070be:	e16c      	b.n	800739a <UART_SetConfig+0x5a6>
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e168      	b.n	800739a <UART_SetConfig+0x5a6>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	@ (800713c <UART_SetConfig+0x348>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d142      	bne.n	8007158 <UART_SetConfig+0x364>
 80070d2:	4b16      	ldr	r3, [pc, #88]	@ (800712c <UART_SetConfig+0x338>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d838      	bhi.n	8007150 <UART_SetConfig+0x35c>
 80070de:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x2f0>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	08007141 	.word	0x08007141
 80070f8:	08007149 	.word	0x08007149
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e14a      	b.n	800739a <UART_SetConfig+0x5a6>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e146      	b.n	800739a <UART_SetConfig+0x5a6>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e142      	b.n	800739a <UART_SetConfig+0x5a6>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e13e      	b.n	800739a <UART_SetConfig+0x5a6>
 800711c:	cfff69f3 	.word	0xcfff69f3
 8007120:	58000c00 	.word	0x58000c00
 8007124:	11fff4ff 	.word	0x11fff4ff
 8007128:	40011000 	.word	0x40011000
 800712c:	58024400 	.word	0x58024400
 8007130:	40004400 	.word	0x40004400
 8007134:	40004800 	.word	0x40004800
 8007138:	40004c00 	.word	0x40004c00
 800713c:	40005000 	.word	0x40005000
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e128      	b.n	800739a <UART_SetConfig+0x5a6>
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e124      	b.n	800739a <UART_SetConfig+0x5a6>
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007156:	e120      	b.n	800739a <UART_SetConfig+0x5a6>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4acb      	ldr	r2, [pc, #812]	@ (800748c <UART_SetConfig+0x698>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d176      	bne.n	8007250 <UART_SetConfig+0x45c>
 8007162:	4bcb      	ldr	r3, [pc, #812]	@ (8007490 <UART_SetConfig+0x69c>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800716a:	2b28      	cmp	r3, #40	@ 0x28
 800716c:	d86c      	bhi.n	8007248 <UART_SetConfig+0x454>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x380>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007219 	.word	0x08007219
 8007178:	08007249 	.word	0x08007249
 800717c:	08007249 	.word	0x08007249
 8007180:	08007249 	.word	0x08007249
 8007184:	08007249 	.word	0x08007249
 8007188:	08007249 	.word	0x08007249
 800718c:	08007249 	.word	0x08007249
 8007190:	08007249 	.word	0x08007249
 8007194:	08007221 	.word	0x08007221
 8007198:	08007249 	.word	0x08007249
 800719c:	08007249 	.word	0x08007249
 80071a0:	08007249 	.word	0x08007249
 80071a4:	08007249 	.word	0x08007249
 80071a8:	08007249 	.word	0x08007249
 80071ac:	08007249 	.word	0x08007249
 80071b0:	08007249 	.word	0x08007249
 80071b4:	08007229 	.word	0x08007229
 80071b8:	08007249 	.word	0x08007249
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007249 	.word	0x08007249
 80071c4:	08007249 	.word	0x08007249
 80071c8:	08007249 	.word	0x08007249
 80071cc:	08007249 	.word	0x08007249
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007231 	.word	0x08007231
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007249 	.word	0x08007249
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007249 	.word	0x08007249
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007239 	.word	0x08007239
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007249 	.word	0x08007249
 8007200:	08007249 	.word	0x08007249
 8007204:	08007249 	.word	0x08007249
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	08007249 	.word	0x08007249
 8007214:	08007241 	.word	0x08007241
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e0bc      	b.n	800739a <UART_SetConfig+0x5a6>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e0b8      	b.n	800739a <UART_SetConfig+0x5a6>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e0b4      	b.n	800739a <UART_SetConfig+0x5a6>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e0b0      	b.n	800739a <UART_SetConfig+0x5a6>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e0ac      	b.n	800739a <UART_SetConfig+0x5a6>
 8007240:	2340      	movs	r3, #64	@ 0x40
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e0a8      	b.n	800739a <UART_SetConfig+0x5a6>
 8007248:	2380      	movs	r3, #128	@ 0x80
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e0a4      	b.n	800739a <UART_SetConfig+0x5a6>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a8f      	ldr	r2, [pc, #572]	@ (8007494 <UART_SetConfig+0x6a0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d130      	bne.n	80072bc <UART_SetConfig+0x4c8>
 800725a:	4b8d      	ldr	r3, [pc, #564]	@ (8007490 <UART_SetConfig+0x69c>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b05      	cmp	r3, #5
 8007264:	d826      	bhi.n	80072b4 <UART_SetConfig+0x4c0>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0x478>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007295 	.word	0x08007295
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e086      	b.n	800739a <UART_SetConfig+0x5a6>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e082      	b.n	800739a <UART_SetConfig+0x5a6>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e07e      	b.n	800739a <UART_SetConfig+0x5a6>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e07a      	b.n	800739a <UART_SetConfig+0x5a6>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e076      	b.n	800739a <UART_SetConfig+0x5a6>
 80072ac:	2340      	movs	r3, #64	@ 0x40
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e072      	b.n	800739a <UART_SetConfig+0x5a6>
 80072b4:	2380      	movs	r3, #128	@ 0x80
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e06e      	b.n	800739a <UART_SetConfig+0x5a6>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a75      	ldr	r2, [pc, #468]	@ (8007498 <UART_SetConfig+0x6a4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d130      	bne.n	8007328 <UART_SetConfig+0x534>
 80072c6:	4b72      	ldr	r3, [pc, #456]	@ (8007490 <UART_SetConfig+0x69c>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d826      	bhi.n	8007320 <UART_SetConfig+0x52c>
 80072d2:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <UART_SetConfig+0x4e4>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	08007301 	.word	0x08007301
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007319 	.word	0x08007319
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e050      	b.n	800739a <UART_SetConfig+0x5a6>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e04c      	b.n	800739a <UART_SetConfig+0x5a6>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e048      	b.n	800739a <UART_SetConfig+0x5a6>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e044      	b.n	800739a <UART_SetConfig+0x5a6>
 8007310:	2320      	movs	r3, #32
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e040      	b.n	800739a <UART_SetConfig+0x5a6>
 8007318:	2340      	movs	r3, #64	@ 0x40
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e03c      	b.n	800739a <UART_SetConfig+0x5a6>
 8007320:	2380      	movs	r3, #128	@ 0x80
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e038      	b.n	800739a <UART_SetConfig+0x5a6>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a5b      	ldr	r2, [pc, #364]	@ (800749c <UART_SetConfig+0x6a8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d130      	bne.n	8007394 <UART_SetConfig+0x5a0>
 8007332:	4b57      	ldr	r3, [pc, #348]	@ (8007490 <UART_SetConfig+0x69c>)
 8007334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b05      	cmp	r3, #5
 800733c:	d826      	bhi.n	800738c <UART_SetConfig+0x598>
 800733e:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x550>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007365 	.word	0x08007365
 800734c:	0800736d 	.word	0x0800736d
 8007350:	08007375 	.word	0x08007375
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007385 	.word	0x08007385
 800735c:	2302      	movs	r3, #2
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007362:	e01a      	b.n	800739a <UART_SetConfig+0x5a6>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e016      	b.n	800739a <UART_SetConfig+0x5a6>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007372:	e012      	b.n	800739a <UART_SetConfig+0x5a6>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737a:	e00e      	b.n	800739a <UART_SetConfig+0x5a6>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007382:	e00a      	b.n	800739a <UART_SetConfig+0x5a6>
 8007384:	2340      	movs	r3, #64	@ 0x40
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e006      	b.n	800739a <UART_SetConfig+0x5a6>
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e002      	b.n	800739a <UART_SetConfig+0x5a6>
 8007394:	2380      	movs	r3, #128	@ 0x80
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a3f      	ldr	r2, [pc, #252]	@ (800749c <UART_SetConfig+0x6a8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	f040 80f8 	bne.w	8007596 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	dc46      	bgt.n	800743c <UART_SetConfig+0x648>
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	f2c0 8082 	blt.w	80074b8 <UART_SetConfig+0x6c4>
 80073b4:	3b02      	subs	r3, #2
 80073b6:	2b1e      	cmp	r3, #30
 80073b8:	d87e      	bhi.n	80074b8 <UART_SetConfig+0x6c4>
 80073ba:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <UART_SetConfig+0x5cc>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	08007443 	.word	0x08007443
 80073c4:	080074b9 	.word	0x080074b9
 80073c8:	0800744b 	.word	0x0800744b
 80073cc:	080074b9 	.word	0x080074b9
 80073d0:	080074b9 	.word	0x080074b9
 80073d4:	080074b9 	.word	0x080074b9
 80073d8:	0800745b 	.word	0x0800745b
 80073dc:	080074b9 	.word	0x080074b9
 80073e0:	080074b9 	.word	0x080074b9
 80073e4:	080074b9 	.word	0x080074b9
 80073e8:	080074b9 	.word	0x080074b9
 80073ec:	080074b9 	.word	0x080074b9
 80073f0:	080074b9 	.word	0x080074b9
 80073f4:	080074b9 	.word	0x080074b9
 80073f8:	0800746b 	.word	0x0800746b
 80073fc:	080074b9 	.word	0x080074b9
 8007400:	080074b9 	.word	0x080074b9
 8007404:	080074b9 	.word	0x080074b9
 8007408:	080074b9 	.word	0x080074b9
 800740c:	080074b9 	.word	0x080074b9
 8007410:	080074b9 	.word	0x080074b9
 8007414:	080074b9 	.word	0x080074b9
 8007418:	080074b9 	.word	0x080074b9
 800741c:	080074b9 	.word	0x080074b9
 8007420:	080074b9 	.word	0x080074b9
 8007424:	080074b9 	.word	0x080074b9
 8007428:	080074b9 	.word	0x080074b9
 800742c:	080074b9 	.word	0x080074b9
 8007430:	080074b9 	.word	0x080074b9
 8007434:	080074b9 	.word	0x080074b9
 8007438:	080074ab 	.word	0x080074ab
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d037      	beq.n	80074b0 <UART_SetConfig+0x6bc>
 8007440:	e03a      	b.n	80074b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007442:	f7fe ff09 	bl	8006258 <HAL_RCCEx_GetD3PCLK1Freq>
 8007446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007448:	e03c      	b.n	80074c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe ff18 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007458:	e034      	b.n	80074c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800745a:	f107 0318 	add.w	r3, r7, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff f864 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007468:	e02c      	b.n	80074c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <UART_SetConfig+0x69c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007476:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <UART_SetConfig+0x69c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	08db      	lsrs	r3, r3, #3
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	4a07      	ldr	r2, [pc, #28]	@ (80074a0 <UART_SetConfig+0x6ac>)
 8007482:	fa22 f303 	lsr.w	r3, r2, r3
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007488:	e01c      	b.n	80074c4 <UART_SetConfig+0x6d0>
 800748a:	bf00      	nop
 800748c:	40011400 	.word	0x40011400
 8007490:	58024400 	.word	0x58024400
 8007494:	40007800 	.word	0x40007800
 8007498:	40007c00 	.word	0x40007c00
 800749c:	58000c00 	.word	0x58000c00
 80074a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80074a4:	4b9d      	ldr	r3, [pc, #628]	@ (800771c <UART_SetConfig+0x928>)
 80074a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a8:	e00c      	b.n	80074c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074aa:	4b9d      	ldr	r3, [pc, #628]	@ (8007720 <UART_SetConfig+0x92c>)
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ae:	e009      	b.n	80074c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b6:	e005      	b.n	80074c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 81de 	beq.w	8007888 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	4a94      	ldr	r2, [pc, #592]	@ (8007724 <UART_SetConfig+0x930>)
 80074d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074da:	fbb3 f3f2 	udiv	r3, r3, r2
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d305      	bcc.n	80074fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007502:	e1c1      	b.n	8007888 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007506:	2200      	movs	r2, #0
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	60fa      	str	r2, [r7, #12]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	4a84      	ldr	r2, [pc, #528]	@ (8007724 <UART_SetConfig+0x930>)
 8007512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007516:	b29b      	uxth	r3, r3
 8007518:	2200      	movs	r2, #0
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007526:	f7f8 fed7 	bl	80002d8 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4610      	mov	r0, r2
 8007530:	4619      	mov	r1, r3
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	020b      	lsls	r3, r1, #8
 800753c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007540:	0202      	lsls	r2, r0, #8
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	6849      	ldr	r1, [r1, #4]
 8007546:	0849      	lsrs	r1, r1, #1
 8007548:	2000      	movs	r0, #0
 800754a:	460c      	mov	r4, r1
 800754c:	4605      	mov	r5, r0
 800754e:	eb12 0804 	adds.w	r8, r2, r4
 8007552:	eb43 0905 	adc.w	r9, r3, r5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	469a      	mov	sl, r3
 800755e:	4693      	mov	fp, r2
 8007560:	4652      	mov	r2, sl
 8007562:	465b      	mov	r3, fp
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	f7f8 feb6 	bl	80002d8 <__aeabi_uldivmod>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4613      	mov	r3, r2
 8007572:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800757a:	d308      	bcc.n	800758e <UART_SetConfig+0x79a>
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007582:	d204      	bcs.n	800758e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800758a:	60da      	str	r2, [r3, #12]
 800758c:	e17c      	b.n	8007888 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007594:	e178      	b.n	8007888 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759e:	f040 80c5 	bne.w	800772c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80075a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	dc48      	bgt.n	800763c <UART_SetConfig+0x848>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	db7b      	blt.n	80076a6 <UART_SetConfig+0x8b2>
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d879      	bhi.n	80076a6 <UART_SetConfig+0x8b2>
 80075b2:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x7c4>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	08007643 	.word	0x08007643
 80075bc:	0800764b 	.word	0x0800764b
 80075c0:	080076a7 	.word	0x080076a7
 80075c4:	080076a7 	.word	0x080076a7
 80075c8:	08007653 	.word	0x08007653
 80075cc:	080076a7 	.word	0x080076a7
 80075d0:	080076a7 	.word	0x080076a7
 80075d4:	080076a7 	.word	0x080076a7
 80075d8:	08007663 	.word	0x08007663
 80075dc:	080076a7 	.word	0x080076a7
 80075e0:	080076a7 	.word	0x080076a7
 80075e4:	080076a7 	.word	0x080076a7
 80075e8:	080076a7 	.word	0x080076a7
 80075ec:	080076a7 	.word	0x080076a7
 80075f0:	080076a7 	.word	0x080076a7
 80075f4:	080076a7 	.word	0x080076a7
 80075f8:	08007673 	.word	0x08007673
 80075fc:	080076a7 	.word	0x080076a7
 8007600:	080076a7 	.word	0x080076a7
 8007604:	080076a7 	.word	0x080076a7
 8007608:	080076a7 	.word	0x080076a7
 800760c:	080076a7 	.word	0x080076a7
 8007610:	080076a7 	.word	0x080076a7
 8007614:	080076a7 	.word	0x080076a7
 8007618:	080076a7 	.word	0x080076a7
 800761c:	080076a7 	.word	0x080076a7
 8007620:	080076a7 	.word	0x080076a7
 8007624:	080076a7 	.word	0x080076a7
 8007628:	080076a7 	.word	0x080076a7
 800762c:	080076a7 	.word	0x080076a7
 8007630:	080076a7 	.word	0x080076a7
 8007634:	080076a7 	.word	0x080076a7
 8007638:	08007699 	.word	0x08007699
 800763c:	2b40      	cmp	r3, #64	@ 0x40
 800763e:	d02e      	beq.n	800769e <UART_SetConfig+0x8aa>
 8007640:	e031      	b.n	80076a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007642:	f7fc fe53 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8007646:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007648:	e033      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764a:	f7fc fe65 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 800764e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007650:	e02f      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fe14 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007660:	e027      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007662:	f107 0318 	add.w	r3, r7, #24
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe ff60 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007670:	e01f      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007672:	4b2d      	ldr	r3, [pc, #180]	@ (8007728 <UART_SetConfig+0x934>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800767e:	4b2a      	ldr	r3, [pc, #168]	@ (8007728 <UART_SetConfig+0x934>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a24      	ldr	r2, [pc, #144]	@ (800771c <UART_SetConfig+0x928>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007690:	e00f      	b.n	80076b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007692:	4b22      	ldr	r3, [pc, #136]	@ (800771c <UART_SetConfig+0x928>)
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007696:	e00c      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007698:	4b21      	ldr	r3, [pc, #132]	@ (8007720 <UART_SetConfig+0x92c>)
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769c:	e009      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a4:	e005      	b.n	80076b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e7 	beq.w	8007888 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	4a19      	ldr	r2, [pc, #100]	@ (8007724 <UART_SetConfig+0x930>)
 80076c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076cc:	005a      	lsls	r2, r3, #1
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	441a      	add	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d916      	bls.n	8007714 <UART_SetConfig+0x920>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d212      	bcs.n	8007714 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f023 030f 	bic.w	r3, r3, #15
 80076f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	b29a      	uxth	r2, r3
 8007704:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007706:	4313      	orrs	r3, r2
 8007708:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	e0b9      	b.n	8007888 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800771a:	e0b5      	b.n	8007888 <UART_SetConfig+0xa94>
 800771c:	03d09000 	.word	0x03d09000
 8007720:	003d0900 	.word	0x003d0900
 8007724:	08007d90 	.word	0x08007d90
 8007728:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800772c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007730:	2b20      	cmp	r3, #32
 8007732:	dc49      	bgt.n	80077c8 <UART_SetConfig+0x9d4>
 8007734:	2b00      	cmp	r3, #0
 8007736:	db7c      	blt.n	8007832 <UART_SetConfig+0xa3e>
 8007738:	2b20      	cmp	r3, #32
 800773a:	d87a      	bhi.n	8007832 <UART_SetConfig+0xa3e>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <UART_SetConfig+0x950>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	080077cf 	.word	0x080077cf
 8007748:	080077d7 	.word	0x080077d7
 800774c:	08007833 	.word	0x08007833
 8007750:	08007833 	.word	0x08007833
 8007754:	080077df 	.word	0x080077df
 8007758:	08007833 	.word	0x08007833
 800775c:	08007833 	.word	0x08007833
 8007760:	08007833 	.word	0x08007833
 8007764:	080077ef 	.word	0x080077ef
 8007768:	08007833 	.word	0x08007833
 800776c:	08007833 	.word	0x08007833
 8007770:	08007833 	.word	0x08007833
 8007774:	08007833 	.word	0x08007833
 8007778:	08007833 	.word	0x08007833
 800777c:	08007833 	.word	0x08007833
 8007780:	08007833 	.word	0x08007833
 8007784:	080077ff 	.word	0x080077ff
 8007788:	08007833 	.word	0x08007833
 800778c:	08007833 	.word	0x08007833
 8007790:	08007833 	.word	0x08007833
 8007794:	08007833 	.word	0x08007833
 8007798:	08007833 	.word	0x08007833
 800779c:	08007833 	.word	0x08007833
 80077a0:	08007833 	.word	0x08007833
 80077a4:	08007833 	.word	0x08007833
 80077a8:	08007833 	.word	0x08007833
 80077ac:	08007833 	.word	0x08007833
 80077b0:	08007833 	.word	0x08007833
 80077b4:	08007833 	.word	0x08007833
 80077b8:	08007833 	.word	0x08007833
 80077bc:	08007833 	.word	0x08007833
 80077c0:	08007833 	.word	0x08007833
 80077c4:	08007825 	.word	0x08007825
 80077c8:	2b40      	cmp	r3, #64	@ 0x40
 80077ca:	d02e      	beq.n	800782a <UART_SetConfig+0xa36>
 80077cc:	e031      	b.n	8007832 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ce:	f7fc fd8d 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 80077d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077d4:	e033      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d6:	f7fc fd9f 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 80077da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077dc:	e02f      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd4e 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ec:	e027      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ee:	f107 0318 	add.w	r3, r7, #24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fe9a 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fc:	e01f      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077fe:	4b2d      	ldr	r3, [pc, #180]	@ (80078b4 <UART_SetConfig+0xac0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800780a:	4b2a      	ldr	r3, [pc, #168]	@ (80078b4 <UART_SetConfig+0xac0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	08db      	lsrs	r3, r3, #3
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	4a28      	ldr	r2, [pc, #160]	@ (80078b8 <UART_SetConfig+0xac4>)
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800781c:	e00f      	b.n	800783e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800781e:	4b26      	ldr	r3, [pc, #152]	@ (80078b8 <UART_SetConfig+0xac4>)
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007822:	e00c      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007824:	4b25      	ldr	r3, [pc, #148]	@ (80078bc <UART_SetConfig+0xac8>)
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007828:	e009      	b.n	800783e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007830:	e005      	b.n	800783e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800783c:	bf00      	nop
    }

    if (pclk != 0U)
 800783e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d021      	beq.n	8007888 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <UART_SetConfig+0xacc>)
 800784a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784e:	461a      	mov	r2, r3
 8007850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007852:	fbb3 f2f2 	udiv	r2, r3, r2
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	441a      	add	r2, r3
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786a:	2b0f      	cmp	r3, #15
 800786c:	d909      	bls.n	8007882 <UART_SetConfig+0xa8e>
 800786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007874:	d205      	bcs.n	8007882 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	b29a      	uxth	r2, r3
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60da      	str	r2, [r3, #12]
 8007880:	e002      	b.n	8007888 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2201      	movs	r2, #1
 800788c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2201      	movs	r2, #1
 8007894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2200      	movs	r2, #0
 800789c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2200      	movs	r2, #0
 80078a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3748      	adds	r7, #72	@ 0x48
 80078ac:	46bd      	mov	sp, r7
 80078ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078b2:	bf00      	nop
 80078b4:	58024400 	.word	0x58024400
 80078b8:	03d09000 	.word	0x03d09000
 80078bc:	003d0900 	.word	0x003d0900
 80078c0:	08007d90 	.word	0x08007d90

080078c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c2:	d10a      	bne.n	80079da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b098      	sub	sp, #96	@ 0x60
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a18:	f7f9 fc48 	bl	80012ac <HAL_GetTick>
 8007a1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d12f      	bne.n	8007a8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f88e 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d022      	beq.n	8007a8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e063      	b.n	8007b54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d149      	bne.n	8007b2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f857 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d03c      	beq.n	8007b2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e6      	bne.n	8007ab4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b06:	61fa      	str	r2, [r7, #28]
 8007b08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	69b9      	ldr	r1, [r7, #24]
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	617b      	str	r3, [r7, #20]
   return(result);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e5      	bne.n	8007ae6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e012      	b.n	8007b54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3758      	adds	r7, #88	@ 0x58
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6c:	e04f      	b.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d04b      	beq.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b76:	f7f9 fb99 	bl	80012ac <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e04e      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d037      	beq.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b80      	cmp	r3, #128	@ 0x80
 8007ba2:	d034      	beq.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d031      	beq.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d110      	bne.n	8007bda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f839 	bl	8007c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e029      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be8:	d111      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f81f 	bl	8007c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e00f      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69da      	ldr	r2, [r3, #28]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4013      	ands	r3, r2
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	bf0c      	ite	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	2300      	movne	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d0a0      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b095      	sub	sp, #84	@ 0x54
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e6      	bne.n	8007c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	4b1e      	ldr	r3, [pc, #120]	@ (8007d00 <UART_EndRxTransfer+0xc8>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e5      	bne.n	8007c72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d118      	bne.n	8007ce0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6979      	ldr	r1, [r7, #20]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e6      	bne.n	8007cae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007cf4:	bf00      	nop
 8007cf6:	3754      	adds	r7, #84	@ 0x54
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	effffffe 	.word	0xeffffffe

08007d04 <memset>:
 8007d04:	4402      	add	r2, r0
 8007d06:	4603      	mov	r3, r0
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d100      	bne.n	8007d0e <memset+0xa>
 8007d0c:	4770      	bx	lr
 8007d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d12:	e7f9      	b.n	8007d08 <memset+0x4>

08007d14 <__libc_init_array>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4d0d      	ldr	r5, [pc, #52]	@ (8007d4c <__libc_init_array+0x38>)
 8007d18:	4c0d      	ldr	r4, [pc, #52]	@ (8007d50 <__libc_init_array+0x3c>)
 8007d1a:	1b64      	subs	r4, r4, r5
 8007d1c:	10a4      	asrs	r4, r4, #2
 8007d1e:	2600      	movs	r6, #0
 8007d20:	42a6      	cmp	r6, r4
 8007d22:	d109      	bne.n	8007d38 <__libc_init_array+0x24>
 8007d24:	4d0b      	ldr	r5, [pc, #44]	@ (8007d54 <__libc_init_array+0x40>)
 8007d26:	4c0c      	ldr	r4, [pc, #48]	@ (8007d58 <__libc_init_array+0x44>)
 8007d28:	f000 f818 	bl	8007d5c <_init>
 8007d2c:	1b64      	subs	r4, r4, r5
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	2600      	movs	r6, #0
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	d105      	bne.n	8007d42 <__libc_init_array+0x2e>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3c:	4798      	blx	r3
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7ee      	b.n	8007d20 <__libc_init_array+0xc>
 8007d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d46:	4798      	blx	r3
 8007d48:	3601      	adds	r6, #1
 8007d4a:	e7f2      	b.n	8007d32 <__libc_init_array+0x1e>
 8007d4c:	08007db0 	.word	0x08007db0
 8007d50:	08007db0 	.word	0x08007db0
 8007d54:	08007db0 	.word	0x08007db0
 8007d58:	08007db4 	.word	0x08007db4

08007d5c <_init>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr

08007d68 <_fini>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr
